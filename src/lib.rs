/* automatically generated by rust-bindgen 0.54.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const ENV_SEPARATOR: &'static [u8; 2usize] = b":\0";
pub const ENV_SEPARATOR_CHAR: u8 = 58u8;
pub const ETC_MNTTAB: &'static [u8; 10usize] = b"/etc/mtab\0";
pub const HAVE_AES_CFB128_ENCRYPT: u32 = 1;
pub const HAVE_ALLOCA: u32 = 1;
pub const HAVE_ALLOCA_H: u32 = 1;
pub const HAVE_ARPA_INET_H: u32 = 1;
pub const HAVE_ASM_TYPES_H: u32 = 1;
pub const HAVE_ASN1_STRING_GET0_DATA: u32 = 1;
pub const HAVE_ASPRINTF: u32 = 1;
pub const HAVE_CHOWN: u32 = 1;
pub const HAVE_CLOCK_GETTIME: u32 = 1;
pub const HAVE_CLOSEDIR: u32 = 1;
pub const HAVE_DECL_SENSORS_GET_ALL_SUBFEATURES: u32 = 1;
pub const HAVE_DH_GET0_KEY: u32 = 1;
pub const HAVE_DH_GET0_PQG: u32 = 1;
pub const HAVE_DH_SET0_PQG: u32 = 1;
pub const HAVE_DIRENT_H: u32 = 1;
pub const HAVE_DLFCN_H: u32 = 1;
pub const HAVE_DLOPEN: u32 = 1;
pub const HAVE_DPKG_QUERY: u32 = 1;
pub const HAVE_DTLSV1_METHOD: u32 = 1;
pub const HAVE_DTLS_METHOD: u32 = 1;
pub const HAVE_ERR_H: u32 = 1;
pub const HAVE_EVP_MD_CTX_FREE: u32 = 1;
pub const HAVE_EVP_MD_CTX_NEW: u32 = 1;
pub const HAVE_EVP_SHA224: u32 = 1;
pub const HAVE_EVP_SHA384: u32 = 1;
pub const HAVE_EXECV: u32 = 1;
pub const HAVE_FCNTL_H: u32 = 1;
pub const HAVE_FGETC_UNLOCKED: u32 = 1;
pub const HAVE_FLOCKFILE: u32 = 1;
pub const HAVE_FORK: u32 = 1;
pub const HAVE_FSTAB_H: u32 = 1;
pub const HAVE_FSYNC: u32 = 1;
pub const HAVE_FUNLOCKFILE: u32 = 1;
pub const HAVE_GAI_STRERROR: u32 = 1;
pub const HAVE_GETADDRINFO: u32 = 1;
pub const HAVE_GETDTABLESIZE: u32 = 1;
pub const HAVE_GETGRNAM: u32 = 1;
pub const HAVE_GETHOSTBYADDR: u32 = 1;
pub const HAVE_GETHOSTBYNAME: u32 = 1;
pub const HAVE_GETHOSTBYNAME2: u32 = 1;
pub const HAVE_GETHOSTNAME: u32 = 1;
pub const HAVE_GETLOADAVG: u32 = 1;
pub const HAVE_GETMNTENT: u32 = 1;
pub const HAVE_GETOPT: u32 = 1;
pub const HAVE_GETOPT_H: u32 = 1;
pub const HAVE_GETPAGESIZE: u32 = 1;
pub const HAVE_GETPID: u32 = 1;
pub const HAVE_GETPWNAM: u32 = 1;
pub const HAVE_GETTIMEOFDAY: u32 = 1;
pub const HAVE_GRP_H: u32 = 1;
pub const HAVE_HASMNTOPT: u32 = 1;
pub const HAVE_IF_FREENAMEINDEX: u32 = 1;
pub const HAVE_IF_INDEXTONAME: u32 = 1;
pub const HAVE_IF_NAMEINDEX: u32 = 1;
pub const HAVE_IF_NAMETOINDEX: u32 = 1;
pub const HAVE_INET_NTOP: u32 = 1;
pub const HAVE_INET_PTON: u32 = 1;
pub const HAVE_INITGROUPS: u32 = 1;
pub const HAVE_INTMAX_T: u32 = 1;
pub const HAVE_INTPTR_T: u32 = 1;
pub const HAVE_INTTYPES_H: u32 = 1;
pub const HAVE_IN_ADDR_T: u32 = 1;
pub const HAVE_IP_PKTINFO: u32 = 1;
pub const HAVE_LIBCRYPTO: u32 = 1;
pub const HAVE_LIMITS_H: u32 = 1;
pub const HAVE_LINUX_ETHTOOL_H: u32 = 1;
pub const HAVE_LINUX_HDREG_H: u32 = 1;
pub const HAVE_LINUX_NETLINK_H: u32 = 1;
pub const HAVE_LINUX_RTNETLINK_H: u32 = 1;
pub const HAVE_LOCALE_H: u32 = 1;
pub const HAVE_LOCALTIME_R: u32 = 1;
pub const HAVE_LONG_LONG_INT: u32 = 1;
pub const HAVE_LRAND48: u32 = 1;
pub const HAVE_LSEEK64: u32 = 1;
pub const HAVE_MALLOC_H: u32 = 1;
pub const HAVE_MEMORY_H: u32 = 1;
pub const HAVE_MKSTEMP: u32 = 1;
pub const HAVE_MKTIME: u32 = 1;
pub const HAVE_MNTENT_H: u32 = 1;
pub const HAVE_MYSQL_INIT: u32 = 1;
pub const HAVE_MY_LOAD_DEFAULTS: u32 = 1;
pub const HAVE_NETDB_H: u32 = 1;
pub const HAVE_NETINET_ICMP6_H: u32 = 1;
pub const HAVE_NETINET_IF_ETHER_H: u32 = 1;
pub const HAVE_NETINET_IN_H: u32 = 1;
pub const HAVE_NETINET_IN_SYSTM_H: u32 = 1;
pub const HAVE_NETINET_IP6_H: u32 = 1;
pub const HAVE_NETINET_IP_H: u32 = 1;
pub const HAVE_NETINET_IP_ICMP_H: u32 = 1;
pub const HAVE_NETINET_TCP_H: u32 = 1;
pub const HAVE_NETINET_UDP_H: u32 = 1;
pub const HAVE_NETIPX_IPX_H: u32 = 1;
pub const HAVE_NET_IF_ARP_H: u32 = 1;
pub const HAVE_NET_IF_H: u32 = 1;
pub const HAVE_NET_ROUTE_H: u32 = 1;
pub const HAVE_NFDS_T: u32 = 1;
pub const HAVE_OFF64_T: u32 = 1;
pub const HAVE_OPENDIR: u32 = 1;
pub const HAVE_OPENSSL_AES_H: u32 = 1;
pub const HAVE_OPENSSL_DES_H: u32 = 1;
pub const HAVE_OPENSSL_DH_H: u32 = 1;
pub const HAVE_OPENSSL_EVP_H: u32 = 1;
pub const HAVE_OPENSSL_HMAC_H: u32 = 1;
pub const HAVE_PCI_LOOKUP_NAME: u32 = 1;
pub const HAVE_PCI_PCI_H: u32 = 1;
pub const HAVE_PERL_EVAL_PV_UC: u32 = 1;
pub const HAVE_POLL: u32 = 1;
pub const HAVE_PREAD64: u32 = 1;
pub const HAVE_PRIORITYNAMES: u32 = 1;
pub const HAVE_PTHREAD_H: u32 = 1;
pub const HAVE_PWD_H: u32 = 1;
pub const HAVE_RAND: u32 = 1;
pub const HAVE_RANDOM: u32 = 1;
pub const HAVE_READDIR: u32 = 1;
pub const HAVE_REGCOMP: u32 = 1;
pub const HAVE_REGEX_H: u32 = 1;
pub const HAVE_SEARCH_H: u32 = 1;
pub const HAVE_SELECT: u32 = 1;
pub const HAVE_SENSORS_SENSORS_H: u32 = 1;
pub const HAVE_SETENV: u32 = 1;
pub const HAVE_SETGID: u32 = 1;
pub const HAVE_SETGROUPS: u32 = 1;
pub const HAVE_SETITIMER: u32 = 1;
pub const HAVE_SETLOCALE: u32 = 1;
pub const HAVE_SETMNTENT: u32 = 1;
pub const HAVE_SETSID: u32 = 1;
pub const HAVE_SETUID: u32 = 1;
pub const HAVE_SGTTY_H: u32 = 1;
pub const HAVE_SIGACTION: u32 = 1;
pub const HAVE_SIGBLOCK: u32 = 1;
pub const HAVE_SIGHOLD: u32 = 1;
pub const HAVE_SIGHUP: u32 = 1;
pub const HAVE_SIGNAL: u32 = 1;
pub const HAVE_SIGPROCMASK: u32 = 1;
pub const HAVE_SIGSET: u32 = 1;
pub const HAVE_SNPRINTF: u32 = 1;
pub const HAVE_SOCKET: u32 = 1;
pub const HAVE_SOCKLEN_T: u32 = 1;
pub const HAVE_SRAND: u32 = 1;
pub const HAVE_SRAND48: u32 = 1;
pub const HAVE_SRANDOM: u32 = 1;
pub const HAVE_SSIZE_T: u32 = 1;
pub const HAVE_STATFS: u32 = 1;
pub const HAVE_STATVFS: u32 = 1;
pub const HAVE_STDINT_H: u32 = 1;
pub const HAVE_STDLIB_H: u32 = 1;
pub const HAVE_STRCASESTR: u32 = 1;
pub const HAVE_STRDUP: u32 = 1;
pub const HAVE_STRERROR: u32 = 1;
pub const HAVE_STRINGS_H: u32 = 1;
pub const HAVE_STRING_H: u32 = 1;
pub const HAVE_STRNCASECMP: u32 = 1;
pub const HAVE_STRTOK_R: u32 = 1;
pub const HAVE_STRTOL: u32 = 1;
pub const HAVE_STRTOUL: u32 = 1;
pub const HAVE_STRTOULL: u32 = 1;
pub const HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const HAVE_STRUCT_ETHTOOL_CMD_SPEED_HI: u32 = 1;
pub const HAVE_STRUCT_IFADDR_IFA_NEXT: u32 = 1;
pub const HAVE_STRUCT_IFNET_IF_IBYTES: u32 = 1;
pub const HAVE_STRUCT_IFNET_IF_IQDROPS: u32 = 1;
pub const HAVE_STRUCT_IFNET_IF_MTU: u32 = 1;
pub const HAVE_STRUCT_IFNET_IF_OBYTES: u32 = 1;
pub const HAVE_STRUCT_IFNET_IF_SPEED: u32 = 1;
pub const HAVE_STRUCT_IFNET_IF_TYPE: u32 = 1;
pub const HAVE_STRUCT_RTENTRY_RT_DST: u32 = 1;
pub const HAVE_STRUCT_SIGACTION_SA_SIGACTION: u32 = 1;
pub const HAVE_STRUCT_SOCKADDR_IN6_SIN6_SCOPE_ID: u32 = 1;
pub const HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY: u32 = 1;
pub const HAVE_STRUCT_STATFS_F_FFREE: u32 = 1;
pub const HAVE_STRUCT_STATFS_F_FILES: u32 = 1;
pub const HAVE_STRUCT_STATFS_F_FLAGS: u32 = 1;
pub const HAVE_STRUCT_STATFS_F_FRSIZE: u32 = 1;
pub const HAVE_STRUCT_STATVFS_F_FILES: u32 = 1;
pub const HAVE_STRUCT_STATVFS_F_FRSIZE: u32 = 1;
pub const HAVE_STRUCT_TIMEZONE_TZ_DSTTIME: u32 = 1;
pub const HAVE_STRUCT_TM_TM_GMTOFF: u32 = 1;
pub const HAVE_SYSCONF: u32 = 1;
pub const HAVE_SYSLOG_H: u32 = 1;
pub const HAVE_SYSTEM: u32 = 1;
pub const HAVE_SYS_CDEFS_H: u32 = 1;
pub const HAVE_SYS_FILE_H: u32 = 1;
pub const HAVE_SYS_IOCTL_H: u32 = 1;
pub const HAVE_SYS_MOUNT_H: u32 = 1;
pub const HAVE_SYS_PARAM_H: u32 = 1;
pub const HAVE_SYS_POLL_H: u32 = 1;
pub const HAVE_SYS_QUEUE_H: u32 = 1;
pub const HAVE_SYS_SELECT_H: u32 = 1;
pub const HAVE_SYS_SOCKETVAR_H: u32 = 1;
pub const HAVE_SYS_SOCKET_H: u32 = 1;
pub const HAVE_SYS_STATFS_H: u32 = 1;
pub const HAVE_SYS_STATVFS_H: u32 = 1;
pub const HAVE_SYS_STAT_H: u32 = 1;
pub const HAVE_SYS_SWAP_H: u32 = 1;
pub const HAVE_SYS_SYSCTL_H: u32 = 1;
pub const HAVE_SYS_SYSLOG_H: u32 = 1;
pub const HAVE_SYS_SYSMACROS_H: u32 = 1;
pub const HAVE_SYS_TIMEB_H: u32 = 1;
pub const HAVE_SYS_TIMES_H: u32 = 1;
pub const HAVE_SYS_TIME_H: u32 = 1;
pub const HAVE_SYS_TYPES_H: u32 = 1;
pub const HAVE_SYS_UIO_H: u32 = 1;
pub const HAVE_SYS_UN_H: u32 = 1;
pub const HAVE_SYS_USER_H: u32 = 1;
pub const HAVE_SYS_UTSNAME_H: u32 = 1;
pub const HAVE_SYS_VFS_H: u32 = 1;
pub const HAVE_SYS_WAIT_H: u32 = 1;
pub const HAVE_TCGETATTR: u32 = 1;
pub const HAVE_TIMES: u32 = 1;
pub const HAVE_TIMEZONE_VARIABLE: u32 = 1;
pub const HAVE_TLSV1_METHOD: u32 = 1;
pub const HAVE_TLS_METHOD: u32 = 1;
pub const HAVE_UINTMAX_T: u32 = 1;
pub const HAVE_UINTPTR_T: u32 = 1;
pub const HAVE_UNAME: u32 = 1;
pub const HAVE_UNISTD_H: u32 = 1;
pub const HAVE_UNSIGNED_LONG_LONG_INT: u32 = 1;
pub const HAVE_USLEEP: u32 = 1;
pub const HAVE_UTMPX_H: u32 = 1;
pub const HAVE_VSNPRINTF: u32 = 1;
pub const HAVE_X509_GET_SIGNATURE_NID: u32 = 1;
pub const HAVE_X509_NAME_ENTRY_GET_DATA: u32 = 1;
pub const HAVE_X509_NAME_ENTRY_GET_OBJECT: u32 = 1;
pub const KERNEL_LOC: &'static [u8; 8usize] = b"unknown\0";
pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
pub const NETSNMP_AGENTX_SOCKET: &'static [u8; 19usize] = b"/var/agentx/master\0";
pub const NETSNMP_CAN_DO_CRYPTO: u32 = 1;
pub const NETSNMP_CONFIGURE_OPTIONS : & 'static [ u8 ; 1548usize ] = b" '--build=x86_64-linux-gnu' '--includedir=${prefix}/include' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var' '--disable-silent-rules' '--libdir=${prefix}/lib/x86_64-linux-gnu' '--runstatedir=/run' '--disable-maintainer-mode' '--disable-dependency-tracking' '--prefix=/usr' '--sysconfdir=/etc' '--mandir=/usr/share/man' '--with-persistent-directory=/var/lib/snmp' '--enable-ucd-snmp-compatibility' '--with-cflags=-g -O2 -fdebug-prefix-map=/build/net-snmp-iTRRBW/net-snmp-5.8+dfsg=. -fstack-protector-strong -Wformat -Werror=format-security -DNETSNMP_USE_INLINE' '--with-ldflags=-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now' '--with-perl-modules=INSTALLDIRS=vendor' '--enable-as-needed' '--with-logfile=none' '--without-rpm' '--with-libwrap' '--with-openssl' '--without-dmalloc' '--without-efence' '--without-rsaref' '--with-sys-contact=root' '--with-sys-location=Unknown' '--with-mib-modules=smux ucd-snmp/dlmod mibII/mta_sendmail disman/event-mib ucd-snmp/diskio ucd-snmp/lmsensorsMib etherlike-mib/dot3StatsTable host' '--with-out-mib-modules=' '--enable-mfd-rewrites' '--with-mnttab=/etc/mtab' '--with-mibdirs=$HOME/.snmp/mibs:/usr/share/snmp/mibs:/usr/share/snmp/mibs/iana:/usr/share/snmp/mibs/ietf' '--with-mysql' '--with-defaults' 'build_alias=x86_64-linux-gnu' 'CFLAGS=-g -O2 -fdebug-prefix-map=/build/net-snmp-iTRRBW/net-snmp-5.8+dfsg=. -fstack-protector-strong -Wformat -Werror=format-security' 'LDFLAGS=-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now' 'CPPFLAGS=-Wdate-time -D_FORTIFY_SOURCE=2'\0" ;
pub const NETSNMP_DEFAULT_MIBDIRS: &'static [u8; 90usize] =
    b"$HOME/.snmp/mibs:/usr/share/snmp/mibs:/usr/share/snmp/mibs/iana:/usr/share/snmp/mibs/ietf\0";
pub const NETSNMP_EMBEDDED_PERL: u32 = 1;
pub const NETSNMP_ENABLE_IPV6: u32 = 1;
pub const NETSNMP_ENABLE_MFD_REWRITES: u32 = 1;
pub const NETSNMP_ENABLE_SCAPI_AUTHPRIV: u32 = 1;
pub const NETSNMP_NO_DUMMY_VALUES: u32 = 1;
pub const NETSNMP_NO_SYSTEMD: u32 = 1;
pub const NETSNMP_PERSISTENT_MASK: u32 = 63;
pub const NETSNMP_PRI32: &'static [u8; 1usize] = b"\0";
pub const NETSNMP_PRIz: &'static [u8; 2usize] = b"l\0";
pub const NETSNMP_TEMP_FILE_PATTERN: &'static [u8; 17usize] = b"/tmp/snmpdXXXXXX\0";
pub const NETSNMP_USE_MYSQL: u32 = 1;
pub const NETSNMP_USE_SENSORS_V3: u32 = 1;
pub const NETSNMP_WITH_OPAQUE_SPECIAL_TYPES: u32 = 1;
pub const PACKAGE_BUGREPORT: &'static [u8; 38usize] = b"net-snmp-coders@lists.sourceforge.net\0";
pub const PACKAGE_NAME: &'static [u8; 9usize] = b"Net-SNMP\0";
pub const PACKAGE_STRING: &'static [u8; 13usize] = b"Net-SNMP 5.8\0";
pub const PACKAGE_TARNAME: &'static [u8; 9usize] = b"net-snmp\0";
pub const PACKAGE_URL: &'static [u8; 1usize] = b"\0";
pub const PACKAGE_VERSION: &'static [u8; 4usize] = b"5.8\0";
pub const PSCMD: &'static [u8; 11usize] = b"/bin/ps -e\0";
pub const SIZEOF_INT: u32 = 4;
pub const SIZEOF_INTMAX_T: u32 = 8;
pub const SIZEOF_LONG: u32 = 8;
pub const SIZEOF_LONG_LONG: u32 = 8;
pub const SIZEOF_SHORT: u32 = 2;
pub const SIZEOF_SOCKADDR_UN_SUN_PATH: u32 = 108;
pub const STDC_HEADERS: u32 = 1;
pub const SYS_IOCTL_H_HAS_SIOCGIFADDR: u32 = 1;
pub const TIME_WITH_SYS_TIME: u32 = 1;
pub const UNAMEPROG: &'static [u8; 11usize] = b"/bin/uname\0";
pub const _ALL_SOURCE: u32 = 1;
pub const _GNU_SOURCE: u32 = 1;
pub const _POSIX_PTHREAD_SEMANTICS: u32 = 1;
pub const _TANDEM_SOURCE: u32 = 1;
pub const __EXTENSIONS__: u32 = 1;
pub const NETSNMP_USE_OPENSSL: u32 = 1;
pub const HAVE_AES: u32 = 1;
pub const NETSNMP_DEFAULT_SNMP_VERSION: u32 = 3;
pub const NETSNMP_SNMPV1: u32 = 43690;
pub const NETSNMP_SNMPV2ANY: u32 = 40960;
pub const NETSNMP_SNMPV2AUTH: u32 = 32768;
pub const NETSNMP_DEFAULT_MIBS : & 'static [ u8 ; 524usize ] = b":SNMPv2-MIB:IF-MIB:IP-MIB:TCP-MIB:UDP-MIB:HOST-RESOURCES-MIB:NOTIFICATION-LOG-MIB:DISMAN-EVENT-MIB:DISMAN-SCHEDULE-MIB:HOST-RESOURCES-TYPES:MTA-MIB:NETWORK-SERVICES-MIB:UCD-DISKIO-MIB:UCD-DLMOD-MIB:LM-SENSORS-MIB:UCD-SNMP-MIB:UCD-DEMO-MIB:SNMP-TARGET-MIB:NET-SNMP-AGENT-MIB:SNMP-FRAMEWORK-MIB:SNMP-MPD-MIB:SNMP-USER-BASED-SM-MIB:SNMP-VIEW-BASED-ACM-MIB:SNMP-COMMUNITY-MIB:IPV6-ICMP-MIB:IPV6-MIB:IPV6-TCP-MIB:IPV6-UDP-MIB:IP-FORWARD-MIB:NET-SNMP-PASS-MIB:NET-SNMP-EXTEND-MIB:SNMP-NOTIFICATION-MIB:SNMPv2-TM:NET-SNMP-VACM-MIB\0" ;
pub const NETSNMP_ALWAYS_DEBUG: u32 = 0;
pub const NETSNMP_USE_REVERSE_ASNENCODING: u32 = 1;
pub const NETSNMP_DEFAULT_ASNENCODING_DIRECTION: u32 = 1;
pub const NETSNMP_PERSISTENT_DIRECTORY: &'static [u8; 14usize] = b"/var/lib/snmp\0";
pub const NETSNMP_AGENT_DIRECTORY_MODE: u32 = 448;
pub const NETSNMP_MAX_PERSISTENT_BACKUPS: u32 = 10;
pub const NETSNMP_SYSTEM_INCLUDE_FILE: &'static [u8; 24usize] = b"net-snmp/system/linux.h\0";
pub const NETSNMP_MACHINE_INCLUDE_FILE: &'static [u8; 27usize] = b"net-snmp/machine/generic.h\0";
pub const SNMPLIBPATH: &'static [u8; 31usize] = b"/usr/lib/x86_64-linux-gnu/snmp\0";
pub const SNMPSHAREPATH: &'static [u8; 16usize] = b"/usr/share/snmp\0";
pub const SNMPCONFPATH: &'static [u8; 10usize] = b"/etc/snmp\0";
pub const SNMPDLMODPATH: &'static [u8; 37usize] = b"/usr/lib/x86_64-linux-gnu/snmp/dlmod\0";
pub const NETSNMP_SYS_CONTACT: &'static [u8; 5usize] = b"root\0";
pub const NETSNMP_SYS_LOC: &'static [u8; 8usize] = b"Unknown\0";
pub const NETSNMP_USE_LIBWRAP: u32 = 1;
pub const NETSNMP_VERS_DESC: &'static [u8; 8usize] = b"unknown\0";
pub const NETSNMP_SYS_NAME: &'static [u8; 8usize] = b"unknown\0";
pub const NETSNMP_PROCMIBNUM: u32 = 2;
pub const NETSNMP_SHELLMIBNUM: u32 = 8;
pub const NETSNMP_MEMMIBNUM: u32 = 4;
pub const NETSNMP_DISKMIBNUM: u32 = 9;
pub const NETSNMP_LOADAVEMIBNUM: u32 = 10;
pub const NETSNMP_VERSIONMIBNUM: u32 = 100;
pub const NETSNMP_ERRORMIBNUM: u32 = 101;
pub const NETSNMP_AGENTID: u32 = 250;
pub const NETSNMP_HPUX9ID: u32 = 1;
pub const NETSNMP_SUNOS4ID: u32 = 2;
pub const NETSNMP_SOLARISID: u32 = 3;
pub const NETSNMP_OSFID: u32 = 4;
pub const NETSNMP_ULTRIXID: u32 = 5;
pub const NETSNMP_HPUX10ID: u32 = 6;
pub const NETSNMP_NETBSD1ID: u32 = 7;
pub const NETSNMP_FREEBSDID: u32 = 8;
pub const NETSNMP_IRIXID: u32 = 9;
pub const NETSNMP_LINUXID: u32 = 10;
pub const NETSNMP_BSDIID: u32 = 11;
pub const NETSNMP_OPENBSDID: u32 = 12;
pub const NETSNMP_WIN32ID: u32 = 13;
pub const NETSNMP_HPUX11ID: u32 = 14;
pub const NETSNMP_AIXID: u32 = 15;
pub const NETSNMP_MACOSXID: u32 = 16;
pub const NETSNMP_DRAGONFLYID: u32 = 17;
pub const NETSNMP_UNKNOWNID: u32 = 255;
pub const NETSNMP_OSTYPE: u32 = 10;
pub const NETSNMP_ENTERPRISE_OID: u32 = 8072;
pub const NETSNMP_ENTERPRISE_DOT_MIB_LENGTH: u32 = 7;
pub const NETSNMP_SYSTEM_DOT_MIB_LENGTH: u32 = 10;
pub const NETSNMP_NOTIFICATION_DOT_MIB_LENGTH: u32 = 8;
pub const NETSNMP_UCDAVIS_OID: u32 = 2021;
pub const NETSNMP_UCDAVIS_DOT_MIB_LENGTH: u32 = 7;
pub const NETSNMP_ERRORTIMELENGTH: u32 = 600;
pub const NETSNMP_EXCACHETIME: u32 = 30;
pub const NETSNMP_CACHEFILE: &'static [u8; 17usize] = b".snmp-exec-cache\0";
pub const NETSNMP_MAXCACHESIZE: u32 = 120000;
pub const NETSNMP_DEFDISKMINIMUMSPACE: u32 = 100000;
pub const NETSNMP_DEFMAXLOADAVE: f64 = 12.0;
pub const NETSNMP_MAXREADCOUNT: u32 = 100;
pub const NETSNMP_SNMPBLOCK: u32 = 1;
pub const NETSNMP_RESTARTSLEEP: u32 = 5;
pub const NETSNMP_NUM_COMMUNITIES: u32 = 5;
pub const NETSNMP_LASTFIELD: i32 = -1;
pub const NETSNMP_TRANSPORT_UDP_DOMAIN: u32 = 1;
pub const NETSNMP_TRANSPORT_CALLBACK_DOMAIN: u32 = 1;
pub const NETSNMP_TRANSPORT_TCP_DOMAIN: u32 = 1;
pub const NETSNMP_TRANSPORT_UNIX_DOMAIN: u32 = 1;
pub const NETSNMP_TRANSPORT_UDPIPV6_DOMAIN: u32 = 1;
pub const NETSNMP_TRANSPORT_TCPIPV6_DOMAIN: u32 = 1;
pub const NETSNMP_TRANSPORT_ALIAS_DOMAIN: u32 = 1;
pub const NETSNMP_TRANSPORT_IPV4BASE_DOMAIN: u32 = 1;
pub const NETSNMP_SECMOD_USM: u32 = 1;
pub const NETSNMP_OID: u32 = 8072;
pub const NETSNMP_DOT_MIB_LENGTH: u32 = 7;
pub const NETSNMP_ENABLE_INLINE: u32 = 1;
pub const IPSTAT_SYMBOL: &'static [u8; 7usize] = b"ipstat\0";
pub const IP_FORWARDING_SYMBOL: &'static [u8; 13usize] = b"ipforwarding\0";
pub const TCP_TTL_SYMBOL: &'static [u8; 14usize] = b"tcpDefaultTTL\0";
pub const IFNET_SYMBOL: &'static [u8; 6usize] = b"ifnet\0";
pub const IFADDR_SYMBOL: &'static [u8; 10usize] = b"in_ifaddr\0";
pub const LOADAVE_SYMBOL: &'static [u8; 8usize] = b"avenrun\0";
pub const PHYSMEM_SYMBOL: &'static [u8; 8usize] = b"physmem\0";
pub const TOTAL_MEMORY_SYMBOL: &'static [u8; 6usize] = b"total\0";
pub const MBSTAT_SYMBOL: &'static [u8; 7usize] = b"mbstat\0";
pub const SWDEVT_SYMBOL: &'static [u8; 7usize] = b"swdevt\0";
pub const FSWDEVT_SYMBOL: &'static [u8; 8usize] = b"fswdevt\0";
pub const NSWAPFS_SYMBOL: &'static [u8; 8usize] = b"nswapfs\0";
pub const NSWAPDEV_SYMBOL: &'static [u8; 9usize] = b"nswapdev\0";
pub const NPROC_SYMBOL: &'static [u8; 6usize] = b"nproc\0";
pub const PROC_SYMBOL: &'static [u8; 5usize] = b"proc\0";
pub const ICMPSTAT_SYMBOL: &'static [u8; 9usize] = b"icmpstat\0";
pub const TCPSTAT_SYMBOL: &'static [u8; 8usize] = b"tcpstat\0";
pub const TCP_SYMBOL: &'static [u8; 4usize] = b"tcb\0";
pub const UDPSTAT_SYMBOL: &'static [u8; 8usize] = b"udpstat\0";
pub const UDB_SYMBOL: &'static [u8; 4usize] = b"udb\0";
pub const RTTABLES_SYMBOL: &'static [u8; 9usize] = b"rt_table\0";
pub const RTHASHSIZE_SYMBOL: &'static [u8; 11usize] = b"rthashsize\0";
pub const RTHOST_SYMBOL: &'static [u8; 7usize] = b"rthost\0";
pub const RTNET_SYMBOL: &'static [u8; 6usize] = b"rtnet\0";
pub const SYSV: u32 = 1;
pub const NETSNMP_DONT_USE_NLIST: u32 = 1;
pub const MNTTYPE_PROC: &'static [u8; 5usize] = b"proc\0";
pub const NETSNMP_USE_INLINE: u32 = 1;
pub const UCD_SNMP_LIBRARY: u32 = 1;
pub const DEFAULT_SNMP_VERSION: u32 = 3;
pub const SNMPV1: u32 = 43690;
pub const SNMPV2ANY: u32 = 40960;
pub const SNMPV2AUTH: u32 = 32768;
pub const DEFAULT_MIBS : & 'static [ u8 ; 524usize ] = b":SNMPv2-MIB:IF-MIB:IP-MIB:TCP-MIB:UDP-MIB:HOST-RESOURCES-MIB:NOTIFICATION-LOG-MIB:DISMAN-EVENT-MIB:DISMAN-SCHEDULE-MIB:HOST-RESOURCES-TYPES:MTA-MIB:NETWORK-SERVICES-MIB:UCD-DISKIO-MIB:UCD-DLMOD-MIB:LM-SENSORS-MIB:UCD-SNMP-MIB:UCD-DEMO-MIB:SNMP-TARGET-MIB:NET-SNMP-AGENT-MIB:SNMP-FRAMEWORK-MIB:SNMP-MPD-MIB:SNMP-USER-BASED-SM-MIB:SNMP-VIEW-BASED-ACM-MIB:SNMP-COMMUNITY-MIB:IPV6-ICMP-MIB:IPV6-MIB:IPV6-TCP-MIB:IPV6-UDP-MIB:IP-FORWARD-MIB:NET-SNMP-PASS-MIB:NET-SNMP-EXTEND-MIB:SNMP-NOTIFICATION-MIB:SNMPv2-TM:NET-SNMP-VACM-MIB\0" ;
pub const DEFAULT_MIBDIRS: &'static [u8; 90usize] =
    b"$HOME/.snmp/mibs:/usr/share/snmp/mibs:/usr/share/snmp/mibs/iana:/usr/share/snmp/mibs/ietf\0";
pub const OPAQUE_SPECIAL_TYPES: u32 = 1;
pub const SCAPI_AUTHPRIV: u32 = 1;
pub const USE_OPENSSL: u32 = 1;
pub const SNMP_ALWAYS_DEBUG: u32 = 0;
pub const USE_REVERSE_ASNENCODING: u32 = 1;
pub const DEFAULT_ASNENCODING_DIRECTION: u32 = 1;
pub const PERSISTENT_DIRECTORY: &'static [u8; 14usize] = b"/var/lib/snmp\0";
pub const PERSISTENT_MASK: u32 = 63;
pub const AGENT_DIRECTORY_MODE: u32 = 448;
pub const MAX_PERSISTENT_BACKUPS: u32 = 10;
pub const SYSTEM_INCLUDE_FILE: &'static [u8; 24usize] = b"net-snmp/system/linux.h\0";
pub const MACHINE_INCLUDE_FILE: &'static [u8; 27usize] = b"net-snmp/machine/generic.h\0";
pub const SYS_CONTACT: &'static [u8; 5usize] = b"root\0";
pub const SYS_LOC: &'static [u8; 8usize] = b"Unknown\0";
pub const USE_LIBWRAP: u32 = 1;
pub const NO_DUMMY_VALUES: u32 = 1;
pub const VERS_DESC: &'static [u8; 8usize] = b"unknown\0";
pub const SYS_NAME: &'static [u8; 8usize] = b"unknown\0";
pub const PROCMIBNUM: u32 = 2;
pub const SHELLMIBNUM: u32 = 8;
pub const MEMMIBNUM: u32 = 4;
pub const DISKMIBNUM: u32 = 9;
pub const LOADAVEMIBNUM: u32 = 10;
pub const VERSIONMIBNUM: u32 = 100;
pub const ERRORMIBNUM: u32 = 101;
pub const AGENTID: u32 = 250;
pub const HPUX9ID: u32 = 1;
pub const SUNOS4ID: u32 = 2;
pub const SOLARISID: u32 = 3;
pub const OSFID: u32 = 4;
pub const ULTRIXID: u32 = 5;
pub const HPUX10ID: u32 = 6;
pub const NETBSD1ID: u32 = 7;
pub const FREEBSDID: u32 = 8;
pub const IRIXID: u32 = 9;
pub const LINUXID: u32 = 10;
pub const BSDIID: u32 = 11;
pub const OPENBSDID: u32 = 12;
pub const WIN32ID: u32 = 13;
pub const HPUX11ID: u32 = 14;
pub const AIXID: u32 = 15;
pub const MACOSXID: u32 = 16;
pub const UNKNOWNID: u32 = 255;
pub const ENTERPRISE_OID: u32 = 8072;
pub const ENTERPRISE_DOT_MIB_LENGTH: u32 = 7;
pub const SYSTEM_DOT_MIB_LENGTH: u32 = 10;
pub const NOTIFICATION_DOT_MIB_LENGTH: u32 = 8;
pub const UCDAVIS_OID: u32 = 2021;
pub const UCDAVIS_DOT_MIB_LENGTH: u32 = 7;
pub const ERRORTIMELENGTH: u32 = 600;
pub const EXCACHETIME: u32 = 30;
pub const CACHEFILE: &'static [u8; 17usize] = b".snmp-exec-cache\0";
pub const MAXCACHESIZE: u32 = 120000;
pub const DEFDISKMINIMUMSPACE: u32 = 100000;
pub const DEFMAXLOADAVE: f64 = 12.0;
pub const MAXREADCOUNT: u32 = 100;
pub const SNMPBLOCK: u32 = 1;
pub const RESTARTSLEEP: u32 = 5;
pub const NUM_COMMUNITIES: u32 = 5;
pub const LASTFIELD: i32 = -1;
pub const CONFIGURE_OPTIONS : & 'static [ u8 ; 1548usize ] = b" '--build=x86_64-linux-gnu' '--includedir=${prefix}/include' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var' '--disable-silent-rules' '--libdir=${prefix}/lib/x86_64-linux-gnu' '--runstatedir=/run' '--disable-maintainer-mode' '--disable-dependency-tracking' '--prefix=/usr' '--sysconfdir=/etc' '--mandir=/usr/share/man' '--with-persistent-directory=/var/lib/snmp' '--enable-ucd-snmp-compatibility' '--with-cflags=-g -O2 -fdebug-prefix-map=/build/net-snmp-iTRRBW/net-snmp-5.8+dfsg=. -fstack-protector-strong -Wformat -Werror=format-security -DNETSNMP_USE_INLINE' '--with-ldflags=-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now' '--with-perl-modules=INSTALLDIRS=vendor' '--enable-as-needed' '--with-logfile=none' '--without-rpm' '--with-libwrap' '--with-openssl' '--without-dmalloc' '--without-efence' '--without-rsaref' '--with-sys-contact=root' '--with-sys-location=Unknown' '--with-mib-modules=smux ucd-snmp/dlmod mibII/mta_sendmail disman/event-mib ucd-snmp/diskio ucd-snmp/lmsensorsMib etherlike-mib/dot3StatsTable host' '--with-out-mib-modules=' '--enable-mfd-rewrites' '--with-mnttab=/etc/mtab' '--with-mibdirs=$HOME/.snmp/mibs:/usr/share/snmp/mibs:/usr/share/snmp/mibs/iana:/usr/share/snmp/mibs/ietf' '--with-mysql' '--with-defaults' 'build_alias=x86_64-linux-gnu' 'CFLAGS=-g -O2 -fdebug-prefix-map=/build/net-snmp-iTRRBW/net-snmp-5.8+dfsg=. -fstack-protector-strong -Wformat -Werror=format-security' 'LDFLAGS=-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now' 'CPPFLAGS=-Wdate-time -D_FORTIFY_SOURCE=2'\0" ;
pub const SNMP_TRANSPORT_UDP_DOMAIN: u32 = 1;
pub const SNMP_TRANSPORT_CALLBACK_DOMAIN: u32 = 1;
pub const SNMP_TRANSPORT_TCP_DOMAIN: u32 = 1;
pub const SNMP_TRANSPORT_UNIX_DOMAIN: u32 = 1;
pub const SNMP_TRANSPORT_UDPIPV6_DOMAIN: u32 = 1;
pub const SNMP_TRANSPORT_TCPIPV6_DOMAIN: u32 = 1;
pub const SNMP_SECMOD_USM: u32 = 1;
pub const INET6: u32 = 1;
pub const AGENTX_SOCKET: &'static [u8; 19usize] = b"/var/agentx/master\0";
pub const DONT_USE_NLIST: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const L_cuserid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const _SYS_TIME_H: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const FD_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const _BITS_TIMEX_H: u32 = 1;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
pub const ADJ_OFFSET_SS_READ: u32 = 40961;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_CLKB: u32 = 16384;
pub const MOD_CLKA: u32 = 32769;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const __clock_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const _SYS_TYPES_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const NETSNMP_NO_SUCH_PROCESS: i32 = -1;
pub const _NETINET_IN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MAX: u32 = 45;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MAX: u32 = 45;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const MAX_SUBID: u32 = 4294967295;
pub const NETSNMP_PRIo: &'static [u8; 2usize] = b"l\0";
pub const MAX_OID_LEN: usize = 128;
pub const USM_AUTH_KU_LEN: u32 = 64;
pub const USM_PRIV_KU_LEN: u32 = 64;
pub const ONE_SEC: u32 = 1000000;
pub const PARSE_PACKET: u32 = 0;
pub const DUMP_PACKET: u32 = 1;
pub const MIN_OID_LEN: u32 = 2;
pub const MAX_NAME_LEN: u32 = 128;
pub const ASN_LONG_LEN: u32 = 128;
pub const ASN_BOOLEAN: u8 = 1;
pub const ASN_INTEGER: u8 = 2;
pub const ASN_BIT_STR: u8 = 3;
pub const ASN_OCTET_STRING: u8 = 4;
pub const ASN_NULL: u8 = 5;
pub const ASN_OBJECT_ID: u8 = 6;
pub const ASN_SEQUENCE: u8 = 0x10;
pub const ASN_SET: u8 = 0x11;
pub const ASN_UNIVERSAL: u8 = 0;
pub const ASN_APPLICATION: u8 = 0x40;
pub const ASN_CONTEXT: u8 = 0x80;
pub const ASN_PRIVATE: u8 = 0xC0;
pub const ASN_PRIMITIVE: u8 = 0;
pub const ASN_CONSTRUCTOR: u8 = 0x20;
pub const ASN_EXTENSION_ID: u8 = 31;
pub const ASN_BIT8: u32 = 128;
pub const ASN_OPAQUE_COUNTER64_MX_BER_LEN: u32 = 12;
pub const ASN_OPAQUE_FLOAT_BER_LEN: u32 = 7;
pub const ASN_OPAQUE_DOUBLE_BER_LEN: u32 = 11;
pub const ASN_OPAQUE_I64_MX_BER_LEN: u32 = 11;
pub const ASN_OPAQUE_U64_MX_BER_LEN: u32 = 12;
pub const MAX_DEBUG_TOKENS: u32 = 256;
pub const MAX_DEBUG_TOKEN_LEN: u32 = 128;
pub const DEBUG_TOKEN_DELIMITER: &'static [u8; 2usize] = b",\0";
pub const DEBUG_ALWAYS_TOKEN: &'static [u8; 4usize] = b"all\0";
pub const _SYS_SYSLOG_H: u32 = 1;
pub const _BITS_SYSLOG_PATH_H: u32 = 1;
pub const _PATH_LOG: &'static [u8; 9usize] = b"/dev/log\0";
pub const LOG_EMERG: u32 = 0;
pub const LOG_ALERT: u32 = 1;
pub const LOG_CRIT: u32 = 2;
pub const LOG_ERR: u32 = 3;
pub const LOG_WARNING: u32 = 4;
pub const LOG_NOTICE: u32 = 5;
pub const LOG_INFO: u32 = 6;
pub const LOG_DEBUG: u32 = 7;
pub const LOG_PRIMASK: u32 = 7;
pub const LOG_KERN: u32 = 0;
pub const LOG_USER: u32 = 8;
pub const LOG_MAIL: u32 = 16;
pub const LOG_DAEMON: u32 = 24;
pub const LOG_AUTH: u32 = 32;
pub const LOG_SYSLOG: u32 = 40;
pub const LOG_LPR: u32 = 48;
pub const LOG_NEWS: u32 = 56;
pub const LOG_UUCP: u32 = 64;
pub const LOG_CRON: u32 = 72;
pub const LOG_AUTHPRIV: u32 = 80;
pub const LOG_FTP: u32 = 88;
pub const LOG_LOCAL0: u32 = 128;
pub const LOG_LOCAL1: u32 = 136;
pub const LOG_LOCAL2: u32 = 144;
pub const LOG_LOCAL3: u32 = 152;
pub const LOG_LOCAL4: u32 = 160;
pub const LOG_LOCAL5: u32 = 168;
pub const LOG_LOCAL6: u32 = 176;
pub const LOG_LOCAL7: u32 = 184;
pub const LOG_NFACILITIES: u32 = 24;
pub const LOG_FACMASK: u32 = 1016;
pub const LOG_PID: u32 = 1;
pub const LOG_CONS: u32 = 2;
pub const LOG_ODELAY: u32 = 4;
pub const LOG_NDELAY: u32 = 8;
pub const LOG_NOWAIT: u32 = 16;
pub const LOG_PERROR: u32 = 32;
pub const DEFAULT_LOG_ID: &'static [u8; 9usize] = b"net-snmp\0";
pub const NETSNMP_LOGHANDLER_STDOUT: u32 = 1;
pub const NETSNMP_LOGHANDLER_STDERR: u32 = 2;
pub const NETSNMP_LOGHANDLER_FILE: u32 = 3;
pub const NETSNMP_LOGHANDLER_SYSLOG: u32 = 4;
pub const NETSNMP_LOGHANDLER_CALLBACK: u32 = 5;
pub const NETSNMP_LOGHANDLER_NONE: u32 = 6;
pub const NETSNMP_SELECT_NOFLAGS: u32 = 0;
pub const NETSNMP_SELECT_NOALARMS: u32 = 1;
pub const MAX_CALLBACK_IDS: u32 = 2;
pub const MAX_CALLBACK_SUBIDS: u32 = 17;
pub const SNMP_CALLBACK_LIBRARY: u32 = 0;
pub const SNMP_CALLBACK_APPLICATION: u32 = 1;
pub const SNMP_CALLBACK_POST_READ_CONFIG: u32 = 0;
pub const SNMP_CALLBACK_STORE_DATA: u32 = 1;
pub const SNMP_CALLBACK_SHUTDOWN: u32 = 2;
pub const SNMP_CALLBACK_POST_PREMIB_READ_CONFIG: u32 = 3;
pub const SNMP_CALLBACK_LOGGING: u32 = 4;
pub const SNMP_CALLBACK_SESSION_INIT: u32 = 5;
pub const SNMP_CALLBACK_PRE_READ_CONFIG: u32 = 7;
pub const SNMP_CALLBACK_PRE_PREMIB_READ_CONFIG: u32 = 8;
pub const NETSNMP_CALLBACK_HIGHEST_PRIORITY: i32 = -1024;
pub const NETSNMP_CALLBACK_DEFAULT_PRIORITY: u32 = 0;
pub const NETSNMP_CALLBACK_LOWEST_PRIORITY: u32 = 1024;
pub const NETSNMP_STREAM_QUEUE_LEN: u32 = 5;
pub const NETSNMP_TRANSPORT_FLAG_STREAM: u32 = 1;
pub const NETSNMP_TRANSPORT_FLAG_LISTEN: u32 = 2;
pub const NETSNMP_TRANSPORT_FLAG_TUNNELED: u32 = 4;
pub const NETSNMP_TRANSPORT_FLAG_TMSTATE: u32 = 8;
pub const NETSNMP_TRANSPORT_FLAG_EMPTY_PKT: u32 = 16;
pub const NETSNMP_TRANSPORT_FLAG_OPENED: u32 = 32;
pub const NETSNMP_TRANSPORT_FLAG_SHARED: u32 = 64;
pub const NETSNMP_TRANSPORT_FLAG_HOSTNAME: u32 = 128;
pub const NETSNMP_TM_MAX_SECNAME: u32 = 256;
pub const NETSNMP_TSPEC_LOCAL: u32 = 1;
pub const NETSNMP_TSPEC_SHARED: u32 = 2;
pub const NETSNMP_TSPEC_NO_DFTL_CLIENT_ADDR: u32 = 4;
pub const _SYS_UN_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const C2SE_ERR_SUCCESS: u32 = 0;
pub const C2SE_ERR_MISSING_ARG: i32 = -1;
pub const C2SE_ERR_COMMUNITY_TOO_LONG: i32 = -2;
pub const C2SE_ERR_SECNAME_TOO_LONG: i32 = -3;
pub const C2SE_ERR_CONTEXT_TOO_LONG: i32 = -4;
pub const C2SE_ERR_MASK_MISMATCH: i32 = -5;
pub const C2SE_ERR_MEMORY: i32 = -6;
pub const STAT_SUCCESS: i32 = 0;
pub const STAT_ERROR: i32 = 1;
pub const STAT_TIMEOUT: i32 = 2;
pub const NETSNMP_MAXLABEL: u32 = 64;
pub const MAXTOKEN: u32 = 128;
pub const MAXQUOTESTR: u32 = 4096;
pub const TYPE_OTHER: u32 = 0;
pub const TYPE_OBJID: u32 = 1;
pub const TYPE_OCTETSTR: u32 = 2;
pub const TYPE_INTEGER: u32 = 3;
pub const TYPE_NETADDR: u32 = 4;
pub const TYPE_IPADDR: u32 = 5;
pub const TYPE_COUNTER: u32 = 6;
pub const TYPE_GAUGE: u32 = 7;
pub const TYPE_TIMETICKS: u32 = 8;
pub const TYPE_OPAQUE: u32 = 9;
pub const TYPE_NULL: u32 = 10;
pub const TYPE_COUNTER64: u32 = 11;
pub const TYPE_BITSTRING: u32 = 12;
pub const TYPE_NSAPADDRESS: u32 = 13;
pub const TYPE_UINTEGER: u32 = 14;
pub const TYPE_UNSIGNED32: u32 = 15;
pub const TYPE_INTEGER32: u32 = 16;
pub const TYPE_SIMPLE_LAST: u32 = 16;
pub const TYPE_TRAPTYPE: u32 = 20;
pub const TYPE_NOTIFTYPE: u32 = 21;
pub const TYPE_OBJGROUP: u32 = 22;
pub const TYPE_NOTIFGROUP: u32 = 23;
pub const TYPE_MODID: u32 = 24;
pub const TYPE_AGENTCAP: u32 = 25;
pub const TYPE_MODCOMP: u32 = 26;
pub const TYPE_OBJIDENTITY: u32 = 27;
pub const MIB_ACCESS_READONLY: u32 = 18;
pub const MIB_ACCESS_READWRITE: u32 = 19;
pub const MIB_ACCESS_WRITEONLY: u32 = 20;
pub const MIB_ACCESS_NOACCESS: u32 = 21;
pub const MIB_ACCESS_NOTIFY: u32 = 67;
pub const MIB_ACCESS_CREATE: u32 = 48;
pub const MIB_STATUS_MANDATORY: u32 = 23;
pub const MIB_STATUS_OPTIONAL: u32 = 24;
pub const MIB_STATUS_OBSOLETE: u32 = 25;
pub const MIB_STATUS_DEPRECATED: u32 = 39;
pub const MIB_STATUS_CURRENT: u32 = 57;
pub const ANON: &'static [u8; 11usize] = b"anonymous#\0";
pub const OID_STASH_CHILDREN_SIZE: u32 = 31;
pub const MIB_IFTYPE_OTHER: u32 = 1;
pub const MIB_IFTYPE_REGULAR1822: u32 = 2;
pub const MIB_IFTYPE_HDH1822: u32 = 3;
pub const MIB_IFTYPE_DDNX25: u32 = 4;
pub const MIB_IFTYPE_RFC877X25: u32 = 5;
pub const MIB_IFTYPE_ETHERNETCSMACD: u32 = 6;
pub const MIB_IFTYPE_ISO88023CSMACD: u32 = 7;
pub const MIB_IFTYPE_ISO88024TOKENBUS: u32 = 8;
pub const MIB_IFTYPE_ISO88025TOKENRING: u32 = 9;
pub const MIB_IFTYPE_ISO88026MAN: u32 = 10;
pub const MIB_IFTYPE_STARLAN: u32 = 11;
pub const MIB_IFTYPE_PROTEON10MBIT: u32 = 12;
pub const MIB_IFTYPE_PROTEON80MBIT: u32 = 13;
pub const MIB_IFTYPE_HYPERCHANNEL: u32 = 14;
pub const MIB_IFTYPE_FDDI: u32 = 15;
pub const MIB_IFTYPE_LAPB: u32 = 16;
pub const MIB_IFTYPE_SDLC: u32 = 17;
pub const MIB_IFTYPE_T1CARRIER: u32 = 18;
pub const MIB_IFTYPE_CEPT: u32 = 19;
pub const MIB_IFTYPE_BASICISDN: u32 = 20;
pub const MIB_IFTYPE_PRIMARYISDN: u32 = 21;
pub const MIB_IFTYPE_PROPPOINTTOPOINTSERIAL: u32 = 22;
pub const MIB_IFSTATUS_UP: u32 = 1;
pub const MIB_IFSTATUS_DOWN: u32 = 2;
pub const MIB_IFSTATUS_TESTING: u32 = 3;
pub const MIB_FORWARD_GATEWAY: u32 = 1;
pub const MIB_FORWARD_HOST: u32 = 2;
pub const MIB_IPROUTETYPE_OTHER: u32 = 1;
pub const MIB_IPROUTETYPE_INVALID: u32 = 2;
pub const MIB_IPROUTETYPE_DIRECT: u32 = 3;
pub const MIB_IPROUTETYPE_REMOTE: u32 = 4;
pub const MIB_IPROUTEPROTO_OTHER: u32 = 1;
pub const MIB_IPROUTEPROTO_LOCAL: u32 = 2;
pub const MIB_IPROUTEPROTO_NETMGMT: u32 = 3;
pub const MIB_IPROUTEPROTO_ICMP: u32 = 4;
pub const MIB_IPROUTEPROTO_EGP: u32 = 5;
pub const MIB_IPROUTEPROTO_GGP: u32 = 6;
pub const MIB_IPROUTEPROTO_HELLO: u32 = 7;
pub const MIB_IPROUTEPROTO_RIP: u32 = 8;
pub const MIB_IPROUTEPROTO_ISIS: u32 = 9;
pub const MIB_IPROUTEPROTO_ESIS: u32 = 10;
pub const MIB_IPROUTEPROTO_CISCOIGRP: u32 = 11;
pub const MIB_IPROUTEPROTO_BBNSPFIGP: u32 = 12;
pub const MIB_IPROUTEPROTO_OIGP: u32 = 13;
pub const MIB_TCPRTOALG_OTHER: u32 = 1;
pub const MIB_TCPRTOALG_CONSTANT: u32 = 2;
pub const MIB_TCPRTOALG_RSRE: u32 = 3;
pub const MIB_TCPRTOALG_VANJ: u32 = 4;
pub const MIB_TCPCONNSTATE_CLOSED: u32 = 1;
pub const MIB_TCPCONNSTATE_LISTEN: u32 = 2;
pub const MIB_TCPCONNSTATE_SYNSENT: u32 = 3;
pub const MIB_TCPCONNSTATE_SYNRECEIVED: u32 = 4;
pub const MIB_TCPCONNSTATE_ESTABLISHED: u32 = 5;
pub const MIB_TCPCONNSTATE_FINWAIT1: u32 = 6;
pub const MIB_TCPCONNSTATE_FINWAIT2: u32 = 7;
pub const MIB_TCPCONNSTATE_CLOSEWAIT: u32 = 8;
pub const MIB_TCPCONNSTATE_LASTACK: u32 = 9;
pub const MIB_TCPCONNSTATE_CLOSING: u32 = 10;
pub const MIB_TCPCONNSTATE_TIMEWAIT: u32 = 11;
pub const MIB_EGPNEIGHSTATE_IDLE: u32 = 1;
pub const MIB_EGPNEIGHSTATE_AQUISITION: u32 = 2;
pub const MIB_EGPNEIGHSTATE_DOWN: u32 = 3;
pub const MIB_EGPNEIGHSTATE_UP: u32 = 4;
pub const MIB_EGPNEIGHSTATE_CEASE: u32 = 5;
pub const NETSNMP_STRING_OUTPUT_GUESS: u32 = 1;
pub const NETSNMP_STRING_OUTPUT_ASCII: u32 = 2;
pub const NETSNMP_STRING_OUTPUT_HEX: u32 = 3;
pub const NETSNMP_OID_OUTPUT_SUFFIX: u32 = 1;
pub const NETSNMP_OID_OUTPUT_MODULE: u32 = 2;
pub const NETSNMP_OID_OUTPUT_FULL: u32 = 3;
pub const NETSNMP_OID_OUTPUT_NUMERIC: u32 = 4;
pub const NETSNMP_OID_OUTPUT_UCD: u32 = 5;
pub const NETSNMP_OID_OUTPUT_NONE: u32 = 6;
pub const SNMP_DEFAULT_COMMUNITY_LEN: u32 = 0;
pub const SNMP_DEFAULT_RETRIES: i32 = -1;
pub const SNMP_DEFAULT_TIMEOUT: i32 = -1;
pub const SNMP_DEFAULT_REMPORT: u32 = 0;
pub const SNMP_DEFAULT_REQID: i32 = -1;
pub const SNMP_DEFAULT_MSGID: i32 = -1;
pub const SNMP_DEFAULT_ERRSTAT: i32 = -1;
pub const SNMP_DEFAULT_ERRINDEX: i32 = -1;
pub const SNMP_DEFAULT_ADDRESS: u32 = 0;
pub const SNMP_DEFAULT_ENTERPRISE_LENGTH: u32 = 0;
pub const SNMP_DEFAULT_TIME: u32 = 0;
pub const SNMP_DEFAULT_VERSION: i32 = -1;
pub const SNMP_DEFAULT_SECMODEL: i32 = -1;
pub const SNMP_DEFAULT_CONTEXT: &'static [u8; 1usize] = b"\0";
pub const SNMP_MAX_RCV_MSG_SIZE: u32 = 65536;
pub const SNMP_MAX_MSG_SIZE: u32 = 1472;
pub const SNMP_MAX_MSG_V3_HDRS: u32 = 51;
pub const SNMP_MAX_ENG_SIZE: u32 = 32;
pub const SNMP_MAX_SEC_NAME_SIZE: u32 = 256;
pub const SNMP_MAX_CONTEXT_SIZE: u32 = 256;
pub const SNMP_SEC_PARAM_BUF_SIZE: u32 = 256;
pub const SNMPV3_IGNORE_UNAUTH_REPORTS: u32 = 0;
pub const SNMP_SESS_NONAUTHORITATIVE: u32 = 0;
pub const SNMP_SESS_AUTHORITATIVE: u32 = 1;
pub const SNMP_SESS_UNKNOWNAUTH: u32 = 2;
pub const REPORT_STATS_LEN: u32 = 9;
pub const REPORT_STATS_LEN2: u32 = 8;
pub const REPORT_snmpUnknownSecurityModels_NUM: u32 = 1;
pub const REPORT_snmpInvalidMsgs_NUM: u32 = 2;
pub const REPORT_snmpUnknownPDUHandlers_NUM: u32 = 3;
pub const REPORT_usmStatsUnsupportedSecLevels_NUM: u32 = 1;
pub const REPORT_usmStatsNotInTimeWindows_NUM: u32 = 2;
pub const REPORT_usmStatsUnknownUserNames_NUM: u32 = 3;
pub const REPORT_usmStatsUnknownEngineIDs_NUM: u32 = 4;
pub const REPORT_usmStatsWrongDigests_NUM: u32 = 5;
pub const REPORT_usmStatsDecryptionErrors_NUM: u32 = 6;
pub const REPORT_snmpUnavailableContexts_NUM: u32 = 4;
pub const REPORT_snmpUnknownContexts_NUM: u32 = 5;
pub const SNMP_DETAIL_SIZE: u32 = 512;
pub const SNMP_FLAGS_UDP_BROADCAST: u32 = 2048;
pub const SNMP_FLAGS_RESP_CALLBACK: u32 = 1024;
pub const SNMP_FLAGS_USER_CREATED: u32 = 512;
pub const SNMP_FLAGS_DONT_PROBE: u32 = 256;
pub const SNMP_FLAGS_STREAM_SOCKET: u32 = 128;
pub const SNMP_FLAGS_LISTENING: u32 = 64;
pub const SNMP_FLAGS_SUBSESSION: u32 = 32;
pub const SNMP_FLAGS_SHARED_SOCKET: u32 = 16;
pub const SNMP_FLAGS_STRIKE2: u32 = 2;
pub const SNMP_FLAGS_STRIKE1: u32 = 1;
pub const SNMPERR_SUCCESS: u32 = 0;
pub const SNMPERR_GENERR: i32 = -1;
pub const SNMPERR_BAD_LOCPORT: i32 = -2;
pub const SNMPERR_BAD_ADDRESS: i32 = -3;
pub const SNMPERR_BAD_SESSION: i32 = -4;
pub const SNMPERR_TOO_LONG: i32 = -5;
pub const SNMPERR_NO_SOCKET: i32 = -6;
pub const SNMPERR_V2_IN_V1: i32 = -7;
pub const SNMPERR_V1_IN_V2: i32 = -8;
pub const SNMPERR_BAD_REPEATERS: i32 = -9;
pub const SNMPERR_BAD_REPETITIONS: i32 = -10;
pub const SNMPERR_BAD_ASN1_BUILD: i32 = -11;
pub const SNMPERR_BAD_SENDTO: i32 = -12;
pub const SNMPERR_BAD_PARSE: i32 = -13;
pub const SNMPERR_BAD_VERSION: i32 = -14;
pub const SNMPERR_BAD_SRC_PARTY: i32 = -15;
pub const SNMPERR_BAD_DST_PARTY: i32 = -16;
pub const SNMPERR_BAD_CONTEXT: i32 = -17;
pub const SNMPERR_BAD_COMMUNITY: i32 = -18;
pub const SNMPERR_NOAUTH_DESPRIV: i32 = -19;
pub const SNMPERR_BAD_ACL: i32 = -20;
pub const SNMPERR_BAD_PARTY: i32 = -21;
pub const SNMPERR_ABORT: i32 = -22;
pub const SNMPERR_UNKNOWN_PDU: i32 = -23;
pub const SNMPERR_TIMEOUT: i32 = -24;
pub const SNMPERR_BAD_RECVFROM: i32 = -25;
pub const SNMPERR_BAD_ENG_ID: i32 = -26;
pub const SNMPERR_BAD_SEC_NAME: i32 = -27;
pub const SNMPERR_BAD_SEC_LEVEL: i32 = -28;
pub const SNMPERR_ASN_PARSE_ERR: i32 = -29;
pub const SNMPERR_UNKNOWN_SEC_MODEL: i32 = -30;
pub const SNMPERR_INVALID_MSG: i32 = -31;
pub const SNMPERR_UNKNOWN_ENG_ID: i32 = -32;
pub const SNMPERR_UNKNOWN_USER_NAME: i32 = -33;
pub const SNMPERR_UNSUPPORTED_SEC_LEVEL: i32 = -34;
pub const SNMPERR_AUTHENTICATION_FAILURE: i32 = -35;
pub const SNMPERR_NOT_IN_TIME_WINDOW: i32 = -36;
pub const SNMPERR_DECRYPTION_ERR: i32 = -37;
pub const SNMPERR_SC_GENERAL_FAILURE: i32 = -38;
pub const SNMPERR_SC_NOT_CONFIGURED: i32 = -39;
pub const SNMPERR_KT_NOT_AVAILABLE: i32 = -40;
pub const SNMPERR_UNKNOWN_REPORT: i32 = -41;
pub const SNMPERR_USM_GENERICERROR: i32 = -42;
pub const SNMPERR_USM_UNKNOWNSECURITYNAME: i32 = -43;
pub const SNMPERR_USM_UNSUPPORTEDSECURITYLEVEL: i32 = -44;
pub const SNMPERR_USM_ENCRYPTIONERROR: i32 = -45;
pub const SNMPERR_USM_AUTHENTICATIONFAILURE: i32 = -46;
pub const SNMPERR_USM_PARSEERROR: i32 = -47;
pub const SNMPERR_USM_UNKNOWNENGINEID: i32 = -48;
pub const SNMPERR_USM_NOTINTIMEWINDOW: i32 = -49;
pub const SNMPERR_USM_DECRYPTIONERROR: i32 = -50;
pub const SNMPERR_NOMIB: i32 = -51;
pub const SNMPERR_RANGE: i32 = -52;
pub const SNMPERR_MAX_SUBID: i32 = -53;
pub const SNMPERR_BAD_SUBID: i32 = -54;
pub const SNMPERR_LONG_OID: i32 = -55;
pub const SNMPERR_BAD_NAME: i32 = -56;
pub const SNMPERR_VALUE: i32 = -57;
pub const SNMPERR_UNKNOWN_OBJID: i32 = -58;
pub const SNMPERR_NULL_PDU: i32 = -59;
pub const SNMPERR_NO_VARS: i32 = -60;
pub const SNMPERR_VAR_TYPE: i32 = -61;
pub const SNMPERR_MALLOC: i32 = -62;
pub const SNMPERR_KRB5: i32 = -63;
pub const SNMPERR_PROTOCOL: i32 = -64;
pub const SNMPERR_OID_NONINCREASING: i32 = -65;
pub const SNMPERR_JUST_A_CONTEXT_PROBE: i32 = -66;
pub const SNMPERR_TRANSPORT_NO_CONFIG: i32 = -67;
pub const SNMPERR_TRANSPORT_CONFIG_ERROR: i32 = -68;
pub const SNMPERR_TLS_NO_CERTIFICATE: i32 = -69;
pub const SNMPERR_MAX: i32 = -69;
pub const NETSNMP_CALLBACK_OP_RECEIVED_MESSAGE: u32 = 1;
pub const NETSNMP_CALLBACK_OP_TIMED_OUT: u32 = 2;
pub const NETSNMP_CALLBACK_OP_SEND_FAILED: u32 = 3;
pub const NETSNMP_CALLBACK_OP_CONNECT: u32 = 4;
pub const NETSNMP_CALLBACK_OP_DISCONNECT: u32 = 5;
pub const NETSNMP_CALLBACK_OP_RESEND: u32 = 6;
pub const NETSNMP_CALLBACK_OP_SEC_ERROR: u32 = 7;
pub const STAT_SNMPUNKNOWNSECURITYMODELS: u32 = 0;
pub const STAT_SNMPINVALIDMSGS: u32 = 1;
pub const STAT_SNMPUNKNOWNPDUHANDLERS: u32 = 2;
pub const STAT_MPD_STATS_START: u32 = 0;
pub const STAT_MPD_STATS_END: u32 = 2;
pub const STAT_USMSTATSUNSUPPORTEDSECLEVELS: u32 = 3;
pub const STAT_USMSTATSNOTINTIMEWINDOWS: u32 = 4;
pub const STAT_USMSTATSUNKNOWNUSERNAMES: u32 = 5;
pub const STAT_USMSTATSUNKNOWNENGINEIDS: u32 = 6;
pub const STAT_USMSTATSWRONGDIGESTS: u32 = 7;
pub const STAT_USMSTATSDECRYPTIONERRORS: u32 = 8;
pub const STAT_USM_STATS_START: u32 = 3;
pub const STAT_USM_STATS_END: u32 = 8;
pub const STAT_SNMPINPKTS: u32 = 9;
pub const STAT_SNMPOUTPKTS: u32 = 10;
pub const STAT_SNMPINBADVERSIONS: u32 = 11;
pub const STAT_SNMPINBADCOMMUNITYNAMES: u32 = 12;
pub const STAT_SNMPINBADCOMMUNITYUSES: u32 = 13;
pub const STAT_SNMPINASNPARSEERRS: u32 = 14;
pub const STAT_SNMPINTOOBIGS: u32 = 16;
pub const STAT_SNMPINNOSUCHNAMES: u32 = 17;
pub const STAT_SNMPINBADVALUES: u32 = 18;
pub const STAT_SNMPINREADONLYS: u32 = 19;
pub const STAT_SNMPINGENERRS: u32 = 20;
pub const STAT_SNMPINTOTALREQVARS: u32 = 21;
pub const STAT_SNMPINTOTALSETVARS: u32 = 22;
pub const STAT_SNMPINGETREQUESTS: u32 = 23;
pub const STAT_SNMPINGETNEXTS: u32 = 24;
pub const STAT_SNMPINSETREQUESTS: u32 = 25;
pub const STAT_SNMPINGETRESPONSES: u32 = 26;
pub const STAT_SNMPINTRAPS: u32 = 27;
pub const STAT_SNMPOUTTOOBIGS: u32 = 28;
pub const STAT_SNMPOUTNOSUCHNAMES: u32 = 29;
pub const STAT_SNMPOUTBADVALUES: u32 = 30;
pub const STAT_SNMPOUTGENERRS: u32 = 32;
pub const STAT_SNMPOUTGETREQUESTS: u32 = 33;
pub const STAT_SNMPOUTGETNEXTS: u32 = 34;
pub const STAT_SNMPOUTSETREQUESTS: u32 = 35;
pub const STAT_SNMPOUTGETRESPONSES: u32 = 36;
pub const STAT_SNMPOUTTRAPS: u32 = 37;
pub const STAT_SNMPSILENTDROPS: u32 = 39;
pub const STAT_SNMPPROXYDROPS: u32 = 40;
pub const STAT_SNMP_STATS_START: u32 = 9;
pub const STAT_SNMP_STATS_END: u32 = 40;
pub const STAT_SNMPUNAVAILABLECONTEXTS: u32 = 41;
pub const STAT_SNMPUNKNOWNCONTEXTS: u32 = 42;
pub const STAT_TARGET_STATS_START: u32 = 41;
pub const STAT_TARGET_STATS_END: u32 = 42;
pub const STAT_TSM_SNMPTSMINVALIDCACHES: u32 = 43;
pub const STAT_TSM_SNMPTSMINADEQUATESECURITYLEVELS: u32 = 44;
pub const STAT_TSM_SNMPTSMUNKNOWNPREFIXES: u32 = 45;
pub const STAT_TSM_SNMPTSMINVALIDPREFIXES: u32 = 46;
pub const STAT_TSM_STATS_START: u32 = 43;
pub const STAT_TSM_STATS_END: u32 = 46;
pub const STAT_TLSTM_SNMPTLSTMSESSIONOPENS: u32 = 47;
pub const STAT_TLSTM_SNMPTLSTMSESSIONCLIENTCLOSES: u32 = 48;
pub const STAT_TLSTM_SNMPTLSTMSESSIONOPENERRORS: u32 = 49;
pub const STAT_TLSTM_SNMPTLSTMSESSIONACCEPTS: u32 = 50;
pub const STAT_TLSTM_SNMPTLSTMSESSIONSERVERCLOSES: u32 = 51;
pub const STAT_TLSTM_SNMPTLSTMSESSIONNOSESSIONS: u32 = 52;
pub const STAT_TLSTM_SNMPTLSTMSESSIONINVALIDCLIENTCERTIFICATES: u32 = 53;
pub const STAT_TLSTM_SNMPTLSTMSESSIONUNKNOWNSERVERCERTIFICATE: u32 = 54;
pub const STAT_TLSTM_SNMPTLSTMSESSIONINVALIDSERVERCERTIFICATES: u32 = 55;
pub const STAT_TLSTM_SNMPTLSTMSESSIONINVALIDCACHES: u32 = 56;
pub const STAT_TLSTM_STATS_START: u32 = 47;
pub const STAT_TLSTM_STATS_END: u32 = 56;
pub const NETSNMP_STAT_MAX_STATS: u32 = 57;
pub const MAX_STATS: u32 = 57;
pub const COMMUNITY_MAX_LEN: u32 = 256;
pub const SPRINT_MAX_LEN: u32 = 2560;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const READ: u32 = 1;
pub const WRITE: u32 = 0;
pub const RESERVE1: u32 = 0;
pub const RESERVE2: u32 = 1;
pub const ACTION: u32 = 2;
pub const COMMIT: u32 = 3;
pub const FREE: u32 = 4;
pub const UNDO: u32 = 5;
pub const FINISHED_SUCCESS: u32 = 9;
pub const FINISHED_FAILURE: u32 = 10;
pub const NETSNMP_OLDAPI_RONLY: u32 = 1;
pub const NETSNMP_OLDAPI_RWRITE: u32 = 2;
pub const NETSNMP_OLDAPI_NOACCESS: u32 = 0;
pub const RONLY: u32 = 1;
pub const RWRITE: u32 = 2;
pub const NOACCESS: u32 = 0;
pub const ASN_IPADDRESS: u8 = ASN_APPLICATION | 0;
pub const ASN_COUNTER: u8 = ASN_APPLICATION | 1;
pub const ASN_GAUGE: u8 = ASN_APPLICATION | 2;
pub const ASN_UNSIGNED: u8 = ASN_APPLICATION | 2;
pub const ASN_TIMETICKS: u8 = ASN_APPLICATION | 3;
pub const ASN_OPAQUE: u8 = ASN_APPLICATION | 4;
pub const ASN_NSAP: u8 = ASN_APPLICATION | 5;
pub const ASN_COUNTER64: u8 = ASN_APPLICATION | 6;
pub const ASN_UINTEGER: u8 = ASN_APPLICATION | 7;
pub const ASN_FLOAT: u8 = ASN_APPLICATION | 8;
pub const ASN_DOUBLE: u8 = ASN_APPLICATION | 9;
pub const ASN_INTEGER64: u8 = ASN_APPLICATION | 11;
pub const FIRST_PASS: u32 = 1;
pub const LAST_PASS: u32 = 2;
pub const SNMP_PORT: u32 = 161;
pub const SNMP_TRAP_PORT: u32 = 162;
pub const SNMP_MAX_LEN: u32 = 1500;
pub const SNMP_MIN_MAX_LEN: u32 = 484;
pub const SNMP_MAX_PACKET_LEN: u32 = 2147483647;
pub const SNMP_VERSION_1: u32 = 0;
pub const SNMP_VERSION_2c: u32 = 1;
pub const SNMP_VERSION_2u: u32 = 2;
pub const SNMP_VERSION_3: u32 = 3;
pub const SNMP_VERSION_sec: u32 = 128;
pub const SNMP_VERSION_2p: u32 = 129;
pub const SNMP_VERSION_2star: u32 = 130;
pub const SNMP_MSG_GET: i32 = 160;
pub const SNMP_MSG_GETNEXT: i32 = 161;
pub const SNMP_MSG_RESPONSE: i32 = 162;
pub const SNMP_MSG_SET: i32 = 163;
pub const SNMP_MSG_TRAP: i32 = 164;
pub const SNMP_MSG_GETBULK: i32 = 165;
pub const SNMP_MSG_INFORM: i32 = 166;
pub const SNMP_MSG_TRAP2: i32 = 167;
pub const SNMP_MSG_REPORT: i32 = 168;
pub const SNMP_MSG_INTERNAL_SET_BEGIN: i32 = -1;
pub const SNMP_MSG_INTERNAL_SET_RESERVE1: u32 = 0;
pub const SNMP_MSG_INTERNAL_SET_RESERVE2: u32 = 1;
pub const SNMP_MSG_INTERNAL_SET_ACTION: u32 = 2;
pub const SNMP_MSG_INTERNAL_SET_COMMIT: u32 = 3;
pub const SNMP_MSG_INTERNAL_SET_FREE: u32 = 4;
pub const SNMP_MSG_INTERNAL_SET_UNDO: u32 = 5;
pub const SNMP_MSG_INTERNAL_SET_MAX: u32 = 6;
pub const SNMP_MSG_INTERNAL_CHECK_VALUE: u32 = 17;
pub const SNMP_MSG_INTERNAL_ROW_CREATE: u32 = 18;
pub const SNMP_MSG_INTERNAL_UNDO_SETUP: u32 = 19;
pub const SNMP_MSG_INTERNAL_SET_VALUE: u32 = 20;
pub const SNMP_MSG_INTERNAL_CHECK_CONSISTENCY: u32 = 21;
pub const SNMP_MSG_INTERNAL_UNDO_SET: u32 = 22;
pub const SNMP_MSG_INTERNAL_COMMIT: u32 = 23;
pub const SNMP_MSG_INTERNAL_UNDO_COMMIT: u32 = 24;
pub const SNMP_MSG_INTERNAL_IRREVERSIBLE_COMMIT: u32 = 25;
pub const SNMP_MSG_INTERNAL_UNDO_CLEANUP: u32 = 26;
pub const SNMP_MSG_INTERNAL_PRE_REQUEST: u32 = 128;
pub const SNMP_MSG_INTERNAL_OBJECT_LOOKUP: u32 = 129;
pub const SNMP_MSG_INTERNAL_POST_REQUEST: u32 = 130;
pub const SNMP_MSG_INTERNAL_GET_STASH: u32 = 131;
pub const SNMP_ERR_NOERROR: u32 = 0;
pub const SNMP_ERR_TOOBIG: u32 = 1;
pub const SNMP_ERR_NOSUCHNAME: u32 = 2;
pub const SNMP_ERR_BADVALUE: u32 = 3;
pub const SNMP_ERR_READONLY: u32 = 4;
pub const SNMP_ERR_GENERR: u32 = 5;
pub const SNMP_ERR_NOACCESS: u32 = 6;
pub const SNMP_ERR_WRONGTYPE: u32 = 7;
pub const SNMP_ERR_WRONGLENGTH: u32 = 8;
pub const SNMP_ERR_WRONGENCODING: u32 = 9;
pub const SNMP_ERR_WRONGVALUE: u32 = 10;
pub const SNMP_ERR_NOCREATION: u32 = 11;
pub const SNMP_ERR_INCONSISTENTVALUE: u32 = 12;
pub const SNMP_ERR_RESOURCEUNAVAILABLE: u32 = 13;
pub const SNMP_ERR_COMMITFAILED: u32 = 14;
pub const SNMP_ERR_UNDOFAILED: u32 = 15;
pub const SNMP_ERR_AUTHORIZATIONERROR: u32 = 16;
pub const SNMP_ERR_NOTWRITABLE: u32 = 17;
pub const SNMP_ERR_INCONSISTENTNAME: u32 = 18;
pub const MAX_SNMP_ERR: u32 = 18;
pub const SNMP_TRAP_COLDSTART: u32 = 0;
pub const SNMP_TRAP_WARMSTART: u32 = 1;
pub const SNMP_TRAP_LINKDOWN: u32 = 2;
pub const SNMP_TRAP_LINKUP: u32 = 3;
pub const SNMP_TRAP_AUTHFAIL: u32 = 4;
pub const SNMP_TRAP_EGPNEIGHBORLOSS: u32 = 5;
pub const SNMP_TRAP_ENTERPRISESPECIFIC: u32 = 6;
pub const SNMP_ROW_NONEXISTENT: u32 = 0;
pub const SNMP_ROW_ACTIVE: u32 = 1;
pub const SNMP_ROW_NOTINSERVICE: u32 = 2;
pub const SNMP_ROW_NOTREADY: u32 = 3;
pub const SNMP_ROW_CREATEANDGO: u32 = 4;
pub const SNMP_ROW_CREATEANDWAIT: u32 = 5;
pub const SNMP_ROW_DESTROY: u32 = 6;
pub const SNMP_STORAGE_NONE: u32 = 0;
pub const SNMP_STORAGE_OTHER: u32 = 1;
pub const SNMP_STORAGE_VOLATILE: u32 = 2;
pub const SNMP_STORAGE_NONVOLATILE: u32 = 3;
pub const SNMP_STORAGE_PERMANENT: u32 = 4;
pub const SNMP_STORAGE_READONLY: u32 = 5;
pub const SNMP_MP_MODEL_SNMPv1: u32 = 0;
pub const SNMP_MP_MODEL_SNMPv2c: u32 = 1;
pub const SNMP_MP_MODEL_SNMPv2u: u32 = 2;
pub const SNMP_MP_MODEL_SNMPv3: u32 = 3;
pub const SNMP_MP_MODEL_SNMPv2p: u32 = 256;
pub const SNMP_SEC_MODEL_ANY: u32 = 0;
pub const SNMP_SEC_MODEL_SNMPv1: u32 = 1;
pub const SNMP_SEC_MODEL_SNMPv2c: u32 = 2;
pub const SNMP_SEC_MODEL_USM: u32 = 3;
pub const SNMP_SEC_MODEL_TSM: u32 = 4;
pub const SNMP_SEC_MODEL_SNMPv2p: u32 = 256;
pub const SNMP_SEC_LEVEL_NOAUTH: u32 = 1;
pub const SNMP_SEC_LEVEL_AUTHNOPRIV: u32 = 2;
pub const SNMP_SEC_LEVEL_AUTHPRIV: u32 = 3;
pub const SNMP_MSG_FLAG_AUTH_BIT: u32 = 1;
pub const SNMP_MSG_FLAG_PRIV_BIT: u32 = 2;
pub const SNMP_MSG_FLAG_RPRT_BIT: u32 = 4;
pub const UCD_MSG_FLAG_RESPONSE_PDU: u32 = 256;
pub const UCD_MSG_FLAG_EXPECT_RESPONSE: u32 = 512;
pub const UCD_MSG_FLAG_FORCE_PDU_COPY: u32 = 1024;
pub const UCD_MSG_FLAG_ALWAYS_IN_VIEW: u32 = 2048;
pub const UCD_MSG_FLAG_PDU_TIMEOUT: u32 = 4096;
pub const UCD_MSG_FLAG_ONE_PASS_ONLY: u32 = 8192;
pub const UCD_MSG_FLAG_TUNNELED: u32 = 16384;
pub const UCD_MSG_FLAG_FORWARD_ENCODE: u32 = 32768;
pub const UCD_MSG_FLAG_BULK_TOOBIG: u32 = 65536;
pub const SNMP_VIEW_INCLUDED: u32 = 1;
pub const SNMP_VIEW_EXCLUDED: u32 = 2;
pub const SNMPADMINLENGTH: u32 = 255;
pub const TV_TRUE: u32 = 1;
pub const TV_FALSE: u32 = 2;
pub const RS_NONEXISTENT: u32 = 0;
pub const RS_ACTIVE: u32 = 1;
pub const RS_NOTINSERVICE: u32 = 2;
pub const RS_NOTREADY: u32 = 3;
pub const RS_CREATEANDGO: u32 = 4;
pub const RS_CREATEANDWAIT: u32 = 5;
pub const RS_DESTROY: u32 = 6;
pub const ST_NONE: u32 = 0;
pub const ST_OTHER: u32 = 1;
pub const ST_VOLATILE: u32 = 2;
pub const ST_NONVOLATILE: u32 = 3;
pub const ST_PERMANENT: u32 = 4;
pub const ST_READONLY: u32 = 5;
pub const _GETOPT_H_: u32 = 1;
pub const _GETOPT_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const _GETOPT_EXT_H: u32 = 1;
pub const no_argument: u32 = 0;
pub const required_argument: u32 = 1;
pub const optional_argument: u32 = 2;
pub const SNMP_MAXPATH: u32 = 1024;
pub const SNMP_MAXBUF: u32 = 4096;
pub const SNMP_MAXBUF_MEDIUM: u32 = 1024;
pub const SNMP_MAXBUF_SMALL: u32 = 512;
pub const SNMP_MAXBUF_MESSAGE: u32 = 1500;
pub const SNMP_MAXOID: u32 = 64;
pub const SNMP_MAX_CMDLINE_OIDS: u32 = 128;
pub const SNMP_FILEMODE_CLOSED: u32 = 384;
pub const SNMP_FILEMODE_OPEN: u32 = 420;
pub const ENGINETIME_MAX: u32 = 2147483647;
pub const ENGINEBOOT_MAX: u32 = 2147483647;
pub const I64CHARSZ: u32 = 21;
pub const MT_LIBRARY_ID: u32 = 0;
pub const MT_APPLICATION_ID: u32 = 1;
pub const MT_TOKEN_ID: u32 = 2;
pub const MT_MAX_IDS: u32 = 3;
pub const MT_MAX_SUBIDS: u32 = 10;
pub const MT_LIB_NONE: u32 = 0;
pub const MT_LIB_SESSION: u32 = 1;
pub const MT_LIB_REQUESTID: u32 = 2;
pub const MT_LIB_MESSAGEID: u32 = 3;
pub const MT_LIB_SESSIONID: u32 = 4;
pub const MT_LIB_TRANSID: u32 = 5;
pub const MT_LIB_MAXIMUM: u32 = 6;
pub const SA_REPEAT: u32 = 1;
pub const SA_FIRED: u32 = 16;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const CONTAINER_KEY_ALLOW_DUPLICATES: u32 = 1;
pub const CONTAINER_KEY_UNSORTED: u32 = 2;
pub const CONTAINER_FLAG_INTERNAL_1: u32 = 2147483648;
pub const NETSNMP_FUNC_FMT: &'static [u8; 7usize] = b" %s()\n\0";
pub const STRINGMAX: u32 = 1024;
pub const NORMAL_CONFIG: u32 = 0;
pub const PREMIB_CONFIG: u32 = 1;
pub const EITHER_CONFIG: u32 = 2;
pub const NETSNMP_APPLICATION_CONFIG_TYPE: &'static [u8; 8usize] = b"snmpapp\0";
pub const NETSNMP_DS_MAX_IDS: u32 = 3;
pub const NETSNMP_DS_MAX_SUBIDS: u32 = 48;
pub const NETSNMP_DS_LIBRARY_ID: u32 = 0;
pub const NETSNMP_DS_APPLICATION_ID: u32 = 1;
pub const NETSNMP_DS_TOKEN_ID: u32 = 2;
pub const NETSNMP_DS_LIB_MIB_ERRORS: u32 = 0;
pub const NETSNMP_DS_LIB_SAVE_MIB_DESCRS: u32 = 1;
pub const NETSNMP_DS_LIB_MIB_COMMENT_TERM: u32 = 2;
pub const NETSNMP_DS_LIB_MIB_PARSE_LABEL: u32 = 3;
pub const NETSNMP_DS_LIB_DUMP_PACKET: u32 = 4;
pub const NETSNMP_DS_LIB_LOG_TIMESTAMP: u32 = 5;
pub const NETSNMP_DS_LIB_DONT_READ_CONFIGS: u32 = 6;
pub const NETSNMP_DS_LIB_DISABLE_CONFIG_LOAD: u32 = 6;
pub const NETSNMP_DS_LIB_MIB_REPLACE: u32 = 7;
pub const NETSNMP_DS_LIB_PRINT_NUMERIC_ENUM: u32 = 8;
pub const NETSNMP_DS_LIB_PRINT_NUMERIC_OIDS: u32 = 9;
pub const NETSNMP_DS_LIB_DONT_BREAKDOWN_OIDS: u32 = 10;
pub const NETSNMP_DS_LIB_ALARM_DONT_USE_SIG: u32 = 11;
pub const NETSNMP_DS_LIB_PRINT_FULL_OID: u32 = 12;
pub const NETSNMP_DS_LIB_QUICK_PRINT: u32 = 13;
pub const NETSNMP_DS_LIB_RANDOM_ACCESS: u32 = 14;
pub const NETSNMP_DS_LIB_REGEX_ACCESS: u32 = 15;
pub const NETSNMP_DS_LIB_DONT_CHECK_RANGE: u32 = 16;
pub const NETSNMP_DS_LIB_NO_TOKEN_WARNINGS: u32 = 17;
pub const NETSNMP_DS_LIB_NUMERIC_TIMETICKS: u32 = 18;
pub const NETSNMP_DS_LIB_ESCAPE_QUOTES: u32 = 19;
pub const NETSNMP_DS_LIB_REVERSE_ENCODE: u32 = 20;
pub const NETSNMP_DS_LIB_PRINT_BARE_VALUE: u32 = 21;
pub const NETSNMP_DS_LIB_EXTENDED_INDEX: u32 = 22;
pub const NETSNMP_DS_LIB_PRINT_HEX_TEXT: u32 = 23;
pub const NETSNMP_DS_LIB_PRINT_UCD_STYLE_OID: u32 = 24;
pub const NETSNMP_DS_LIB_READ_UCD_STYLE_OID: u32 = 25;
pub const NETSNMP_DS_LIB_HAVE_READ_PREMIB_CONFIG: u32 = 26;
pub const NETSNMP_DS_LIB_HAVE_READ_CONFIG: u32 = 27;
pub const NETSNMP_DS_LIB_QUICKE_PRINT: u32 = 28;
pub const NETSNMP_DS_LIB_DONT_PRINT_UNITS: u32 = 29;
pub const NETSNMP_DS_LIB_NO_DISPLAY_HINT: u32 = 30;
pub const NETSNMP_DS_LIB_16BIT_IDS: u32 = 31;
pub const NETSNMP_DS_LIB_DONT_PERSIST_STATE: u32 = 32;
pub const NETSNMP_DS_LIB_2DIGIT_HEX_OUTPUT: u32 = 33;
pub const NETSNMP_DS_LIB_IGNORE_NO_COMMUNITY: u32 = 34;
pub const NETSNMP_DS_LIB_DISABLE_PERSISTENT_LOAD: u32 = 35;
pub const NETSNMP_DS_LIB_DISABLE_PERSISTENT_SAVE: u32 = 36;
pub const NETSNMP_DS_LIB_APPEND_LOGFILES: u32 = 37;
pub const NETSNMP_DS_LIB_NO_DISCOVERY: u32 = 38;
pub const NETSNMP_DS_LIB_TSM_USE_PREFIX: u32 = 39;
pub const NETSNMP_DS_LIB_DONT_LOAD_HOST_FILES: u32 = 40;
pub const NETSNMP_DS_LIB_DNSSEC_WARN_ONLY: u32 = 41;
pub const NETSNMP_DS_LIB_CLIENT_ADDR_USES_PORT: u32 = 42;
pub const NETSNMP_DS_LIB_DISABLE_V1: u32 = 43;
pub const NETSNMP_DS_LIB_DISABLE_V2c: u32 = 44;
pub const NETSNMP_DS_LIB_DISABLE_V3: u32 = 45;
pub const NETSNMP_DS_LIB_FILTER_SOURCE: u32 = 46;
pub const NETSNMP_DS_LIB_MAX_BOOL_ID: u32 = 48;
pub const NETSNMP_DS_LIB_MIB_WARNINGS: u32 = 0;
pub const NETSNMP_DS_LIB_SECLEVEL: u32 = 1;
pub const NETSNMP_DS_LIB_SNMPVERSION: u32 = 2;
pub const NETSNMP_DS_LIB_DEFAULT_PORT: u32 = 3;
pub const NETSNMP_DS_LIB_OID_OUTPUT_FORMAT: u32 = 4;
pub const NETSNMP_DS_LIB_PRINT_SUFFIX_ONLY: u32 = 4;
pub const NETSNMP_DS_LIB_STRING_OUTPUT_FORMAT: u32 = 5;
pub const NETSNMP_DS_LIB_HEX_OUTPUT_LENGTH: u32 = 6;
pub const NETSNMP_DS_LIB_SERVERSENDBUF: u32 = 7;
pub const NETSNMP_DS_LIB_SERVERRECVBUF: u32 = 8;
pub const NETSNMP_DS_LIB_CLIENTSENDBUF: u32 = 9;
pub const NETSNMP_DS_LIB_CLIENTRECVBUF: u32 = 10;
pub const NETSNMP_DS_SSHDOMAIN_SOCK_PERM: u32 = 11;
pub const NETSNMP_DS_SSHDOMAIN_DIR_PERM: u32 = 12;
pub const NETSNMP_DS_SSHDOMAIN_SOCK_USER: u32 = 12;
pub const NETSNMP_DS_SSHDOMAIN_SOCK_GROUP: u32 = 13;
pub const NETSNMP_DS_LIB_TIMEOUT: u32 = 14;
pub const NETSNMP_DS_LIB_RETRIES: u32 = 15;
pub const NETSNMP_DS_LIB_MSG_SEND_MAX: u32 = 16;
pub const NETSNMP_DS_LIB_FILTER_TYPE: u32 = 17;
pub const NETSNMP_DS_LIB_MAX_INT_ID: u32 = 48;
pub const NETSNMP_DS_SNMP_VERSION_1: u32 = 128;
pub const NETSNMP_DS_SNMP_VERSION_2c: u32 = 1;
pub const NETSNMP_DS_SNMP_VERSION_3: u32 = 3;
pub const NETSNMP_DS_LIB_SECNAME: u32 = 0;
pub const NETSNMP_DS_LIB_CONTEXT: u32 = 1;
pub const NETSNMP_DS_LIB_PASSPHRASE: u32 = 2;
pub const NETSNMP_DS_LIB_AUTHPASSPHRASE: u32 = 3;
pub const NETSNMP_DS_LIB_PRIVPASSPHRASE: u32 = 4;
pub const NETSNMP_DS_LIB_OPTIONALCONFIG: u32 = 5;
pub const NETSNMP_DS_LIB_APPTYPE: u32 = 6;
pub const NETSNMP_DS_LIB_COMMUNITY: u32 = 7;
pub const NETSNMP_DS_LIB_PERSISTENT_DIR: u32 = 8;
pub const NETSNMP_DS_LIB_CONFIGURATION_DIR: u32 = 9;
pub const NETSNMP_DS_LIB_SECMODEL: u32 = 10;
pub const NETSNMP_DS_LIB_MIBDIRS: u32 = 11;
pub const NETSNMP_DS_LIB_OIDSUFFIX: u32 = 12;
pub const NETSNMP_DS_LIB_OIDPREFIX: u32 = 13;
pub const NETSNMP_DS_LIB_CLIENT_ADDR: u32 = 14;
pub const NETSNMP_DS_LIB_TEMP_FILE_PATTERN: u32 = 15;
pub const NETSNMP_DS_LIB_AUTHMASTERKEY: u32 = 16;
pub const NETSNMP_DS_LIB_PRIVMASTERKEY: u32 = 17;
pub const NETSNMP_DS_LIB_AUTHLOCALIZEDKEY: u32 = 18;
pub const NETSNMP_DS_LIB_PRIVLOCALIZEDKEY: u32 = 19;
pub const NETSNMP_DS_LIB_APPTYPES: u32 = 20;
pub const NETSNMP_DS_LIB_KSM_KEYTAB: u32 = 21;
pub const NETSNMP_DS_LIB_KSM_SERVICE_NAME: u32 = 22;
pub const NETSNMP_DS_LIB_X509_CLIENT_PUB: u32 = 23;
pub const NETSNMP_DS_LIB_X509_SERVER_PUB: u32 = 24;
pub const NETSNMP_DS_LIB_SSHTOSNMP_SOCKET: u32 = 25;
pub const NETSNMP_DS_LIB_CERT_EXTRA_SUBDIR: u32 = 26;
pub const NETSNMP_DS_LIB_HOSTNAME: u32 = 27;
pub const NETSNMP_DS_LIB_X509_CRL_FILE: u32 = 28;
pub const NETSNMP_DS_LIB_TLS_ALGORITMS: u32 = 29;
pub const NETSNMP_DS_LIB_TLS_LOCAL_CERT: u32 = 30;
pub const NETSNMP_DS_LIB_TLS_PEER_CERT: u32 = 31;
pub const NETSNMP_DS_LIB_SSH_USERNAME: u32 = 32;
pub const NETSNMP_DS_LIB_SSH_PUBKEY: u32 = 33;
pub const NETSNMP_DS_LIB_SSH_PRIVKEY: u32 = 34;
pub const NETSNMP_DS_LIB_OUTPUT_PRECISION: u32 = 35;
pub const NETSNMP_DS_LIB_MAX_STR_ID: u32 = 48;
pub const NETSNMP_PARSE_ARGS_NOLOGGING: u32 = 1;
pub const NETSNMP_PARSE_ARGS_NOZERO: u32 = 2;
pub const NETSNMP_PARSE_ARGS_SUCCESS: u32 = 0;
pub const NETSNMP_PARSE_ARGS_SUCCESS_EXIT: i32 = -2;
pub const NETSNMP_PARSE_ARGS_ERROR_USAGE: i32 = -1;
pub const NETSNMP_PARSE_ARGS_ERROR: i32 = -3;
pub const SE_MAX_IDS: u32 = 5;
pub const SE_MAX_SUBIDS: u32 = 32;
pub const SE_LIBRARY_ID: u32 = 0;
pub const SE_MIB_ID: u32 = 1;
pub const SE_APPLICATION_ID: u32 = 2;
pub const SE_ASSIGNED_ID: u32 = 3;
pub const SE_OK: u32 = 0;
pub const SE_NOMEM: u32 = 1;
pub const SE_ALREADY_THERE: u32 = 2;
pub const SE_DNE: i32 = -2;
pub const VACM_SUCCESS: u32 = 0;
pub const VACM_NOSECNAME: u32 = 1;
pub const VACM_NOGROUP: u32 = 2;
pub const VACM_NOACCESS: u32 = 3;
pub const VACM_NOVIEW: u32 = 4;
pub const VACM_NOTINVIEW: u32 = 5;
pub const VACM_NOSUCHCONTEXT: u32 = 6;
pub const VACM_SUBTREE_UNKNOWN: u32 = 7;
pub const SECURITYMODEL: u32 = 1;
pub const SECURITYNAME: u32 = 2;
pub const SECURITYGROUP: u32 = 3;
pub const SECURITYSTORAGE: u32 = 4;
pub const SECURITYSTATUS: u32 = 5;
pub const ACCESSPREFIX: u32 = 1;
pub const ACCESSMODEL: u32 = 2;
pub const ACCESSLEVEL: u32 = 3;
pub const ACCESSMATCH: u32 = 4;
pub const ACCESSREAD: u32 = 5;
pub const ACCESSWRITE: u32 = 6;
pub const ACCESSNOTIFY: u32 = 7;
pub const ACCESSSTORAGE: u32 = 8;
pub const ACCESSSTATUS: u32 = 9;
pub const VACMVIEWSPINLOCK: u32 = 1;
pub const VIEWNAME: u32 = 2;
pub const VIEWSUBTREE: u32 = 3;
pub const VIEWMASK: u32 = 4;
pub const VIEWTYPE: u32 = 5;
pub const VIEWSTORAGE: u32 = 6;
pub const VACMVIEWSTATUS: u32 = 7;
pub const VACM_MAX_STRING: u32 = 32;
pub const VACMSTRINGLEN: u32 = 34;
pub const CONTEXT_MATCH_EXACT: u32 = 1;
pub const CONTEXT_MATCH_PREFIX: u32 = 2;
pub const VACM_VIEW_READ: u32 = 0;
pub const VACM_VIEW_WRITE: u32 = 1;
pub const VACM_VIEW_NOTIFY: u32 = 2;
pub const VACM_VIEW_LOG: u32 = 3;
pub const VACM_VIEW_EXECUTE: u32 = 4;
pub const VACM_VIEW_NET: u32 = 5;
pub const VACM_VIEW_READ_BIT: u32 = 1;
pub const VACM_VIEW_WRITE_BIT: u32 = 2;
pub const VACM_VIEW_NOTIFY_BIT: u32 = 4;
pub const VACM_VIEW_LOG_BIT: u32 = 8;
pub const VACM_VIEW_EXECUTE_BIT: u32 = 16;
pub const VACM_VIEW_NET_BIT: u32 = 32;
pub const VACM_VIEW_NO_BITS: u32 = 0;
pub const VACM_MAX_VIEWS: u32 = 8;
pub const VACM_VIEW_ENUM_NAME: &'static [u8; 10usize] = b"vacmviews\0";
pub const VACM_MODE_FIND: u32 = 0;
pub const VACM_MODE_IGNORE_MASK: u32 = 1;
pub const VACM_MODE_CHECK_SUBTREE: u32 = 2;
pub const MAX_ENGINEID_LENGTH: u32 = 32;
pub const ENGINEID_TYPE_IPV4: u32 = 1;
pub const ENGINEID_TYPE_IPV6: u32 = 2;
pub const ENGINEID_TYPE_MACADDR: u32 = 3;
pub const ENGINEID_TYPE_TEXT: u32 = 4;
pub const ENGINEID_TYPE_EXACT: u32 = 5;
pub const ENGINEID_TYPE_NETSNMP_RND: u32 = 128;
pub const DEFAULT_NIC: &'static [u8; 5usize] = b"eth0\0";
pub const NETSNMP_USMAUTH_NOAUTH: u32 = 1;
pub const NETSNMP_USMAUTH_HMACMD5: u32 = 2;
pub const NETSNMP_USMAUTH_HMACSHA1: u32 = 3;
pub const NETSNMP_USMAUTH_HMACSHA: u32 = 3;
pub const NETSNMP_USMAUTH_HMAC128SHA224: u32 = 4;
pub const NETSNMP_USMAUTH_HMAC192SHA256: u32 = 5;
pub const NETSNMP_USMAUTH_HMAC256SHA384: u32 = 6;
pub const NETSNMP_USMAUTH_HMAC384SHA512: u32 = 7;
pub const USM_AUTH_PROTO_NOAUTH_LEN: u32 = 10;
pub const USM_AUTH_PROTO_MD5_LEN: u32 = 10;
pub const USM_AUTH_PROTO_SHA_LEN: u32 = 10;
pub const USM_PRIV_PROTO_NOPRIV_LEN: u32 = 10;
pub const USM_PRIV_PROTO_DES_LEN: u32 = 10;
pub const USM_PRIV_PROTO_AES_LEN: u32 = 10;
pub const USM_PRIV_PROTO_AES128_LEN: u32 = 10;
pub const USM_LENGTH_EXPANDED_PASSPHRASE: u32 = 1048576;
pub const USM_LENGTH_KU_HASHBLOCK: u32 = 64;
pub const USM_LENGTH_P_MIN: u32 = 8;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const CHAR_WIDTH: u32 = 8;
pub const SCHAR_WIDTH: u32 = 8;
pub const UCHAR_WIDTH: u32 = 8;
pub const SHRT_WIDTH: u32 = 16;
pub const USHRT_WIDTH: u32 = 16;
pub const INT_WIDTH: u32 = 32;
pub const UINT_WIDTH: u32 = 32;
pub const LONG_WIDTH: u32 = 64;
pub const ULONG_WIDTH: u32 = 64;
pub const LLONG_WIDTH: u32 = 64;
pub const ULLONG_WIDTH: u32 = 64;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_FD_SETSIZE: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_QLIMIT: u32 = 1;
pub const _POSIX_HIWAT: u32 = 512;
pub const _POSIX_UIO_MAXIOV: u32 = 16;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _XOPEN_LIM_H: u32 = 1;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const IOV_MAX: u32 = 1024;
pub const NL_ARGMAX: u32 = 4096;
pub const NL_LANGMAX: u32 = 2048;
pub const NZERO: u32 = 20;
pub const WORD_BIT: u32 = 32;
pub const LONG_BIT: u32 = 64;
pub const OPENSSL_VERSION_NUMBER: u32 = 269488239;
pub const OPENSSL_VERSION_TEXT: &'static [u8; 28usize] = b"OpenSSL 1.1.1f  31 Mar 2020\0";
pub const SHLIB_VERSION_HISTORY: &'static [u8; 1usize] = b"\0";
pub const SHLIB_VERSION_NUMBER: &'static [u8; 4usize] = b"1.1\0";
pub const OPENSSL_MIN_API: u32 = 0;
pub const OPENSSL_API_COMPAT: u32 = 0;
pub const SNMP_TRANS_AUTHLEN_HMACMD5: u32 = 128;
pub const SNMP_TRANS_AUTHLEN_HMACSHA1: u32 = 160;
pub const SNMP_TRANS_AUTHLEN_HMAC128SHA224: u32 = 224;
pub const SNMP_TRANS_AUTHLEN_HMAC192SHA256: u32 = 256;
pub const SNMP_TRANS_AUTHLEN_HMAC256SHA384: u32 = 384;
pub const SNMP_TRANS_AUTHLEN_HMAC384SHA512: u32 = 512;
pub const SNMP_TRANS_AUTHLEN_HMAC96: u32 = 96;
pub const SNMP_TRANS_PRIVLEN_1DES: u32 = 64;
pub const SNMP_TRANS_PRIVLEN_1DES_IV: u32 = 64;
pub const SNMP_TRANS_PRIVLEN_AES: u32 = 128;
pub const SNMP_TRANS_PRIVLEN_AES_IV: u32 = 128;
pub const SNMP_TRANS_PRIVLEN_AES128: u32 = 128;
pub const SNMP_TRANS_PRIVLEN_AES128_IV: u32 = 128;
pub const SNMP_TRANS_PRIVLEN_AES192: u32 = 192;
pub const SNMP_TRANS_PRIVLEN_AES192_IV: u32 = 128;
pub const SNMP_TRANS_PRIVLEN_AES256: u32 = 256;
pub const SNMP_TRANS_PRIVLEN_AES256_IV: u32 = 128;
pub const LCD_TIME_SYNC_OPT: u32 = 1;
pub const ETIMELIST_SIZE: u32 = 23;
pub const NETSNMP_SEC_MODEL_KSM: u32 = 2066432;
pub const NETSNMP_KSM_SECURITY_MODEL: u32 = 2066432;
pub const NETSNMP_TSM_SECURITY_MODEL: u32 = 4;
pub const WILDCARDSTRING: &'static [u8; 2usize] = b"*\0";
pub const USM_MAX_ID_LENGTH: u32 = 1024;
pub const USM_MAX_SALT_LENGTH: u32 = 128;
pub const USM_DES_SALT_LENGTH: u32 = 64;
pub const USM_AES_SALT_LENGTH: u32 = 128;
pub const USM_MAX_KEYEDHASH_LENGTH: u32 = 128;
pub const USM_TIME_WINDOW: u32 = 150;
pub const USM_MD5_AND_SHA_AUTH_LEN: u32 = 12;
pub const USM_HMAC128SHA224_AUTH_LEN: u32 = 16;
pub const USM_HMAC192SHA256_AUTH_LEN: u32 = 24;
pub const USM_HMAC256SHA384_AUTH_LEN: u32 = 32;
pub const USM_HMAC384SHA512_AUTH_LEN: u32 = 48;
pub const USM_MAX_AUTHSIZE: u32 = 48;
pub const USM_SEC_MODEL_NUMBER: u32 = 3;
pub const USMUSER_FLAG_KEEP_MASTER_KEY: u32 = 1;
pub const USM_CREATE_USER_AUTH_DFLT: i32 = -1;
pub const USM_CREATE_USER_AUTH_MD5: u32 = 2;
pub const USM_CREATE_USER_AUTH_SHA1: u32 = 3;
pub const USM_CREATE_USER_AUTH_SHA: u32 = 3;
pub const USM_CREATE_USER_AUTH_SHA512: u32 = 7;
pub const USM_CREATE_USER_AUTH_SHA384: u32 = 6;
pub const USM_CREATE_USER_AUTH_SHA256: u32 = 5;
pub const USM_CREATE_USER_AUTH_SHA224: u32 = 4;
pub const USM_DES_FLAG_3: u32 = 256;
pub const USM_AES_FLAG_192: u32 = 256;
pub const USM_AES_FLAG_256: u32 = 512;
pub const USM_AES_REEDER_FLAG: u32 = 196608;
pub const USM_AES_FLAG_CISCO: u32 = 1048576;
pub const USM_PRIV_MASK_ALG: u32 = 255;
pub const USM_PRIV_MASK_VARIANT: u32 = 65280;
pub const USM_CREATE_USER_PRIV_DFLT: i32 = -1;
pub const USM_CREATE_USER_PRIV_NONE: u32 = 0;
pub const USM_CREATE_USER_PRIV_DES: u32 = 1;
pub const USM_CREATE_USER_PRIV_3DES: u32 = 257;
pub const USM_CREATE_USER_PRIV_AES: u32 = 2;
pub const USM_CREATE_USER_PRIV_AES192: u32 = 258;
pub const USM_CREATE_USER_PRIV_AES256: u32 = 514;
pub const USM_CREATE_USER_PRIV_AES192_CISCO: u32 = 1245442;
pub const USM_CREATE_USER_PRIV_AES256_CISCO: u32 = 1245698;
pub type size_t = usize;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
impl Default for __mbstate_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos64_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
impl Default for _IO_FILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    assert_eq!(
        ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
        32usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).read as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).write as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).seek as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).close as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(close)
        )
    );
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = __fpos_t;
pub type fpos64_t = __fpos64_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat2(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgets_unlocked(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fputs_unlocked(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko64(
        __stream: *mut FILE,
        __off: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello64(__stream: *mut FILE) -> __off64_t;
}
extern "C" {
    pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos64(__stream: *mut FILE, __pos: *const fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut _sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut _sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obstack {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obstack_printf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obstack_vprintf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_minuteswest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_dsttime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
extern "C" {
    pub fn gettimeofday(
        __tv: *mut timeval,
        __tz: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ::std::os::raw::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = u32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub use self::__itimer_which as __itimer_which_t;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimesat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timex {
    pub modes: ::std::os::raw::c_uint,
    pub offset: __syscall_slong_t,
    pub freq: __syscall_slong_t,
    pub maxerror: __syscall_slong_t,
    pub esterror: __syscall_slong_t,
    pub status: ::std::os::raw::c_int,
    pub constant: __syscall_slong_t,
    pub precision: __syscall_slong_t,
    pub tolerance: __syscall_slong_t,
    pub time: timeval,
    pub tick: __syscall_slong_t,
    pub ppsfreq: __syscall_slong_t,
    pub jitter: __syscall_slong_t,
    pub shift: ::std::os::raw::c_int,
    pub stabil: __syscall_slong_t,
    pub jitcnt: __syscall_slong_t,
    pub calcnt: __syscall_slong_t,
    pub errcnt: __syscall_slong_t,
    pub stbcnt: __syscall_slong_t,
    pub tai: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize], u8>,
}
#[test]
fn bindgen_test_layout_timex() {
    assert_eq!(
        ::std::mem::size_of::<timex>(),
        208usize,
        concat!("Size of: ", stringify!(timex))
    );
    assert_eq!(
        ::std::mem::align_of::<timex>(),
        8usize,
        concat!("Alignment of ", stringify!(timex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).modes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(modes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).freq as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).maxerror as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(maxerror)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).esterror as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(esterror)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).status as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).constant as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(constant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).precision as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(precision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).tolerance as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(tolerance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).time as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).tick as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(tick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).ppsfreq as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(ppsfreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).jitter as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(jitter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).shift as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).stabil as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(stabil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).jitcnt as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(jitcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).calcnt as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(calcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).errcnt as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(errcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).stbcnt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(stbcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).tai as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(tai)
        )
    );
}
impl Default for timex {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn clock_adjtime(__clock_id: __clockid_t, __utx: *mut timex) -> ::std::os::raw::c_int;
}
pub type clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
impl Default for tm {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
impl Default for __locale_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn strptime(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strptime_l(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
        __loc: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn getdate_r(
        __string: *const ::std::os::raw::c_char,
        __resbufp: *mut tm,
    ) -> ::std::os::raw::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type useconds_t = __useconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_slist {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
impl Default for __pthread_cond_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutexattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_condattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_attr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutex_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_cond_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlock_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlockattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrier_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrierattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_pid_t = pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
impl Default for iovec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = u32;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
impl Default for sockaddr_storage {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const MSG_OOB: _bindgen_ty_1 = 1;
pub const MSG_PEEK: _bindgen_ty_1 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_1 = 4;
pub const MSG_TRYHARD: _bindgen_ty_1 = 4;
pub const MSG_CTRUNC: _bindgen_ty_1 = 8;
pub const MSG_PROXY: _bindgen_ty_1 = 16;
pub const MSG_TRUNC: _bindgen_ty_1 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_1 = 64;
pub const MSG_EOR: _bindgen_ty_1 = 128;
pub const MSG_WAITALL: _bindgen_ty_1 = 256;
pub const MSG_FIN: _bindgen_ty_1 = 512;
pub const MSG_SYN: _bindgen_ty_1 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_1 = 2048;
pub const MSG_RST: _bindgen_ty_1 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_1 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_1 = 16384;
pub const MSG_MORE: _bindgen_ty_1 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_1 = 65536;
pub const MSG_BATCH: _bindgen_ty_1 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_1 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_1 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_1 = 1073741824;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
impl Default for msghdr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_level as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_type as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).__cmsg_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(__cmsg_data)
        )
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_2 = 1;
pub const SCM_CREDENTIALS: _bindgen_ty_2 = 2;
pub type _bindgen_ty_2 = u32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ucred {
    pub pid: pid_t,
    pub uid: uid_t,
    pub gid: gid_t,
}
#[test]
fn bindgen_test_layout_ucred() {
    assert_eq!(
        ::std::mem::size_of::<ucred>(),
        12usize,
        concat!("Size of: ", stringify!(ucred))
    );
    assert_eq!(
        ::std::mem::align_of::<ucred>(),
        4usize,
        concat!("Alignment of ", stringify!(ucred))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucred>())).pid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ucred),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucred>())).uid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ucred),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucred>())).gid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ucred),
            "::",
            stringify!(gid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_3 = 0;
pub const SHUT_WR: _bindgen_ty_3 = 1;
pub const SHUT_RDWR: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __SOCKADDR_ARG {
    pub __sockaddr__: *mut sockaddr,
    pub __sockaddr_at__: *mut sockaddr_at,
    pub __sockaddr_ax25__: *mut sockaddr_ax25,
    pub __sockaddr_dl__: *mut sockaddr_dl,
    pub __sockaddr_eon__: *mut sockaddr_eon,
    pub __sockaddr_in__: *mut sockaddr_in,
    pub __sockaddr_in6__: *mut sockaddr_in6,
    pub __sockaddr_inarp__: *mut sockaddr_inarp,
    pub __sockaddr_ipx__: *mut sockaddr_ipx,
    pub __sockaddr_iso__: *mut sockaddr_iso,
    pub __sockaddr_ns__: *mut sockaddr_ns,
    pub __sockaddr_un__: *mut sockaddr_un,
    pub __sockaddr_x25__: *mut sockaddr_x25,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___SOCKADDR_ARG() {
    assert_eq!(
        ::std::mem::size_of::<__SOCKADDR_ARG>(),
        8usize,
        concat!("Size of: ", stringify!(__SOCKADDR_ARG))
    );
    assert_eq!(
        ::std::mem::align_of::<__SOCKADDR_ARG>(),
        8usize,
        concat!("Alignment of ", stringify!(__SOCKADDR_ARG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__SOCKADDR_ARG>())).__sockaddr__ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr__)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__SOCKADDR_ARG>())).__sockaddr_at__ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_at__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__SOCKADDR_ARG>())).__sockaddr_ax25__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_ax25__)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__SOCKADDR_ARG>())).__sockaddr_dl__ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_dl__)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__SOCKADDR_ARG>())).__sockaddr_eon__ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_eon__)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__SOCKADDR_ARG>())).__sockaddr_in__ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_in__)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__SOCKADDR_ARG>())).__sockaddr_in6__ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_in6__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__SOCKADDR_ARG>())).__sockaddr_inarp__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_inarp__)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__SOCKADDR_ARG>())).__sockaddr_ipx__ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_ipx__)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__SOCKADDR_ARG>())).__sockaddr_iso__ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_iso__)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__SOCKADDR_ARG>())).__sockaddr_ns__ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_ns__)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__SOCKADDR_ARG>())).__sockaddr_un__ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_un__)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__SOCKADDR_ARG>())).__sockaddr_x25__ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_x25__)
        )
    );
}
impl Default for __SOCKADDR_ARG {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __CONST_SOCKADDR_ARG {
    pub __sockaddr__: *const sockaddr,
    pub __sockaddr_at__: *const sockaddr_at,
    pub __sockaddr_ax25__: *const sockaddr_ax25,
    pub __sockaddr_dl__: *const sockaddr_dl,
    pub __sockaddr_eon__: *const sockaddr_eon,
    pub __sockaddr_in__: *const sockaddr_in,
    pub __sockaddr_in6__: *const sockaddr_in6,
    pub __sockaddr_inarp__: *const sockaddr_inarp,
    pub __sockaddr_ipx__: *const sockaddr_ipx,
    pub __sockaddr_iso__: *const sockaddr_iso,
    pub __sockaddr_ns__: *const sockaddr_ns,
    pub __sockaddr_un__: *const sockaddr_un,
    pub __sockaddr_x25__: *const sockaddr_x25,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___CONST_SOCKADDR_ARG() {
    assert_eq!(
        ::std::mem::size_of::<__CONST_SOCKADDR_ARG>(),
        8usize,
        concat!("Size of: ", stringify!(__CONST_SOCKADDR_ARG))
    );
    assert_eq!(
        ::std::mem::align_of::<__CONST_SOCKADDR_ARG>(),
        8usize,
        concat!("Alignment of ", stringify!(__CONST_SOCKADDR_ARG))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__CONST_SOCKADDR_ARG>())).__sockaddr__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__CONST_SOCKADDR_ARG>())).__sockaddr_at__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_at__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__CONST_SOCKADDR_ARG>())).__sockaddr_ax25__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_ax25__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__CONST_SOCKADDR_ARG>())).__sockaddr_dl__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_dl__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__CONST_SOCKADDR_ARG>())).__sockaddr_eon__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_eon__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__CONST_SOCKADDR_ARG>())).__sockaddr_in__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_in__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__CONST_SOCKADDR_ARG>())).__sockaddr_in6__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_in6__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__CONST_SOCKADDR_ARG>())).__sockaddr_inarp__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_inarp__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__CONST_SOCKADDR_ARG>())).__sockaddr_ipx__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_ipx__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__CONST_SOCKADDR_ARG>())).__sockaddr_iso__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_iso__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__CONST_SOCKADDR_ARG>())).__sockaddr_ns__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_ns__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__CONST_SOCKADDR_ARG>())).__sockaddr_un__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_un__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__CONST_SOCKADDR_ARG>())).__sockaddr_x25__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_x25__)
        )
    );
}
impl Default for __CONST_SOCKADDR_ARG {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmsghdr {
    pub msg_hdr: msghdr,
    pub msg_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_mmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<mmsghdr>(),
        64usize,
        concat!("Size of: ", stringify!(mmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<mmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(mmsghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mmsghdr>())).msg_hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmsghdr),
            "::",
            stringify!(msg_hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mmsghdr>())).msg_len as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mmsghdr),
            "::",
            stringify!(msg_len)
        )
    );
}
impl Default for mmsghdr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: __CONST_SOCKADDR_ARG,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: __SOCKADDR_ARG,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: __CONST_SOCKADDR_ARG,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: __SOCKADDR_ARG,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: __CONST_SOCKADDR_ARG,
        __addr_len: socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: __SOCKADDR_ARG,
        __addr_len: *mut socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendmmsg(
        __fd: ::std::os::raw::c_int,
        __vmessages: *mut mmsghdr,
        __vlen: ::std::os::raw::c_uint,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvmmsg(
        __fd: ::std::os::raw::c_int,
        __vmessages: *mut mmsghdr,
        __vlen: ::std::os::raw::c_uint,
        __flags: ::std::os::raw::c_int,
        __tmo: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: __SOCKADDR_ARG,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept4(
        __fd: ::std::os::raw::c_int,
        __addr: __SOCKADDR_ARG,
        __addr_len: *mut socklen_t,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_dst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_opts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
impl Default for ip_opts {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_address as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_ifindex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_ifindex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_spec_dst as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: _bindgen_ty_4 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_4 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_4 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_4 = 4;
pub const IPPROTO_TCP: _bindgen_ty_4 = 6;
pub const IPPROTO_EGP: _bindgen_ty_4 = 8;
pub const IPPROTO_PUP: _bindgen_ty_4 = 12;
pub const IPPROTO_UDP: _bindgen_ty_4 = 17;
pub const IPPROTO_IDP: _bindgen_ty_4 = 22;
pub const IPPROTO_TP: _bindgen_ty_4 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_4 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_4 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_4 = 46;
pub const IPPROTO_GRE: _bindgen_ty_4 = 47;
pub const IPPROTO_ESP: _bindgen_ty_4 = 50;
pub const IPPROTO_AH: _bindgen_ty_4 = 51;
pub const IPPROTO_MTP: _bindgen_ty_4 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_4 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_4 = 98;
pub const IPPROTO_PIM: _bindgen_ty_4 = 103;
pub const IPPROTO_COMP: _bindgen_ty_4 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_4 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_4 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_4 = 137;
pub const IPPROTO_RAW: _bindgen_ty_4 = 255;
pub const IPPROTO_MAX: _bindgen_ty_4 = 256;
pub type _bindgen_ty_4 = u32;
pub const IPPROTO_HOPOPTS: _bindgen_ty_5 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_5 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_5 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_5 = 58;
pub const IPPROTO_NONE: _bindgen_ty_5 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_5 = 60;
pub const IPPROTO_MH: _bindgen_ty_5 = 135;
pub type _bindgen_ty_5 = u32;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_6 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_6 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_6 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_6 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_6 = 15;
pub const IPPORT_FTP: _bindgen_ty_6 = 21;
pub const IPPORT_TELNET: _bindgen_ty_6 = 23;
pub const IPPORT_SMTP: _bindgen_ty_6 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_6 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_6 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_6 = 43;
pub const IPPORT_MTP: _bindgen_ty_6 = 57;
pub const IPPORT_TFTP: _bindgen_ty_6 = 69;
pub const IPPORT_RJE: _bindgen_ty_6 = 77;
pub const IPPORT_FINGER: _bindgen_ty_6 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_6 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_6 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_6 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_6 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_6 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_6 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_6 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_6 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_6 = 5000;
pub type _bindgen_ty_6 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
impl Default for in6_addr__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
impl Default for in6_addr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
impl Default for sockaddr_in6 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_sourceaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
impl Default for ipv6_mreq {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
impl Default for group_req {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_source as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
impl Default for group_source_req {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    assert_eq!(
        ::std::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_fmode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_numsrc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_slist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    assert_eq!(
        ::std::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_fmode as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_numsrc as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_slist as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
impl Default for group_filter {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_pktinfo {
    pub ipi6_addr: in6_addr,
    pub ipi6_ifindex: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_in6_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<in6_pktinfo>(),
        20usize,
        concat!("Size of: ", stringify!(in6_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_pktinfo>())).ipi6_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_pktinfo),
            "::",
            stringify!(ipi6_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_pktinfo>())).ipi6_ifindex as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_pktinfo),
            "::",
            stringify!(ipi6_ifindex)
        )
    );
}
impl Default for in6_pktinfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip6_mtuinfo {
    pub ip6m_addr: sockaddr_in6,
    pub ip6m_mtu: u32,
}
#[test]
fn bindgen_test_layout_ip6_mtuinfo() {
    assert_eq!(
        ::std::mem::size_of::<ip6_mtuinfo>(),
        32usize,
        concat!("Size of: ", stringify!(ip6_mtuinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ip6_mtuinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ip6_mtuinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip6_mtuinfo>())).ip6m_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip6_mtuinfo),
            "::",
            stringify!(ip6m_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip6_mtuinfo>())).ip6m_mtu as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ip6_mtuinfo),
            "::",
            stringify!(ip6m_mtu)
        )
    );
}
impl Default for ip6_mtuinfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn inet6_option_space(__nbytes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_init(
        __bp: *mut ::std::os::raw::c_void,
        __cmsgp: *mut *mut cmsghdr,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_append(
        __cmsg: *mut cmsghdr,
        __typep: *const u8,
        __multx: ::std::os::raw::c_int,
        __plusy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_alloc(
        __cmsg: *mut cmsghdr,
        __datalen: ::std::os::raw::c_int,
        __multx: ::std::os::raw::c_int,
        __plusy: ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    pub fn inet6_option_next(
        __cmsg: *const cmsghdr,
        __tptrp: *mut *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_find(
        __cmsg: *const cmsghdr,
        __tptrp: *mut *mut u8,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_init(
        __extbuf: *mut ::std::os::raw::c_void,
        __extlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_append(
        __extbuf: *mut ::std::os::raw::c_void,
        __extlen: socklen_t,
        __offset: ::std::os::raw::c_int,
        __type: u8,
        __len: socklen_t,
        __align: u8,
        __databufp: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_finish(
        __extbuf: *mut ::std::os::raw::c_void,
        __extlen: socklen_t,
        __offset: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_set_val(
        __databuf: *mut ::std::os::raw::c_void,
        __offset: ::std::os::raw::c_int,
        __val: *mut ::std::os::raw::c_void,
        __vallen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_next(
        __extbuf: *mut ::std::os::raw::c_void,
        __extlen: socklen_t,
        __offset: ::std::os::raw::c_int,
        __typep: *mut u8,
        __lenp: *mut socklen_t,
        __databufp: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_find(
        __extbuf: *mut ::std::os::raw::c_void,
        __extlen: socklen_t,
        __offset: ::std::os::raw::c_int,
        __type: u8,
        __lenp: *mut socklen_t,
        __databufp: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_get_val(
        __databuf: *mut ::std::os::raw::c_void,
        __offset: ::std::os::raw::c_int,
        __val: *mut ::std::os::raw::c_void,
        __vallen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_space(
        __type: ::std::os::raw::c_int,
        __segments: ::std::os::raw::c_int,
    ) -> socklen_t;
}
extern "C" {
    pub fn inet6_rth_init(
        __bp: *mut ::std::os::raw::c_void,
        __bp_len: socklen_t,
        __type: ::std::os::raw::c_int,
        __segments: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn inet6_rth_add(
        __bp: *mut ::std::os::raw::c_void,
        __addr: *const in6_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_reverse(
        __in: *const ::std::os::raw::c_void,
        __out: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_segments(__bp: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_getaddr(
        __bp: *const ::std::os::raw::c_void,
        __index: ::std::os::raw::c_int,
    ) -> *mut in6_addr;
}
extern "C" {
    pub fn getipv4sourcefilter(
        __s: ::std::os::raw::c_int,
        __interface_addr: in_addr,
        __group: in_addr,
        __fmode: *mut u32,
        __numsrc: *mut u32,
        __slist: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setipv4sourcefilter(
        __s: ::std::os::raw::c_int,
        __interface_addr: in_addr,
        __group: in_addr,
        __fmode: u32,
        __numsrc: u32,
        __slist: *const in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsourcefilter(
        __s: ::std::os::raw::c_int,
        __interface_addr: u32,
        __group: *const sockaddr,
        __grouplen: socklen_t,
        __fmode: *mut u32,
        __numsrc: *mut u32,
        __slist: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsourcefilter(
        __s: ::std::os::raw::c_int,
        __interface_addr: u32,
        __group: *const sockaddr,
        __grouplen: socklen_t,
        __fmode: u32,
        __numsrc: u32,
        __slist: *const sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
pub type oid = u_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub union netsnmp_vardata {
    pub integer: *mut ::std::os::raw::c_long,
    pub string: *mut u_char,
    pub objid: *mut oid,
    pub bitstring: *mut u_char,
    pub counter64: *mut counter64,
    pub floatVal: *mut f32,
    pub doubleVal: *mut f64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_netsnmp_vardata() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_vardata>(),
        8usize,
        concat!("Size of: ", stringify!(netsnmp_vardata))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_vardata>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_vardata))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_vardata>())).integer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_vardata),
            "::",
            stringify!(integer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_vardata>())).string as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_vardata),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_vardata>())).objid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_vardata),
            "::",
            stringify!(objid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_vardata>())).bitstring as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_vardata),
            "::",
            stringify!(bitstring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_vardata>())).counter64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_vardata),
            "::",
            stringify!(counter64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_vardata>())).floatVal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_vardata),
            "::",
            stringify!(floatVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_vardata>())).doubleVal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_vardata),
            "::",
            stringify!(doubleVal)
        )
    );
}
impl Default for netsnmp_vardata {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct variable_list {
    pub next_variable: *mut variable_list,
    pub name: *mut oid,
    pub name_length: size_t,
    pub _type: u_char,
    pub val: netsnmp_vardata,
    pub val_len: size_t,
    pub name_loc: [oid; 128usize],
    pub buf: [u_char; 40usize],
    pub data: *mut ::std::os::raw::c_void,
    pub dataFreeHook:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_variable_list() {
    assert_eq!(
        ::std::mem::size_of::<variable_list>(),
        1136usize,
        concat!("Size of: ", stringify!(variable_list))
    );
    assert_eq!(
        ::std::mem::align_of::<variable_list>(),
        8usize,
        concat!("Alignment of ", stringify!(variable_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<variable_list>())).next_variable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(variable_list),
            "::",
            stringify!(next_variable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<variable_list>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(variable_list),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<variable_list>())).name_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(variable_list),
            "::",
            stringify!(name_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<variable_list>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(variable_list),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<variable_list>())).val as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(variable_list),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<variable_list>())).val_len as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(variable_list),
            "::",
            stringify!(val_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<variable_list>())).name_loc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(variable_list),
            "::",
            stringify!(name_loc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<variable_list>())).buf as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(variable_list),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<variable_list>())).data as *const _ as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(variable_list),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<variable_list>())).dataFreeHook as *const _ as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(variable_list),
            "::",
            stringify!(dataFreeHook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<variable_list>())).index as *const _ as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(variable_list),
            "::",
            stringify!(index)
        )
    );
}
impl Default for variable_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_variable_list = variable_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snmp_pdu {
    pub version: ::std::os::raw::c_long,
    pub command: ::std::os::raw::c_int,
    pub reqid: ::std::os::raw::c_long,
    pub msgid: ::std::os::raw::c_long,
    pub transid: ::std::os::raw::c_long,
    pub sessid: ::std::os::raw::c_long,
    pub errstat: ::std::os::raw::c_long,
    pub errindex: ::std::os::raw::c_long,
    pub time: u_long,
    pub flags: u_long,
    pub securityModel: ::std::os::raw::c_int,
    pub securityLevel: ::std::os::raw::c_int,
    pub msgParseModel: ::std::os::raw::c_int,
    pub msgMaxSize: ::std::os::raw::c_long,
    pub transport_data: *mut ::std::os::raw::c_void,
    pub transport_data_length: ::std::os::raw::c_int,
    pub tDomain: *const oid,
    pub tDomainLen: size_t,
    pub variables: *mut netsnmp_variable_list,
    pub community: *mut u_char,
    pub community_len: size_t,
    pub enterprise: *mut oid,
    pub enterprise_length: size_t,
    pub trap_type: ::std::os::raw::c_long,
    pub specific_type: ::std::os::raw::c_long,
    pub agent_addr: [::std::os::raw::c_uchar; 4usize],
    pub contextEngineID: *mut u_char,
    pub contextEngineIDLen: size_t,
    pub contextName: *mut ::std::os::raw::c_char,
    pub contextNameLen: size_t,
    pub securityEngineID: *mut u_char,
    pub securityEngineIDLen: size_t,
    pub securityName: *mut ::std::os::raw::c_char,
    pub securityNameLen: size_t,
    pub priority: ::std::os::raw::c_int,
    pub range_subid: ::std::os::raw::c_int,
    pub securityStateRef: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_snmp_pdu() {
    assert_eq!(
        ::std::mem::size_of::<snmp_pdu>(),
        280usize,
        concat!("Size of: ", stringify!(snmp_pdu))
    );
    assert_eq!(
        ::std::mem::align_of::<snmp_pdu>(),
        8usize,
        concat!("Alignment of ", stringify!(snmp_pdu))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).command as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).reqid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(reqid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).msgid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(msgid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).transid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(transid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).sessid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(sessid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).errstat as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(errstat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).errindex as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(errindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).time as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).flags as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).securityModel as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(securityModel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).securityLevel as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(securityLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).msgParseModel as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(msgParseModel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).msgMaxSize as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(msgMaxSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).transport_data as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(transport_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).transport_data_length as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(transport_data_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).tDomain as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(tDomain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).tDomainLen as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(tDomainLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).variables as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(variables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).community as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(community)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).community_len as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(community_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).enterprise as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(enterprise)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).enterprise_length as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(enterprise_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).trap_type as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(trap_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).specific_type as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(specific_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).agent_addr as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(agent_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).contextEngineID as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(contextEngineID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).contextEngineIDLen as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(contextEngineIDLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).contextName as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(contextName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).contextNameLen as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(contextNameLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).securityEngineID as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(securityEngineID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).securityEngineIDLen as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(securityEngineIDLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).securityName as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(securityName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).securityNameLen as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(securityNameLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).priority as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).range_subid as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(range_subid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_pdu>())).securityStateRef as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_pdu),
            "::",
            stringify!(securityStateRef)
        )
    );
}
impl Default for snmp_pdu {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_pdu = snmp_pdu;
pub type netsnmp_session = snmp_session;
pub type snmp_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut netsnmp_session,
        arg3: ::std::os::raw::c_int,
        arg4: *mut netsnmp_pdu,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type netsnmp_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut netsnmp_session,
        arg3: ::std::os::raw::c_int,
        arg4: *mut netsnmp_pdu,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct netsnmp_trap_stats_s {
    pub sent_count: u_long,
    pub sent_last_sent: u_long,
    pub sent_fail_count: u_long,
    pub sent_last_fail: u_long,
    pub ack_count: u_long,
    pub ack_last_rcvd: u_long,
    pub sec_err_count: u_long,
    pub sec_err_last: u_long,
    pub timeouts: u_long,
    pub sent_last_timeout: u_long,
}
#[test]
fn bindgen_test_layout_netsnmp_trap_stats_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_trap_stats_s>(),
        80usize,
        concat!("Size of: ", stringify!(netsnmp_trap_stats_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_trap_stats_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_trap_stats_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_trap_stats_s>())).sent_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_trap_stats_s),
            "::",
            stringify!(sent_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_trap_stats_s>())).sent_last_sent as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_trap_stats_s),
            "::",
            stringify!(sent_last_sent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_trap_stats_s>())).sent_fail_count as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_trap_stats_s),
            "::",
            stringify!(sent_fail_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_trap_stats_s>())).sent_last_fail as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_trap_stats_s),
            "::",
            stringify!(sent_last_fail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_trap_stats_s>())).ack_count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_trap_stats_s),
            "::",
            stringify!(ack_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_trap_stats_s>())).ack_last_rcvd as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_trap_stats_s),
            "::",
            stringify!(ack_last_rcvd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_trap_stats_s>())).sec_err_count as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_trap_stats_s),
            "::",
            stringify!(sec_err_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_trap_stats_s>())).sec_err_last as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_trap_stats_s),
            "::",
            stringify!(sec_err_last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_trap_stats_s>())).timeouts as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_trap_stats_s),
            "::",
            stringify!(timeouts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_trap_stats_s>())).sent_last_timeout as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_trap_stats_s),
            "::",
            stringify!(sent_last_timeout)
        )
    );
}
pub type netsnmp_trap_stats = netsnmp_trap_stats_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct snmp_session {
    pub version: ::std::os::raw::c_long,
    pub retries: ::std::os::raw::c_int,
    pub timeout: ::std::os::raw::c_long,
    pub flags: u_long,
    pub subsession: *mut snmp_session,
    pub next: *mut snmp_session,
    pub peername: *mut ::std::os::raw::c_char,
    pub remote_port: u_short,
    pub localname: *mut ::std::os::raw::c_char,
    pub local_port: u_short,
    pub authenticator: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut u_char,
            arg2: *mut size_t,
            arg3: *mut u_char,
            arg4: size_t,
        ) -> *mut u_char,
    >,
    pub callback: netsnmp_callback,
    pub callback_magic: *mut ::std::os::raw::c_void,
    pub s_errno: ::std::os::raw::c_int,
    pub s_snmp_errno: ::std::os::raw::c_int,
    pub sessid: ::std::os::raw::c_long,
    pub community: *mut u_char,
    pub community_len: size_t,
    pub rcvMsgMaxSize: size_t,
    pub sndMsgMaxSize: size_t,
    pub isAuthoritative: u_char,
    pub contextEngineID: *mut u_char,
    pub contextEngineIDLen: size_t,
    pub engineBoots: u_int,
    pub engineTime: u_int,
    pub contextName: *mut ::std::os::raw::c_char,
    pub contextNameLen: size_t,
    pub securityEngineID: *mut u_char,
    pub securityEngineIDLen: size_t,
    pub securityName: *mut ::std::os::raw::c_char,
    pub securityNameLen: size_t,
    pub securityAuthProto: *mut oid,
    pub securityAuthProtoLen: size_t,
    pub securityAuthKey: [u_char; 64usize],
    pub securityAuthKeyLen: size_t,
    pub securityAuthLocalKey: *mut u_char,
    pub securityAuthLocalKeyLen: size_t,
    pub securityPrivProto: *mut oid,
    pub securityPrivProtoLen: size_t,
    pub securityPrivKey: [u_char; 64usize],
    pub securityPrivKeyLen: size_t,
    pub securityPrivLocalKey: *mut u_char,
    pub securityPrivLocalKeyLen: size_t,
    pub securityModel: ::std::os::raw::c_int,
    pub securityLevel: ::std::os::raw::c_int,
    pub paramName: *mut ::std::os::raw::c_char,
    pub trap_stats: *mut netsnmp_trap_stats,
    pub securityInfo: *mut ::std::os::raw::c_void,
    pub transport_configuration: *mut netsnmp_container_s,
    pub myvoid: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_snmp_session() {
    assert_eq!(
        ::std::mem::size_of::<snmp_session>(),
        488usize,
        concat!("Size of: ", stringify!(snmp_session))
    );
    assert_eq!(
        ::std::mem::align_of::<snmp_session>(),
        8usize,
        concat!("Alignment of ", stringify!(snmp_session))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).retries as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(retries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).timeout as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).subsession as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(subsession)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).peername as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(peername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).remote_port as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(remote_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).localname as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(localname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).local_port as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(local_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).authenticator as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(authenticator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).callback as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).callback_magic as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(callback_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).s_errno as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(s_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).s_snmp_errno as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(s_snmp_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).sessid as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(sessid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).community as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(community)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).community_len as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(community_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).rcvMsgMaxSize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(rcvMsgMaxSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).sndMsgMaxSize as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(sndMsgMaxSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).isAuthoritative as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(isAuthoritative)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).contextEngineID as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(contextEngineID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).contextEngineIDLen as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(contextEngineIDLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).engineBoots as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(engineBoots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).engineTime as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(engineTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).contextName as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(contextName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).contextNameLen as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(contextNameLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).securityEngineID as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityEngineID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_session>())).securityEngineIDLen as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityEngineIDLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).securityName as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).securityNameLen as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityNameLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).securityAuthProto as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityAuthProto)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_session>())).securityAuthProtoLen as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityAuthProtoLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).securityAuthKey as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityAuthKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).securityAuthKeyLen as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityAuthKeyLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_session>())).securityAuthLocalKey as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityAuthLocalKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_session>())).securityAuthLocalKeyLen as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityAuthLocalKeyLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).securityPrivProto as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityPrivProto)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_session>())).securityPrivProtoLen as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityPrivProtoLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).securityPrivKey as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityPrivKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).securityPrivKeyLen as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityPrivKeyLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_session>())).securityPrivLocalKey as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityPrivLocalKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_session>())).securityPrivLocalKeyLen as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityPrivLocalKeyLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).securityModel as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityModel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).securityLevel as *const _ as usize },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).paramName as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(paramName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).trap_stats as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(trap_stats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).securityInfo as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(securityInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_session>())).transport_configuration as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(transport_configuration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_session>())).myvoid as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_session),
            "::",
            stringify!(myvoid)
        )
    );
}
impl Default for snmp_session {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_index_s {
    pub len: size_t,
    pub oids: *mut oid,
}
#[test]
fn bindgen_test_layout_netsnmp_index_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_index_s>(),
        16usize,
        concat!("Size of: ", stringify!(netsnmp_index_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_index_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_index_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_index_s>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_index_s),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_index_s>())).oids as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_index_s),
            "::",
            stringify!(oids)
        )
    );
}
impl Default for netsnmp_index_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_index = netsnmp_index_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_void_array_s {
    pub size: size_t,
    pub array: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_netsnmp_void_array_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_void_array_s>(),
        16usize,
        concat!("Size of: ", stringify!(netsnmp_void_array_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_void_array_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_void_array_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_void_array_s>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_void_array_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_void_array_s>())).array as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_void_array_s),
            "::",
            stringify!(array)
        )
    );
}
impl Default for netsnmp_void_array_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_void_array = netsnmp_void_array_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_ref_void {
    pub val: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_netsnmp_ref_void() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_ref_void>(),
        8usize,
        concat!("Size of: ", stringify!(netsnmp_ref_void))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_ref_void>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_ref_void))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_ref_void>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_ref_void),
            "::",
            stringify!(val)
        )
    );
}
impl Default for netsnmp_ref_void {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union netsnmp_cvalue {
    pub ul: u_long,
    pub ui: u_int,
    pub us: u_short,
    pub uc: u_char,
    pub sl: ::std::os::raw::c_long,
    pub si: ::std::os::raw::c_int,
    pub ss: ::std::os::raw::c_short,
    pub sc: ::std::os::raw::c_char,
    pub cp: *mut ::std::os::raw::c_char,
    pub vp: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_netsnmp_cvalue() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_cvalue>(),
        8usize,
        concat!("Size of: ", stringify!(netsnmp_cvalue))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_cvalue>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_cvalue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_cvalue>())).ul as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_cvalue),
            "::",
            stringify!(ul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_cvalue>())).ui as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_cvalue),
            "::",
            stringify!(ui)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_cvalue>())).us as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_cvalue),
            "::",
            stringify!(us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_cvalue>())).uc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_cvalue),
            "::",
            stringify!(uc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_cvalue>())).sl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_cvalue),
            "::",
            stringify!(sl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_cvalue>())).si as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_cvalue),
            "::",
            stringify!(si)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_cvalue>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_cvalue),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_cvalue>())).sc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_cvalue),
            "::",
            stringify!(sc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_cvalue>())).cp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_cvalue),
            "::",
            stringify!(cp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_cvalue>())).vp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_cvalue),
            "::",
            stringify!(vp)
        )
    );
}
impl Default for netsnmp_cvalue {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct netsnmp_ref_size_t_s {
    pub val: size_t,
}
#[test]
fn bindgen_test_layout_netsnmp_ref_size_t_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_ref_size_t_s>(),
        8usize,
        concat!("Size of: ", stringify!(netsnmp_ref_size_t_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_ref_size_t_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_ref_size_t_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_ref_size_t_s>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_ref_size_t_s),
            "::",
            stringify!(val)
        )
    );
}
pub type netsnmp_ref_size_t = *mut netsnmp_ref_size_t_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_large_fd_set_s {
    pub lfs_setsize: ::std::os::raw::c_uint,
    pub lfs_setptr: *mut fd_set,
    pub lfs_set: fd_set,
}
#[test]
fn bindgen_test_layout_netsnmp_large_fd_set_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_large_fd_set_s>(),
        144usize,
        concat!("Size of: ", stringify!(netsnmp_large_fd_set_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_large_fd_set_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_large_fd_set_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_large_fd_set_s>())).lfs_setsize as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_large_fd_set_s),
            "::",
            stringify!(lfs_setsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_large_fd_set_s>())).lfs_setptr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_large_fd_set_s),
            "::",
            stringify!(lfs_setptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_large_fd_set_s>())).lfs_set as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_large_fd_set_s),
            "::",
            stringify!(lfs_set)
        )
    );
}
impl Default for netsnmp_large_fd_set_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_large_fd_set = netsnmp_large_fd_set_s;
extern "C" {
    pub fn snmp_pdu_add_variable(
        pdu: *mut netsnmp_pdu,
        name: *const oid,
        name_length: size_t,
        type_: u_char,
        value: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> *mut netsnmp_variable_list;
}
extern "C" {
    pub fn snmp_varlist_add_variable(
        varlist: *mut *mut netsnmp_variable_list,
        name: *const oid,
        name_length: size_t,
        type_: u_char,
        value: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> *mut netsnmp_variable_list;
}
extern "C" {
    pub fn snmp_add_null_var(
        pdu: *mut netsnmp_pdu,
        name: *const oid,
        name_length: size_t,
    ) -> *mut netsnmp_variable_list;
}
extern "C" {
    pub fn snmp_clone_varbind(varlist: *mut netsnmp_variable_list) -> *mut netsnmp_variable_list;
}
extern "C" {
    pub fn snmp_set_var_objid(
        var: *mut netsnmp_variable_list,
        name: *const oid,
        name_length: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_set_var_value(
        var: *mut netsnmp_variable_list,
        value: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_set_var_typed_value(
        var: *mut netsnmp_variable_list,
        type_: u_char,
        value: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_set_var_typed_integer(
        var: *mut netsnmp_variable_list,
        type_: u_char,
        val: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn print_variable(
        objid: *const oid,
        objidlen: size_t,
        variable: *const netsnmp_variable_list,
    );
}
extern "C" {
    pub fn fprint_variable(
        fp: *mut FILE,
        objid: *const oid,
        objidlen: size_t,
        variable: *const netsnmp_variable_list,
    );
}
extern "C" {
    pub fn snprint_variable(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        objid: *const oid,
        objidlen: size_t,
        variable: *const netsnmp_variable_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn print_value(objid: *const oid, objidlen: size_t, variable: *const netsnmp_variable_list);
}
extern "C" {
    pub fn fprint_value(
        fp: *mut FILE,
        objid: *const oid,
        objidlen: size_t,
        variable: *const netsnmp_variable_list,
    );
}
extern "C" {
    pub fn snprint_value(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        objid: *const oid,
        objidlen: size_t,
        variable: *const netsnmp_variable_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_free_var(var: *mut netsnmp_variable_list);
}
extern "C" {
    pub fn snmp_free_varbind(varlist: *mut netsnmp_variable_list);
}
extern "C" {
    pub fn snmp_pdu_create(type_: ::std::os::raw::c_int) -> *mut netsnmp_pdu;
}
extern "C" {
    pub fn snmp_clone_pdu(pdu: *mut netsnmp_pdu) -> *mut netsnmp_pdu;
}
extern "C" {
    pub fn snmp_fix_pdu(pdu: *mut netsnmp_pdu, idx: ::std::os::raw::c_int) -> *mut netsnmp_pdu;
}
extern "C" {
    pub fn snmp_free_pdu(pdu: *mut netsnmp_pdu);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct counter64 {
    pub high: u_long,
    pub low: u_long,
}
#[test]
fn bindgen_test_layout_counter64() {
    assert_eq!(
        ::std::mem::size_of::<counter64>(),
        16usize,
        concat!("Size of: ", stringify!(counter64))
    );
    assert_eq!(
        ::std::mem::align_of::<counter64>(),
        8usize,
        concat!("Alignment of ", stringify!(counter64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<counter64>())).high as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(counter64),
            "::",
            stringify!(high)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<counter64>())).low as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(counter64),
            "::",
            stringify!(low)
        )
    );
}
pub type integer64 = counter64;
pub type unsigned64 = counter64;
extern "C" {
    pub fn asn_check_packet(arg1: *mut u_char, arg2: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_parse_int(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: *mut u_char,
        arg4: *mut ::std::os::raw::c_long,
        arg5: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_build_int(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: u_char,
        arg4: *const ::std::os::raw::c_long,
        arg5: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_parse_unsigned_int(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: *mut u_char,
        arg4: *mut u_long,
        arg5: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_build_unsigned_int(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: u_char,
        arg4: *const u_long,
        arg5: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_parse_string(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: *mut u_char,
        arg4: *mut u_char,
        arg5: *mut size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_build_string(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: u_char,
        arg4: *const u_char,
        arg5: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_parse_header(arg1: *mut u_char, arg2: *mut size_t, arg3: *mut u_char)
        -> *mut u_char;
}
extern "C" {
    pub fn asn_parse_sequence(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: *mut u_char,
        expected_type: u_char,
        estr: *const ::std::os::raw::c_char,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_build_header(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: u_char,
        arg4: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_build_sequence(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: u_char,
        arg4: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_parse_length(arg1: *mut u_char, arg2: *mut u_long) -> *mut u_char;
}
extern "C" {
    pub fn asn_build_length(arg1: *mut u_char, arg2: *mut size_t, arg3: size_t) -> *mut u_char;
}
extern "C" {
    pub fn asn_parse_objid(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: *mut u_char,
        arg4: *mut oid,
        arg5: *mut size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_build_objid(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: u_char,
        arg4: *mut oid,
        arg5: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_parse_null(arg1: *mut u_char, arg2: *mut size_t, arg3: *mut u_char) -> *mut u_char;
}
extern "C" {
    pub fn asn_build_null(arg1: *mut u_char, arg2: *mut size_t, arg3: u_char) -> *mut u_char;
}
extern "C" {
    pub fn asn_parse_bitstring(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: *mut u_char,
        arg4: *mut u_char,
        arg5: *mut size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_build_bitstring(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: u_char,
        arg4: *const u_char,
        arg5: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_parse_unsigned_int64(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: *mut u_char,
        arg4: *mut counter64,
        arg5: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_build_unsigned_int64(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: u_char,
        arg4: *const counter64,
        arg5: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_parse_signed_int64(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: *mut u_char,
        arg4: *mut counter64,
        arg5: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_build_signed_int64(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: u_char,
        arg4: *const counter64,
        arg5: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_build_float(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: u_char,
        arg4: *const f32,
        arg5: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_parse_float(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: *mut u_char,
        arg4: *mut f32,
        arg5: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_build_double(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: u_char,
        arg4: *const f64,
        arg5: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_parse_double(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: *mut u_char,
        arg4: *mut f64,
        arg5: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn asn_realloc(arg1: *mut *mut u_char, arg2: *mut size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_realloc_rbuild_int(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        type_: u_char,
        data: *const ::std::os::raw::c_long,
        data_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_realloc_rbuild_string(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        type_: u_char,
        data: *const u_char,
        data_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_realloc_rbuild_unsigned_int(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        type_: u_char,
        data: *const u_long,
        data_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_realloc_rbuild_header(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        type_: u_char,
        data_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_realloc_rbuild_sequence(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        type_: u_char,
        data_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_realloc_rbuild_length(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        data_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_realloc_rbuild_objid(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        type_: u_char,
        arg1: *const oid,
        arg2: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_realloc_rbuild_null(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        type_: u_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_realloc_rbuild_bitstring(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        type_: u_char,
        data: *const u_char,
        data_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_realloc_rbuild_unsigned_int64(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        type_: u_char,
        data: *const counter64,
        arg1: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_realloc_rbuild_signed_int64(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        type_: u_char,
        data: *const counter64,
        arg1: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_realloc_rbuild_float(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        type_: u_char,
        data: *const f32,
        data_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_realloc_rbuild_double(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        type_: u_char,
        data: *const f64,
        data_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_error(
        sess: *mut netsnmp_session,
        clib_errorno: *mut ::std::os::raw::c_int,
        snmp_errorno: *mut ::std::os::raw::c_int,
        errstring: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn snmp_sess_error(
        sess: *mut ::std::os::raw::c_void,
        clib_errorno: *mut ::std::os::raw::c_int,
        snmp_errorno: *mut ::std::os::raw::c_int,
        errstring: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn snmp_api_errstring(snmp_errorno: ::std::os::raw::c_int)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snmp_errstring(snmp_errorno: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snmp_perror(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn snmp_sess_perror(msg: *const ::std::os::raw::c_char, sess: *mut netsnmp_session);
}
extern "C" {
    pub fn snmp_log_perror(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn snmp_log(
        priority: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_vlog(
        priority: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_get_do_logging() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_logging_restart();
}
extern "C" {
    pub fn snmp_disable_log();
}
extern "C" {
    pub fn shutdown_snmp_logging();
}
extern "C" {
    pub fn debugmsg(
        token: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn debugmsgtoken(
        token: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn debug_combo_nc(
        token: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn debugmsg_oid(token: *const ::std::os::raw::c_char, theoid: *const oid, len: size_t);
}
extern "C" {
    pub fn debugmsg_suboid(token: *const ::std::os::raw::c_char, theoid: *const oid, len: size_t);
}
extern "C" {
    pub fn debugmsg_var(token: *const ::std::os::raw::c_char, var: *mut netsnmp_variable_list);
}
extern "C" {
    pub fn debugmsg_oidrange(
        token: *const ::std::os::raw::c_char,
        theoid: *const oid,
        len: size_t,
        var_subid: size_t,
        range_ubound: oid,
    );
}
extern "C" {
    pub fn debugmsg_hex(token: *const ::std::os::raw::c_char, thedata: *const u_char, len: size_t);
}
extern "C" {
    pub fn debugmsg_hextli(
        token: *const ::std::os::raw::c_char,
        thedata: *const u_char,
        len: size_t,
    );
}
extern "C" {
    pub fn debug_indent_add(amount: ::std::os::raw::c_int);
}
extern "C" {
    pub fn debug_indent_reset();
}
extern "C" {
    pub fn debug_indent_get() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn debug_indent() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snmp_debug_init();
}
extern "C" {
    pub fn snmp_debug_shutdown();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_token_descr_s {
    pub token_name: *mut ::std::os::raw::c_char,
    pub enabled: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_netsnmp_token_descr_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_token_descr_s>(),
        16usize,
        concat!("Size of: ", stringify!(netsnmp_token_descr_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_token_descr_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_token_descr_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_token_descr_s>())).token_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_token_descr_s),
            "::",
            stringify!(token_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_token_descr_s>())).enabled as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_token_descr_s),
            "::",
            stringify!(enabled)
        )
    );
}
impl Default for netsnmp_token_descr_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_token_descr = netsnmp_token_descr_s;
extern "C" {
    pub static mut debug_num_tokens: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut dbg_tokens: [netsnmp_token_descr; 256usize];
}
extern "C" {
    pub fn debug_register_tokens(tokens: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn debug_enable_token_logs(token: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn debug_disable_token_logs(token: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn debug_is_token_registered(token: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_set_do_debugging(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snmp_get_do_debugging() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_set_debug_log_level(val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn netsnmp_get_debug_log_level() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closelog();
}
extern "C" {
    pub fn openlog(
        __ident: *const ::std::os::raw::c_char,
        __option: ::std::os::raw::c_int,
        __facility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlogmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syslog(__pri: ::std::os::raw::c_int, __fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vsyslog(
        __pri: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __ap: *mut __va_list_tag,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snmp_log_message {
    pub priority: ::std::os::raw::c_int,
    pub msg: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_snmp_log_message() {
    assert_eq!(
        ::std::mem::size_of::<snmp_log_message>(),
        16usize,
        concat!("Size of: ", stringify!(snmp_log_message))
    );
    assert_eq!(
        ::std::mem::align_of::<snmp_log_message>(),
        8usize,
        concat!("Alignment of ", stringify!(snmp_log_message))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_log_message>())).priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_log_message),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_log_message>())).msg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_log_message),
            "::",
            stringify!(msg)
        )
    );
}
impl Default for snmp_log_message {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn init_snmp_logging();
}
extern "C" {
    pub fn snmp_disable_syslog();
}
extern "C" {
    pub fn snmp_disable_filelog();
}
extern "C" {
    pub fn snmp_disable_stderrlog();
}
extern "C" {
    pub fn snmp_disable_calllog();
}
extern "C" {
    pub fn snmp_enable_syslog();
}
extern "C" {
    pub fn snmp_enable_syslog_ident(
        ident: *const ::std::os::raw::c_char,
        facility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snmp_enable_filelog(
        logfilename: *const ::std::os::raw::c_char,
        dont_zero_log: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snmp_enable_stderrlog();
}
extern "C" {
    pub fn snmp_enable_calllog();
}
extern "C" {
    pub fn snmp_stderrlog_status() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_set_line_buffering(stream: *mut FILE);
}
extern "C" {
    pub fn snmp_log_options(
        optarg: *mut ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_log_options_usage(lead: *const ::std::os::raw::c_char, outf: *mut FILE);
}
extern "C" {
    pub fn snmp_log_syslogname(
        syslogname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type netsnmp_log_handler = netsnmp_log_handler_s;
pub type NetsnmpLogHandler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut netsnmp_log_handler,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn log_handler_stdouterr(
        arg1: *mut netsnmp_log_handler,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn log_handler_file(
        arg1: *mut netsnmp_log_handler,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn log_handler_syslog(
        arg1: *mut netsnmp_log_handler,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn log_handler_callback(
        arg1: *mut netsnmp_log_handler,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn log_handler_null(
        arg1: *mut netsnmp_log_handler,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_log_handler_s {
    pub enabled: ::std::os::raw::c_int,
    pub priority: ::std::os::raw::c_int,
    pub pri_max: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub token: *const ::std::os::raw::c_char,
    pub handler: NetsnmpLogHandler,
    pub imagic: ::std::os::raw::c_int,
    pub magic: *mut ::std::os::raw::c_void,
    pub next: *mut netsnmp_log_handler,
    pub prev: *mut netsnmp_log_handler,
}
#[test]
fn bindgen_test_layout_netsnmp_log_handler_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_log_handler_s>(),
        64usize,
        concat!("Size of: ", stringify!(netsnmp_log_handler_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_log_handler_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_log_handler_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_log_handler_s>())).enabled as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_log_handler_s),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_log_handler_s>())).priority as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_log_handler_s),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_log_handler_s>())).pri_max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_log_handler_s),
            "::",
            stringify!(pri_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_log_handler_s>())).type_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_log_handler_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_log_handler_s>())).token as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_log_handler_s),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_log_handler_s>())).handler as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_log_handler_s),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_log_handler_s>())).imagic as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_log_handler_s),
            "::",
            stringify!(imagic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_log_handler_s>())).magic as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_log_handler_s),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_log_handler_s>())).next as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_log_handler_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_log_handler_s>())).prev as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_log_handler_s),
            "::",
            stringify!(prev)
        )
    );
}
impl Default for netsnmp_log_handler_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn get_logh_head() -> *mut netsnmp_log_handler;
}
extern "C" {
    pub fn netsnmp_register_loghandler(
        type_: ::std::os::raw::c_int,
        pri: ::std::os::raw::c_int,
    ) -> *mut netsnmp_log_handler;
}
extern "C" {
    pub fn netsnmp_find_loghandler(
        token: *const ::std::os::raw::c_char,
    ) -> *mut netsnmp_log_handler;
}
extern "C" {
    pub fn netsnmp_add_loghandler(logh: *mut netsnmp_log_handler) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_remove_loghandler(logh: *mut netsnmp_log_handler) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_enable_loghandler(token: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_disable_loghandler(
        token: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_enable_this_loghandler(logh: *mut netsnmp_log_handler);
}
extern "C" {
    pub fn netsnmp_disable_this_loghandler(logh: *mut netsnmp_log_handler);
}
extern "C" {
    pub fn netsnmp_create_stdio_loghandler(
        is_stdout: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
        priority_max: ::std::os::raw::c_int,
        tok: *const ::std::os::raw::c_char,
    ) -> *mut netsnmp_log_handler;
}
extern "C" {
    pub fn netsnmp_register_filelog_handler(
        logfilename: *const ::std::os::raw::c_char,
        priority: ::std::os::raw::c_int,
        priority_max: ::std::os::raw::c_int,
        dont_zero_log: ::std::os::raw::c_int,
    ) -> *mut netsnmp_log_handler;
}
extern "C" {
    pub fn snmp_sess_init(arg1: *mut netsnmp_session);
}
extern "C" {
    pub fn snmp_open(arg1: *mut netsnmp_session) -> *mut netsnmp_session;
}
extern "C" {
    pub fn snmp_close(arg1: *mut netsnmp_session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_close_sessions() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _build_initial_pdu_packet(
        slp: *mut session_list,
        pdu: *mut netsnmp_pdu,
        bulk: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_send(arg1: *mut netsnmp_session, arg2: *mut netsnmp_pdu) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_async_send(
        arg1: *mut netsnmp_session,
        arg2: *mut netsnmp_pdu,
        arg3: netsnmp_callback,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_read(arg1: *mut fd_set);
}
extern "C" {
    pub fn snmp_read2(arg1: *mut netsnmp_large_fd_set);
}
extern "C" {
    pub fn snmp_synch_response(
        arg1: *mut netsnmp_session,
        arg2: *mut netsnmp_pdu,
        arg3: *mut *mut netsnmp_pdu,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_select_info(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut timeval,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_select_info2(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut netsnmp_large_fd_set,
        arg3: *mut timeval,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_sess_select_info_flags(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut fd_set,
        arg4: *mut timeval,
        arg5: *mut ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_sess_select_info2_flags(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut netsnmp_large_fd_set,
        arg4: *mut timeval,
        arg5: *mut ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_timeout();
}
extern "C" {
    pub fn snmp_sess_open(arg1: *mut netsnmp_session) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn snmp_sess_pointer(arg1: *mut netsnmp_session) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn snmp_sess_session(arg1: *mut ::std::os::raw::c_void) -> *mut netsnmp_session;
}
extern "C" {
    pub fn snmp_sess_session_lookup(arg1: *mut ::std::os::raw::c_void) -> *mut netsnmp_session;
}
extern "C" {
    pub fn snmp_sess_lookup_by_name(
        paramName: *const ::std::os::raw::c_char,
    ) -> *mut netsnmp_session;
}
extern "C" {
    pub fn snmp_sess_send(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut netsnmp_pdu,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_sess_async_send(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut netsnmp_pdu,
        arg3: netsnmp_callback,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_sess_select_info(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut fd_set,
        arg4: *mut timeval,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_sess_select_info2(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut netsnmp_large_fd_set,
        arg4: *mut timeval,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_sess_read(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut fd_set,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_sess_read2(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut netsnmp_large_fd_set,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_sess_timeout(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn snmp_sess_close(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_sess_synch_response(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut netsnmp_pdu,
        arg3: *mut *mut netsnmp_pdu,
    ) -> ::std::os::raw::c_int;
}
pub type SNMPCallback = ::std::option::Option<
    unsafe extern "C" fn(
        majorID: ::std::os::raw::c_int,
        minorID: ::std::os::raw::c_int,
        serverarg: *mut ::std::os::raw::c_void,
        clientarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snmp_gen_callback {
    pub sc_callback: SNMPCallback,
    pub sc_client_arg: *mut ::std::os::raw::c_void,
    pub priority: ::std::os::raw::c_int,
    pub next: *mut snmp_gen_callback,
}
#[test]
fn bindgen_test_layout_snmp_gen_callback() {
    assert_eq!(
        ::std::mem::size_of::<snmp_gen_callback>(),
        32usize,
        concat!("Size of: ", stringify!(snmp_gen_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<snmp_gen_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(snmp_gen_callback))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_gen_callback>())).sc_callback as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_gen_callback),
            "::",
            stringify!(sc_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_gen_callback>())).sc_client_arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_gen_callback),
            "::",
            stringify!(sc_client_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_gen_callback>())).priority as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_gen_callback),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_gen_callback>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_gen_callback),
            "::",
            stringify!(next)
        )
    );
}
impl Default for snmp_gen_callback {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn init_callbacks();
}
extern "C" {
    pub fn netsnmp_register_callback(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
        new_callback: SNMPCallback,
        arg: *mut ::std::os::raw::c_void,
        priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_register_callback(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
        new_callback: SNMPCallback,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_call_callbacks(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
        caller_arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_callback_available(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_count_callbacks(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_unregister_callback(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
        new_callback: SNMPCallback,
        arg: *mut ::std::os::raw::c_void,
        matchargs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear_callback();
}
extern "C" {
    pub fn netsnmp_callback_clear_client_arg(
        arg1: *mut ::std::os::raw::c_void,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_callback_list(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
    ) -> *mut snmp_gen_callback;
}
extern "C" {
    pub static mut netsnmpUDPDomain: [oid; 0usize];
}
extern "C" {
    pub static mut netsnmpCLNSDomain: [oid; 0usize];
}
extern "C" {
    pub static mut netsnmpCONSDomain: [oid; 0usize];
}
extern "C" {
    pub static mut netsnmpDDPDomain: [oid; 0usize];
}
extern "C" {
    pub static mut netsnmpIPXDomain: [oid; 0usize];
}
extern "C" {
    pub static mut netsnmpUDPDomain_len: size_t;
}
extern "C" {
    pub static mut netsnmpCLNSDomain_len: size_t;
}
extern "C" {
    pub static mut netsnmpCONSDomain_len: size_t;
}
extern "C" {
    pub static mut netsnmpDDPDomain_len: size_t;
}
extern "C" {
    pub static mut netsnmpIPXDomain_len: size_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union netsnmp_sockaddr_storage_u {
    pub sa: sockaddr,
    pub sin: sockaddr_in,
    pub sin6: sockaddr_in6,
    _bindgen_union_align: [u32; 7usize],
}
#[test]
fn bindgen_test_layout_netsnmp_sockaddr_storage_u() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_sockaddr_storage_u>(),
        28usize,
        concat!("Size of: ", stringify!(netsnmp_sockaddr_storage_u))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_sockaddr_storage_u>(),
        4usize,
        concat!("Alignment of ", stringify!(netsnmp_sockaddr_storage_u))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_sockaddr_storage_u>())).sa as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_sockaddr_storage_u),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_sockaddr_storage_u>())).sin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_sockaddr_storage_u),
            "::",
            stringify!(sin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_sockaddr_storage_u>())).sin6 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_sockaddr_storage_u),
            "::",
            stringify!(sin6)
        )
    );
}
impl Default for netsnmp_sockaddr_storage_u {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_sockaddr_storage = netsnmp_sockaddr_storage_u;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct netsnmp_addr_pair_s {
    pub remote_addr: netsnmp_sockaddr_storage,
    pub local_addr: netsnmp_sockaddr_storage,
}
#[test]
fn bindgen_test_layout_netsnmp_addr_pair_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_addr_pair_s>(),
        56usize,
        concat!("Size of: ", stringify!(netsnmp_addr_pair_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_addr_pair_s>(),
        4usize,
        concat!("Alignment of ", stringify!(netsnmp_addr_pair_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_addr_pair_s>())).remote_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_addr_pair_s),
            "::",
            stringify!(remote_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_addr_pair_s>())).local_addr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_addr_pair_s),
            "::",
            stringify!(local_addr)
        )
    );
}
impl Default for netsnmp_addr_pair_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_addr_pair = netsnmp_addr_pair_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct netsnmp_indexed_addr_pair_s {
    pub remote_addr: netsnmp_sockaddr_storage,
    pub local_addr: netsnmp_sockaddr_storage,
    pub if_index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_netsnmp_indexed_addr_pair_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_indexed_addr_pair_s>(),
        60usize,
        concat!("Size of: ", stringify!(netsnmp_indexed_addr_pair_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_indexed_addr_pair_s>(),
        4usize,
        concat!("Alignment of ", stringify!(netsnmp_indexed_addr_pair_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_indexed_addr_pair_s>())).remote_addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_indexed_addr_pair_s),
            "::",
            stringify!(remote_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_indexed_addr_pair_s>())).local_addr as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_indexed_addr_pair_s),
            "::",
            stringify!(local_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_indexed_addr_pair_s>())).if_index as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_indexed_addr_pair_s),
            "::",
            stringify!(if_index)
        )
    );
}
impl Default for netsnmp_indexed_addr_pair_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_indexed_addr_pair = netsnmp_indexed_addr_pair_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct netsnmp_tmStateReference_s {
    pub transportDomain: [oid; 128usize],
    pub transportDomainLen: size_t,
    pub securityName: [::std::os::raw::c_char; 256usize],
    pub securityNameLen: size_t,
    pub requestedSecurityLevel: ::std::os::raw::c_int,
    pub transportSecurityLevel: ::std::os::raw::c_int,
    pub sameSecurity: ::std::os::raw::c_char,
    pub sessionID: [::std::os::raw::c_char; 8usize],
    pub have_addresses: ::std::os::raw::c_char,
    pub addresses: netsnmp_indexed_addr_pair,
    pub otherTransportOpaque: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_netsnmp_tmStateReference_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_tmStateReference_s>(),
        1384usize,
        concat!("Size of: ", stringify!(netsnmp_tmStateReference_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_tmStateReference_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_tmStateReference_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tmStateReference_s>())).transportDomain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tmStateReference_s),
            "::",
            stringify!(transportDomain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tmStateReference_s>())).transportDomainLen as *const _
                as usize
        },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tmStateReference_s),
            "::",
            stringify!(transportDomainLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tmStateReference_s>())).securityName as *const _ as usize
        },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tmStateReference_s),
            "::",
            stringify!(securityName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tmStateReference_s>())).securityNameLen as *const _
                as usize
        },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tmStateReference_s),
            "::",
            stringify!(securityNameLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tmStateReference_s>())).requestedSecurityLevel
                as *const _ as usize
        },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tmStateReference_s),
            "::",
            stringify!(requestedSecurityLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tmStateReference_s>())).transportSecurityLevel
                as *const _ as usize
        },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tmStateReference_s),
            "::",
            stringify!(transportSecurityLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tmStateReference_s>())).sameSecurity as *const _ as usize
        },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tmStateReference_s),
            "::",
            stringify!(sameSecurity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tmStateReference_s>())).sessionID as *const _ as usize
        },
        1305usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tmStateReference_s),
            "::",
            stringify!(sessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tmStateReference_s>())).have_addresses as *const _
                as usize
        },
        1313usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tmStateReference_s),
            "::",
            stringify!(have_addresses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tmStateReference_s>())).addresses as *const _ as usize
        },
        1316usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tmStateReference_s),
            "::",
            stringify!(addresses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tmStateReference_s>())).otherTransportOpaque as *const _
                as usize
        },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tmStateReference_s),
            "::",
            stringify!(otherTransportOpaque)
        )
    );
}
impl Default for netsnmp_tmStateReference_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_tmStateReference = netsnmp_tmStateReference_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_tdomain_spec_s {
    pub application: *const ::std::os::raw::c_char,
    pub target: *const ::std::os::raw::c_char,
    pub flags: u_int,
    pub default_domain: *const ::std::os::raw::c_char,
    pub default_target: *const ::std::os::raw::c_char,
    pub source: *const ::std::os::raw::c_char,
    pub transport_config: *mut netsnmp_container_s,
}
#[test]
fn bindgen_test_layout_netsnmp_tdomain_spec_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_tdomain_spec_s>(),
        56usize,
        concat!("Size of: ", stringify!(netsnmp_tdomain_spec_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_tdomain_spec_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_tdomain_spec_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tdomain_spec_s>())).application as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tdomain_spec_s),
            "::",
            stringify!(application)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_tdomain_spec_s>())).target as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tdomain_spec_s),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_tdomain_spec_s>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tdomain_spec_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tdomain_spec_s>())).default_domain as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tdomain_spec_s),
            "::",
            stringify!(default_domain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tdomain_spec_s>())).default_target as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tdomain_spec_s),
            "::",
            stringify!(default_target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_tdomain_spec_s>())).source as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tdomain_spec_s),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tdomain_spec_s>())).transport_config as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tdomain_spec_s),
            "::",
            stringify!(transport_config)
        )
    );
}
impl Default for netsnmp_tdomain_spec_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_tdomain_spec = netsnmp_tdomain_spec_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_transport_s {
    pub domain: *const oid,
    pub domain_length: ::std::os::raw::c_int,
    pub local: *mut ::std::os::raw::c_void,
    pub local_length: ::std::os::raw::c_int,
    pub remote: *mut ::std::os::raw::c_void,
    pub remote_length: ::std::os::raw::c_int,
    pub sock: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_void,
    pub data_length: ::std::os::raw::c_int,
    pub msgMaxSize: size_t,
    pub base_transport: *mut netsnmp_transport_s,
    pub f_recv: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut netsnmp_transport_s,
            arg2: *mut ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
            arg4: *mut *mut ::std::os::raw::c_void,
            arg5: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub f_send: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut netsnmp_transport_s,
            arg2: *const ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
            arg4: *mut *mut ::std::os::raw::c_void,
            arg5: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub f_close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut netsnmp_transport_s) -> ::std::os::raw::c_int,
    >,
    pub f_open: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut netsnmp_transport_s) -> *mut netsnmp_transport_s,
    >,
    pub f_accept: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut netsnmp_transport_s) -> ::std::os::raw::c_int,
    >,
    pub f_fmtaddr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut netsnmp_transport_s,
            arg2: *const ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub f_config: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut netsnmp_transport_s,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub f_copy: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const netsnmp_transport_s,
            arg2: *mut netsnmp_transport_s,
        ) -> ::std::os::raw::c_int,
    >,
    pub f_setup_session: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut netsnmp_transport_s,
            arg2: *mut snmp_session,
        ) -> ::std::os::raw::c_int,
    >,
    pub identifier: *mut u_char,
    pub f_get_taddr: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut netsnmp_transport_s,
            addr: *mut *mut ::std::os::raw::c_void,
            addr_len: *mut size_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout_netsnmp_transport_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_transport_s>(),
        176usize,
        concat!("Size of: ", stringify!(netsnmp_transport_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_transport_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_transport_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).domain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_transport_s>())).domain_length as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(domain_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).local as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(local)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_transport_s>())).local_length as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(local_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).remote as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(remote)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_transport_s>())).remote_length as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(remote_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).sock as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(sock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).data_length as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(data_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).msgMaxSize as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(msgMaxSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_transport_s>())).base_transport as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(base_transport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).f_recv as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(f_recv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).f_send as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(f_send)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).f_close as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(f_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).f_open as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(f_open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).f_accept as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(f_accept)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).f_fmtaddr as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(f_fmtaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).f_config as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(f_config)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).f_copy as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(f_copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_transport_s>())).f_setup_session as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(f_setup_session)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).identifier as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_s>())).f_get_taddr as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_s),
            "::",
            stringify!(f_get_taddr)
        )
    );
}
impl Default for netsnmp_transport_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_transport = netsnmp_transport_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_transport_list_s {
    pub transport: *mut netsnmp_transport,
    pub next: *mut netsnmp_transport_list_s,
}
#[test]
fn bindgen_test_layout_netsnmp_transport_list_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_transport_list_s>(),
        16usize,
        concat!("Size of: ", stringify!(netsnmp_transport_list_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_transport_list_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_transport_list_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_transport_list_s>())).transport as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_list_s),
            "::",
            stringify!(transport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_list_s>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_list_s),
            "::",
            stringify!(next)
        )
    );
}
impl Default for netsnmp_transport_list_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_transport_list = netsnmp_transport_list_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_tdomain_s {
    pub name: *const oid,
    pub name_length: size_t,
    pub prefix: *mut *const ::std::os::raw::c_char,
    pub f_create_from_tstring: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> *mut netsnmp_transport,
    >,
    pub f_create_from_ostring: ::std::option::Option<
        unsafe extern "C" fn(
            o: *const ::std::os::raw::c_void,
            o_len: size_t,
            local: ::std::os::raw::c_int,
        ) -> *mut netsnmp_transport,
    >,
    pub next: *mut netsnmp_tdomain_s,
    pub f_create_from_tstring_new: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: *const ::std::os::raw::c_char,
        ) -> *mut netsnmp_transport,
    >,
    pub f_create_from_tspec: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut netsnmp_tdomain_spec) -> *mut netsnmp_transport,
    >,
}
#[test]
fn bindgen_test_layout_netsnmp_tdomain_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_tdomain_s>(),
        64usize,
        concat!("Size of: ", stringify!(netsnmp_tdomain_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_tdomain_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_tdomain_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_tdomain_s>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tdomain_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_tdomain_s>())).name_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tdomain_s),
            "::",
            stringify!(name_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_tdomain_s>())).prefix as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tdomain_s),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tdomain_s>())).f_create_from_tstring as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tdomain_s),
            "::",
            stringify!(f_create_from_tstring)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tdomain_s>())).f_create_from_ostring as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tdomain_s),
            "::",
            stringify!(f_create_from_ostring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_tdomain_s>())).next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tdomain_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tdomain_s>())).f_create_from_tstring_new as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tdomain_s),
            "::",
            stringify!(f_create_from_tstring_new)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_tdomain_s>())).f_create_from_tspec as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_tdomain_s),
            "::",
            stringify!(f_create_from_tspec)
        )
    );
}
impl Default for netsnmp_tdomain_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_tdomain = netsnmp_tdomain_s;
extern "C" {
    pub fn init_snmp_transport();
}
extern "C" {
    pub fn shutdown_snmp_transport();
}
extern "C" {
    pub fn netsnmp_transport_peer_string(
        t: *mut netsnmp_transport,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn netsnmp_transport_send(
        t: *mut netsnmp_transport,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
        opaque: *mut *mut ::std::os::raw::c_void,
        olength: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_transport_recv(
        t: *mut netsnmp_transport,
        data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
        opaque: *mut *mut ::std::os::raw::c_void,
        olength: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_transport_add_to_list(
        transport_list: *mut *mut netsnmp_transport_list,
        transport: *mut netsnmp_transport,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_transport_remove_from_list(
        transport_list: *mut *mut netsnmp_transport_list,
        transport: *mut netsnmp_transport,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_sockaddr_size(sa: *const sockaddr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_transport_copy(t: *const netsnmp_transport) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_transport_free(t: *mut netsnmp_transport);
}
extern "C" {
    pub fn netsnmp_transport_cache_get(
        af: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        local: ::std::os::raw::c_int,
        bind_addr: *const netsnmp_sockaddr_storage,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_transport_cache_save(
        af: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        local: ::std::os::raw::c_int,
        addr: *const netsnmp_sockaddr_storage,
        t: *mut netsnmp_transport,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_transport_cache_remove(t: *mut netsnmp_transport) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_tdomain_support(
        in_oid: *const oid,
        in_len: size_t,
        out_oid: *mut *const oid,
        out_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_tdomain_register(domain: *mut netsnmp_tdomain) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_tdomain_unregister(domain: *mut netsnmp_tdomain) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_clear_tdomain_list();
}
extern "C" {
    pub fn netsnmp_tdomain_init();
}
extern "C" {
    pub fn netsnmp_tdomain_transport(
        str_: *const ::std::os::raw::c_char,
        local: ::std::os::raw::c_int,
        default_domain: *const ::std::os::raw::c_char,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_tdomain_transport_full(
        application: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
        local: ::std::os::raw::c_int,
        default_domain: *const ::std::os::raw::c_char,
        default_target: *const ::std::os::raw::c_char,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_tdomain_transport_oid(
        dom: *const oid,
        dom_len: size_t,
        o: *const u_char,
        o_len: size_t,
        local: ::std::os::raw::c_int,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_tdomain_transport_tspec(
        tspec: *mut netsnmp_tdomain_spec,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_transport_open_client(
        application: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_transport_open_server(
        application: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_transport_open(
        application: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
        local: ::std::os::raw::c_int,
    ) -> *mut netsnmp_transport;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_transport_config_s {
    pub key: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_netsnmp_transport_config_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_transport_config_s>(),
        16usize,
        concat!("Size of: ", stringify!(netsnmp_transport_config_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_transport_config_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_transport_config_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_transport_config_s>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_config_s),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_transport_config_s>())).value as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_transport_config_s),
            "::",
            stringify!(value)
        )
    );
}
impl Default for netsnmp_transport_config_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_transport_config = netsnmp_transport_config_s;
extern "C" {
    pub fn netsnmp_transport_config_compare(
        left: *mut netsnmp_transport_config,
        right: *mut netsnmp_transport_config,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_transport_create_config(
        key: *mut ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
    ) -> *mut netsnmp_transport_config;
}
extern "C" {
    pub fn netsnmp_transport_parse_filterType(
        word: *const ::std::os::raw::c_char,
        cptr: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn netsnmp_transport_filter_add(
        addrtxt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_transport_filter_remove(
        addrtxt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_transport_filter_check(
        addrtxt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_transport_filter_cleanup();
}
extern "C" {
    pub fn netsnmp_register_default_domain(
        application: *const ::std::os::raw::c_char,
        domain: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_lookup_default_domain(
        application: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn netsnmp_lookup_default_domains(
        application: *const ::std::os::raw::c_char,
    ) -> *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn netsnmp_clear_default_domain();
}
extern "C" {
    pub fn netsnmp_register_default_target(
        application: *const ::std::os::raw::c_char,
        domain: *const ::std::os::raw::c_char,
        target: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_lookup_default_target(
        application: *const ::std::os::raw::c_char,
        domain: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn netsnmp_clear_default_target();
}
extern "C" {
    pub fn netsnmp_register_service_handlers();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_callback_pass_s {
    pub return_transport_num: ::std::os::raw::c_int,
    pub pdu: *mut netsnmp_pdu,
    pub next: *mut netsnmp_callback_pass_s,
}
#[test]
fn bindgen_test_layout_netsnmp_callback_pass_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_callback_pass_s>(),
        24usize,
        concat!("Size of: ", stringify!(netsnmp_callback_pass_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_callback_pass_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_callback_pass_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_callback_pass_s>())).return_transport_num as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_callback_pass_s),
            "::",
            stringify!(return_transport_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_callback_pass_s>())).pdu as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_callback_pass_s),
            "::",
            stringify!(pdu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_callback_pass_s>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_callback_pass_s),
            "::",
            stringify!(next)
        )
    );
}
impl Default for netsnmp_callback_pass_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_callback_pass = netsnmp_callback_pass_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_callback_info_s {
    pub linkedto: ::std::os::raw::c_int,
    pub parent_data: *mut ::std::os::raw::c_void,
    pub data: *mut netsnmp_callback_pass,
    pub callback_num: ::std::os::raw::c_int,
    pub pipefds: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_netsnmp_callback_info_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_callback_info_s>(),
        40usize,
        concat!("Size of: ", stringify!(netsnmp_callback_info_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_callback_info_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_callback_info_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_callback_info_s>())).linkedto as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_callback_info_s),
            "::",
            stringify!(linkedto)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_callback_info_s>())).parent_data as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_callback_info_s),
            "::",
            stringify!(parent_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_callback_info_s>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_callback_info_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_callback_info_s>())).callback_num as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_callback_info_s),
            "::",
            stringify!(callback_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_callback_info_s>())).pipefds as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_callback_info_s),
            "::",
            stringify!(pipefds)
        )
    );
}
impl Default for netsnmp_callback_info_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_callback_info = netsnmp_callback_info_s;
extern "C" {
    pub fn netsnmp_callback_transport(arg1: ::std::os::raw::c_int) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_callback_hook_parse(
        sp: *mut netsnmp_session,
        pdu: *mut netsnmp_pdu,
        packetptr: *mut u_char,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_callback_hook_build(
        sp: *mut netsnmp_session,
        pdu: *mut netsnmp_pdu,
        ptk: *mut u_char,
        len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_callback_check_packet(pkt: *mut u_char, len: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_callback_create_pdu(
        transport: *mut netsnmp_transport,
        opaque: *mut ::std::os::raw::c_void,
        olength: size_t,
    ) -> *mut netsnmp_pdu;
}
extern "C" {
    pub fn netsnmp_callback_open(
        attach_to: ::std::os::raw::c_int,
        return_func: ::std::option::Option<
            unsafe extern "C" fn(
                op: ::std::os::raw::c_int,
                session: *mut netsnmp_session,
                reqid: ::std::os::raw::c_int,
                pdu: *mut netsnmp_pdu,
                magic: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        fpre_parse: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_transport_s,
                arg3: *mut ::std::os::raw::c_void,
                arg4: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        fpost_parse: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_pdu,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut netsnmp_session;
}
extern "C" {
    pub fn netsnmp_clear_callback_list();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_un {
    pub sun_family: sa_family_t,
    pub sun_path: [::std::os::raw::c_char; 108usize],
}
#[test]
fn bindgen_test_layout_sockaddr_un() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_un>(),
        110usize,
        concat!("Size of: ", stringify!(sockaddr_un))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_un>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr_un))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_un>())).sun_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_un),
            "::",
            stringify!(sun_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_un>())).sun_path as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_un),
            "::",
            stringify!(sun_path)
        )
    );
}
impl Default for sockaddr_un {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rawmemchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memrchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchrnul(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: size_t,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: size_t,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strverscmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfry(__string: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memfrob(__s: *mut ::std::os::raw::c_void, __n: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn basename(__filename: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut netsnmp_UnixDomain: [oid; 0usize];
}
extern "C" {
    pub fn netsnmp_unix_transport(
        addr: *const sockaddr_un,
        local: ::std::os::raw::c_int,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_unix_agent_config_tokens_register();
}
extern "C" {
    pub fn netsnmp_unix_parse_security(
        token: *const ::std::os::raw::c_char,
        param: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn netsnmp_unix_getSecName(
        opaque: *mut ::std::os::raw::c_void,
        olength: ::std::os::raw::c_int,
        community: *const ::std::os::raw::c_char,
        community_len: size_t,
        secName: *mut *const ::std::os::raw::c_char,
        contextName: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_unix_ctor();
}
extern "C" {
    pub fn netsnmp_unix_create_path_with_mode(mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn netsnmp_unix_dont_create_path();
}
extern "C" {
    pub fn netsnmp_ipv4_fmtaddr(
        prefix: *const ::std::os::raw::c_char,
        t: *mut netsnmp_transport,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn netsnmp_ipv4_get_taddr(
        t: *mut netsnmp_transport_s,
        addr: *mut *mut ::std::os::raw::c_void,
        addr_len: *mut size_t,
    );
}
extern "C" {
    pub fn netsnmp_ipv4_ostring_to_sockaddr(
        sin: *mut sockaddr_in,
        o: *const ::std::os::raw::c_void,
        o_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_sockaddr_in(
        addr: *mut sockaddr_in,
        peername: *const ::std::os::raw::c_char,
        remote_port: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_sockaddr_in2(
        addr: *mut sockaddr_in,
        inpeername: *const ::std::os::raw::c_char,
        default_target: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udp_base_ctor();
}
extern "C" {
    pub fn _netsnmp_udp_sockopt_set(fd: ::std::os::raw::c_int, local: ::std::os::raw::c_int);
}
extern "C" {
    pub fn netsnmp_udpbase_recv(
        t: *mut netsnmp_transport,
        buf: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        opaque: *mut *mut ::std::os::raw::c_void,
        olength: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udpbase_send(
        t: *mut netsnmp_transport,
        buf: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        opaque: *mut *mut ::std::os::raw::c_void,
        olength: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udpbase_recvfrom(
        s: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
        from: *mut sockaddr,
        fromlen: *mut socklen_t,
        dstip: *mut sockaddr,
        dstlen: *mut socklen_t,
        if_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udpbase_sendto(
        fd: ::std::os::raw::c_int,
        srcip: *const in_addr,
        if_index: ::std::os::raw::c_int,
        remote: *const sockaddr,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udpipv4base_transport(
        addr: *const sockaddr_in,
        local: ::std::os::raw::c_int,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_udpipv4base_transport_with_source(
        addr: *const sockaddr_in,
        local: ::std::os::raw::c_int,
        src_addr: *const sockaddr_in,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_udpipv4base_tspec_transport(
        tspec: *mut netsnmp_tdomain_spec,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_udpipv4base_transport_init(
        addr: *const sockaddr_in,
        local: ::std::os::raw::c_int,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_udpipv4base_transport_socket(
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udpipv4base_transport_bind(
        t: *mut netsnmp_transport,
        addr: *const sockaddr_in,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udpipv4base_transport_get_bound_addr(t: *mut netsnmp_transport);
}
extern "C" {
    pub fn netsnmp_udpipv4_recvfrom(
        s: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
        from: *mut sockaddr,
        fromlen: *mut socklen_t,
        dstip: *mut sockaddr,
        dstlen: *mut socklen_t,
        if_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udpipv4_sendto(
        fd: ::std::os::raw::c_int,
        srcip: *const in_addr,
        if_index: ::std::os::raw::c_int,
        remote: *const sockaddr,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udp_transport(
        addr: *const sockaddr_in,
        local: ::std::os::raw::c_int,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_udp_create_tspec(tspec: *mut netsnmp_tdomain_spec) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_udp_transport_with_source(
        addr: *const sockaddr_in,
        local: ::std::os::raw::c_int,
        src_addr: *const sockaddr_in,
    ) -> *mut netsnmp_transport;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct com2SecEntry_s {
    _unused: [u8; 0],
}
pub type com2SecEntry = com2SecEntry_s;
extern "C" {
    pub fn netsnmp_udp_com2SecEntry_create(
        entryp: *mut *mut com2SecEntry,
        community: *const ::std::os::raw::c_char,
        secName: *const ::std::os::raw::c_char,
        contextName: *const ::std::os::raw::c_char,
        network: *mut in_addr,
        mask: *mut in_addr,
        negate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udp_com2Sec_free(e: *mut com2SecEntry);
}
extern "C" {
    pub fn netsnmp_udp_com2SecList_remove(e: *mut com2SecEntry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udp_agent_config_tokens_register();
}
extern "C" {
    pub fn netsnmp_udp_parse_security(
        token: *const ::std::os::raw::c_char,
        param: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn netsnmp_udp_getSecName(
        opaque: *mut ::std::os::raw::c_void,
        olength: ::std::os::raw::c_int,
        community: *const ::std::os::raw::c_char,
        community_len: size_t,
        secname: *mut *const ::std::os::raw::c_char,
        contextName: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udp_ctor();
}
extern "C" {
    pub fn netsnmp_udp_fmtaddr(
        t: *mut netsnmp_transport,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn netsnmp_udp_recvfrom(
        s: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
        from: *mut sockaddr,
        fromlen: *mut socklen_t,
        dstip: *mut sockaddr,
        dstlen: *mut socklen_t,
        if_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udp_sendto(
        fd: ::std::os::raw::c_int,
        srcip: *const in_addr,
        if_index: ::std::os::raw::c_int,
        remote: *const sockaddr,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut netsnmp_snmpTCPDomain: [oid; 0usize];
}
extern "C" {
    pub fn netsnmp_tcp_transport(
        addr: *const sockaddr_in,
        local: ::std::os::raw::c_int,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_tcp_ctor();
}
extern "C" {
    pub fn netsnmp_ipv6_fmtaddr(
        prefix: *const ::std::os::raw::c_char,
        t: *mut netsnmp_transport,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn netsnmp_ipv6_get_taddr(
        t: *mut netsnmp_transport_s,
        addr: *mut *mut ::std::os::raw::c_void,
        addr_len: *mut size_t,
    );
}
extern "C" {
    pub fn netsnmp_ipv6_ostring_to_sockaddr(
        sin6: *mut sockaddr_in6,
        o: *const ::std::os::raw::c_void,
        o_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_sockaddr_in6_2(
        addr: *mut sockaddr_in6,
        inpeername: *const ::std::os::raw::c_char,
        default_target: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_sockaddr_in6(
        addr: *mut sockaddr_in6,
        inpeername: *const ::std::os::raw::c_char,
        remote_port: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut netsnmp_UDPIPv6Domain: [oid; 0usize];
}
extern "C" {
    pub fn netsnmp_udp6_transport(
        addr: *const sockaddr_in6,
        local: ::std::os::raw::c_int,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_udp6_transport_with_source(
        addr: *const sockaddr_in6,
        local: ::std::os::raw::c_int,
        src_addr: *const sockaddr_in6,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_udp6_transport_init(
        addr: *const sockaddr_in6,
        local: ::std::os::raw::c_int,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_udp6_transport_socket(flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udp6_transport_bind(
        t: *mut netsnmp_transport,
        addr: *const sockaddr_in6,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udp6_transport_get_bound_addr(t: *mut netsnmp_transport);
}
extern "C" {
    pub fn netsnmp_udp6_agent_config_tokens_register();
}
extern "C" {
    pub fn netsnmp_udp6_parse_security(
        token: *const ::std::os::raw::c_char,
        param: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn netsnmp_udp6_getSecName(
        opaque: *mut ::std::os::raw::c_void,
        olength: ::std::os::raw::c_int,
        community: *const ::std::os::raw::c_char,
        community_len: ::std::os::raw::c_int,
        secname: *mut *const ::std::os::raw::c_char,
        contextName: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_udpipv6_ctor();
}
extern "C" {
    pub static mut netsnmp_TCPIPv6Domain: [oid; 0usize];
}
extern "C" {
    pub fn netsnmp_tcp6_transport(
        addr: *const sockaddr_in6,
        local: ::std::os::raw::c_int,
    ) -> *mut netsnmp_transport;
}
extern "C" {
    pub fn netsnmp_tcpipv6_ctor();
}
extern "C" {
    pub fn snmp_set_dump_packet(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snmp_get_dump_packet() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_set_quick_print(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snmp_get_quick_print() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_set_suffix_only(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snmp_get_suffix_only() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_set_full_objid(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snmp_get_full_objid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_set_random_access(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snmp_get_random_access() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_set_mib_warnings(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snmp_set_mib_errors(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snmp_set_save_descriptions(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snmp_set_mib_comment_term(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snmp_set_mib_parse_label(arg1: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct synch_state {
    pub waiting: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
    pub reqid: ::std::os::raw::c_int,
    pub pdu: *mut netsnmp_pdu,
}
#[test]
fn bindgen_test_layout_synch_state() {
    assert_eq!(
        ::std::mem::size_of::<synch_state>(),
        24usize,
        concat!("Size of: ", stringify!(synch_state))
    );
    assert_eq!(
        ::std::mem::align_of::<synch_state>(),
        8usize,
        concat!("Alignment of ", stringify!(synch_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<synch_state>())).waiting as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(synch_state),
            "::",
            stringify!(waiting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<synch_state>())).status as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(synch_state),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<synch_state>())).reqid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(synch_state),
            "::",
            stringify!(reqid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<synch_state>())).pdu as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(synch_state),
            "::",
            stringify!(pdu)
        )
    );
}
impl Default for synch_state {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn snmp_replace_var_types(
        vbl: *mut netsnmp_variable_list,
        old_type: u_char,
        new_type: u_char,
    );
}
extern "C" {
    pub fn snmp_reset_var_buffers(var: *mut netsnmp_variable_list);
}
extern "C" {
    pub fn snmp_reset_var_types(vbl: *mut netsnmp_variable_list, new_type: u_char);
}
extern "C" {
    pub fn count_varbinds(var_ptr: *mut netsnmp_variable_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn count_varbinds_of_type(
        var_ptr: *mut netsnmp_variable_list,
        type_: u_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_varbind_of_type(
        var_ptr: *mut netsnmp_variable_list,
        type_: u_char,
    ) -> *mut netsnmp_variable_list;
}
extern "C" {
    pub fn find_varbind_in_list(
        vblist: *mut netsnmp_variable_list,
        name: *const oid,
        len: size_t,
    ) -> *mut netsnmp_variable_list;
}
extern "C" {
    pub fn snmp_split_pdu(
        arg1: *mut netsnmp_pdu,
        skipCount: ::std::os::raw::c_int,
        copyCount: ::std::os::raw::c_int,
    ) -> *mut netsnmp_pdu;
}
extern "C" {
    pub fn snmp_varbind_len(pdu: *mut netsnmp_pdu) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn snmp_clone_var(
        arg1: *mut netsnmp_variable_list,
        arg2: *mut netsnmp_variable_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_synch_response_cb(
        arg1: *mut netsnmp_session,
        arg2: *mut netsnmp_pdu,
        arg3: *mut *mut netsnmp_pdu,
        arg4: snmp_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_clone_mem(
        arg1: *mut *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_query_set_default_session(arg1: *mut netsnmp_session);
}
extern "C" {
    pub fn netsnmp_query_get_default_session_unchecked() -> *mut netsnmp_session;
}
extern "C" {
    pub fn netsnmp_query_get_default_session() -> *mut netsnmp_session;
}
extern "C" {
    pub fn netsnmp_query_get(
        arg1: *mut netsnmp_variable_list,
        arg2: *mut netsnmp_session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_query_getnext(
        arg1: *mut netsnmp_variable_list,
        arg2: *mut netsnmp_session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_query_walk(
        arg1: *mut netsnmp_variable_list,
        arg2: *mut netsnmp_session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_query_set(
        arg1: *mut netsnmp_variable_list,
        arg2: *mut netsnmp_session,
    ) -> ::std::os::raw::c_int;
}
pub type netsnmp_state_machine_func = ::std::option::Option<
    unsafe extern "C" fn(
        input: *mut netsnmp_state_machine_input_s,
        step: *mut netsnmp_state_machine_step_s,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_state_machine_step_s {
    pub name: *const ::std::os::raw::c_char,
    pub sm_flags: u_int,
    pub run: netsnmp_state_machine_func,
    pub result: ::std::os::raw::c_int,
    pub on_success: *mut netsnmp_state_machine_step_s,
    pub on_error: *mut netsnmp_state_machine_step_s,
    pub flags: u_int,
    pub step_context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_netsnmp_state_machine_step_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_state_machine_step_s>(),
        64usize,
        concat!("Size of: ", stringify!(netsnmp_state_machine_step_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_state_machine_step_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_state_machine_step_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_state_machine_step_s>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_state_machine_step_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_state_machine_step_s>())).sm_flags as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_state_machine_step_s),
            "::",
            stringify!(sm_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_state_machine_step_s>())).run as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_state_machine_step_s),
            "::",
            stringify!(run)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_state_machine_step_s>())).result as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_state_machine_step_s),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_state_machine_step_s>())).on_success as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_state_machine_step_s),
            "::",
            stringify!(on_success)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_state_machine_step_s>())).on_error as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_state_machine_step_s),
            "::",
            stringify!(on_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_state_machine_step_s>())).flags as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_state_machine_step_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_state_machine_step_s>())).step_context as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_state_machine_step_s),
            "::",
            stringify!(step_context)
        )
    );
}
impl Default for netsnmp_state_machine_step_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_state_machine_step = netsnmp_state_machine_step_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_state_machine_input_s {
    pub name: *const ::std::os::raw::c_char,
    pub steps_so_far: ::std::os::raw::c_int,
    pub steps: *mut netsnmp_state_machine_step,
    pub cleanup: *mut netsnmp_state_machine_step,
    pub last_run: *mut netsnmp_state_machine_step,
    pub input_context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_netsnmp_state_machine_input_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_state_machine_input_s>(),
        48usize,
        concat!("Size of: ", stringify!(netsnmp_state_machine_input_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_state_machine_input_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_state_machine_input_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_state_machine_input_s>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_state_machine_input_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_state_machine_input_s>())).steps_so_far as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_state_machine_input_s),
            "::",
            stringify!(steps_so_far)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_state_machine_input_s>())).steps as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_state_machine_input_s),
            "::",
            stringify!(steps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_state_machine_input_s>())).cleanup as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_state_machine_input_s),
            "::",
            stringify!(cleanup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_state_machine_input_s>())).last_run as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_state_machine_input_s),
            "::",
            stringify!(last_run)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_state_machine_input_s>())).input_context as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_state_machine_input_s),
            "::",
            stringify!(input_context)
        )
    );
}
impl Default for netsnmp_state_machine_input_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_state_machine_input = netsnmp_state_machine_input_s;
extern "C" {
    pub fn netsnmp_state_machine_run(
        input: *mut netsnmp_state_machine_input,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_row_create(
        sess: *mut netsnmp_session,
        vars: *mut netsnmp_variable_list,
        row_status_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_mibdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_init_mib();
}
extern "C" {
    pub fn init_mib();
}
extern "C" {
    pub fn init_mib_internals();
}
extern "C" {
    pub fn shutdown_mib();
}
extern "C" {
    pub fn netsnmp_read_module(arg1: *const ::std::os::raw::c_char) -> *mut tree;
}
extern "C" {
    pub fn read_module(arg1: *const ::std::os::raw::c_char) -> *mut tree;
}
extern "C" {
    pub fn read_mib(arg1: *const ::std::os::raw::c_char) -> *mut tree;
}
extern "C" {
    pub fn read_all_mibs() -> *mut tree;
}
extern "C" {
    pub fn add_module_replacement(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn read_objid(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut oid,
        arg3: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_parse_oid(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut oid,
        arg3: *mut size_t,
    ) -> *mut oid;
}
extern "C" {
    pub fn get_module_node(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut oid,
        arg4: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn print_mib(fp: *mut FILE);
}
extern "C" {
    pub fn print_objid(objid: *const oid, objidlen: size_t);
}
extern "C" {
    pub fn fprint_objid(fp: *mut FILE, objid: *const oid, objidlen: size_t);
}
extern "C" {
    pub fn snprint_objid(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        objid: *const oid,
        objidlen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn print_description(objid: *mut oid, objidlen: size_t, width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fprint_description(
        fp: *mut FILE,
        objid: *mut oid,
        objidlen: size_t,
        width: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snprint_description(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        objid: *mut oid,
        objidlen: size_t,
        width: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct enum_list {
    pub next: *mut enum_list,
    pub value: ::std::os::raw::c_int,
    pub label: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_enum_list() {
    assert_eq!(
        ::std::mem::size_of::<enum_list>(),
        24usize,
        concat!("Size of: ", stringify!(enum_list))
    );
    assert_eq!(
        ::std::mem::align_of::<enum_list>(),
        8usize,
        concat!("Alignment of ", stringify!(enum_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<enum_list>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(enum_list),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<enum_list>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(enum_list),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<enum_list>())).label as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(enum_list),
            "::",
            stringify!(label)
        )
    );
}
impl Default for enum_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct range_list {
    pub next: *mut range_list,
    pub low: ::std::os::raw::c_int,
    pub high: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_range_list() {
    assert_eq!(
        ::std::mem::size_of::<range_list>(),
        16usize,
        concat!("Size of: ", stringify!(range_list))
    );
    assert_eq!(
        ::std::mem::align_of::<range_list>(),
        8usize,
        concat!("Alignment of ", stringify!(range_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<range_list>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(range_list),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<range_list>())).low as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(range_list),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<range_list>())).high as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(range_list),
            "::",
            stringify!(high)
        )
    );
}
impl Default for range_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct index_list {
    pub next: *mut index_list,
    pub ilabel: *mut ::std::os::raw::c_char,
    pub isimplied: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_index_list() {
    assert_eq!(
        ::std::mem::size_of::<index_list>(),
        24usize,
        concat!("Size of: ", stringify!(index_list))
    );
    assert_eq!(
        ::std::mem::align_of::<index_list>(),
        8usize,
        concat!("Alignment of ", stringify!(index_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<index_list>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(index_list),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<index_list>())).ilabel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(index_list),
            "::",
            stringify!(ilabel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<index_list>())).isimplied as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(index_list),
            "::",
            stringify!(isimplied)
        )
    );
}
impl Default for index_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct varbind_list {
    pub next: *mut varbind_list,
    pub vblabel: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_varbind_list() {
    assert_eq!(
        ::std::mem::size_of::<varbind_list>(),
        16usize,
        concat!("Size of: ", stringify!(varbind_list))
    );
    assert_eq!(
        ::std::mem::align_of::<varbind_list>(),
        8usize,
        concat!("Alignment of ", stringify!(varbind_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varbind_list>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(varbind_list),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varbind_list>())).vblabel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(varbind_list),
            "::",
            stringify!(vblabel)
        )
    );
}
impl Default for varbind_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tree {
    pub child_list: *mut tree,
    pub next_peer: *mut tree,
    pub next: *mut tree,
    pub parent: *mut tree,
    pub label: *mut ::std::os::raw::c_char,
    pub subid: u_long,
    pub modid: ::std::os::raw::c_int,
    pub number_modules: ::std::os::raw::c_int,
    pub module_list: *mut ::std::os::raw::c_int,
    pub tc_index: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub access: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
    pub enums: *mut enum_list,
    pub ranges: *mut range_list,
    pub indexes: *mut index_list,
    pub augments: *mut ::std::os::raw::c_char,
    pub varbinds: *mut varbind_list,
    pub hint: *mut ::std::os::raw::c_char,
    pub units: *mut ::std::os::raw::c_char,
    pub printomat: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut *mut u_char,
            arg2: *mut size_t,
            arg3: *mut size_t,
            arg4: ::std::os::raw::c_int,
            arg5: *const netsnmp_variable_list,
            arg6: *const enum_list,
            arg7: *const ::std::os::raw::c_char,
            arg8: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub printer: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_char,
            arg2: *const netsnmp_variable_list,
            arg3: *const enum_list,
            arg4: *const ::std::os::raw::c_char,
            arg5: *const ::std::os::raw::c_char,
        ),
    >,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
    pub reported: ::std::os::raw::c_int,
    pub defaultValue: *mut ::std::os::raw::c_char,
    pub parseErrorString: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tree() {
    assert_eq!(
        ::std::mem::size_of::<tree>(),
        192usize,
        concat!("Size of: ", stringify!(tree))
    );
    assert_eq!(
        ::std::mem::align_of::<tree>(),
        8usize,
        concat!("Alignment of ", stringify!(tree))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).child_list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(child_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).next_peer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(next_peer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).parent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).label as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).subid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(subid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).modid as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(modid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).number_modules as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(number_modules)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).module_list as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(module_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).tc_index as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(tc_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).type_ as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).access as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).status as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).enums as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(enums)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).ranges as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(ranges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).indexes as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(indexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).augments as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(augments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).varbinds as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(varbinds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).hint as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(hint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).units as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(units)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).printomat as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(printomat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).printer as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(printer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).description as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).reference as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).reported as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(reported)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).defaultValue as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(defaultValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).parseErrorString as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(parseErrorString)
        )
    );
}
impl Default for tree {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module_import {
    pub label: *mut ::std::os::raw::c_char,
    pub modid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_module_import() {
    assert_eq!(
        ::std::mem::size_of::<module_import>(),
        16usize,
        concat!("Size of: ", stringify!(module_import))
    );
    assert_eq!(
        ::std::mem::align_of::<module_import>(),
        8usize,
        concat!("Alignment of ", stringify!(module_import))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<module_import>())).label as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(module_import),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<module_import>())).modid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(module_import),
            "::",
            stringify!(modid)
        )
    );
}
impl Default for module_import {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module {
    pub name: *mut ::std::os::raw::c_char,
    pub file: *mut ::std::os::raw::c_char,
    pub imports: *mut module_import,
    pub no_imports: ::std::os::raw::c_int,
    pub modid: ::std::os::raw::c_int,
    pub next: *mut module,
}
#[test]
fn bindgen_test_layout_module() {
    assert_eq!(
        ::std::mem::size_of::<module>(),
        40usize,
        concat!("Size of: ", stringify!(module))
    );
    assert_eq!(
        ::std::mem::align_of::<module>(),
        8usize,
        concat!("Alignment of ", stringify!(module))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<module>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(module),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<module>())).file as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(module),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<module>())).imports as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(module),
            "::",
            stringify!(imports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<module>())).no_imports as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(module),
            "::",
            stringify!(no_imports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<module>())).modid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(module),
            "::",
            stringify!(modid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<module>())).next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(module),
            "::",
            stringify!(next)
        )
    );
}
impl Default for module {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module_compatability {
    pub old_module: *const ::std::os::raw::c_char,
    pub new_module: *const ::std::os::raw::c_char,
    pub tag: *const ::std::os::raw::c_char,
    pub tag_len: size_t,
    pub next: *mut module_compatability,
}
#[test]
fn bindgen_test_layout_module_compatability() {
    assert_eq!(
        ::std::mem::size_of::<module_compatability>(),
        40usize,
        concat!("Size of: ", stringify!(module_compatability))
    );
    assert_eq!(
        ::std::mem::align_of::<module_compatability>(),
        8usize,
        concat!("Alignment of ", stringify!(module_compatability))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<module_compatability>())).old_module as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(module_compatability),
            "::",
            stringify!(old_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<module_compatability>())).new_module as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(module_compatability),
            "::",
            stringify!(new_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<module_compatability>())).tag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(module_compatability),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<module_compatability>())).tag_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(module_compatability),
            "::",
            stringify!(tag_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<module_compatability>())).next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(module_compatability),
            "::",
            stringify!(next)
        )
    );
}
impl Default for module_compatability {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn netsnmp_unload_module(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unload_module(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_init_mib_internals();
}
extern "C" {
    pub fn unload_all_mibs();
}
extern "C" {
    pub fn add_mibfile(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn which_module(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn module_name(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn print_subtree(arg1: *mut FILE, arg2: *mut tree, arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn print_ascii_dump_tree(arg1: *mut FILE, arg2: *mut tree, arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn find_tree_node(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut tree;
}
extern "C" {
    pub fn get_tc_descriptor(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_tc_description(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn find_best_tree_node(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut tree,
        arg3: *mut u_int,
    ) -> *mut tree;
}
extern "C" {
    pub fn find_node(arg1: *const ::std::os::raw::c_char, arg2: *mut tree) -> *mut tree;
}
extern "C" {
    pub fn find_node2(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut tree;
}
extern "C" {
    pub fn find_module(arg1: ::std::os::raw::c_int) -> *mut module;
}
extern "C" {
    pub fn adopt_orphans();
}
extern "C" {
    pub fn snmp_mib_toggle_options(
        options: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn snmp_mib_toggle_options_usage(lead: *const ::std::os::raw::c_char, outf: *mut FILE);
}
extern "C" {
    pub fn print_mib_tree(arg1: *mut FILE, arg2: *mut tree, arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_mib_parse_error_count() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_get_token(
        fp: *mut FILE,
        token: *mut ::std::os::raw::c_char,
        maxtlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type NetSNMPStashDump = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut netsnmp_oid_stash_node_s,
    ) -> ::std::os::raw::c_int,
>;
pub type NetSNMPStashFreeNode =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_oid_stash_node_s {
    pub value: oid,
    pub children: *mut *mut netsnmp_oid_stash_node_s,
    pub children_size: size_t,
    pub next_sibling: *mut netsnmp_oid_stash_node_s,
    pub prev_sibling: *mut netsnmp_oid_stash_node_s,
    pub parent: *mut netsnmp_oid_stash_node_s,
    pub thedata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_netsnmp_oid_stash_node_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_oid_stash_node_s>(),
        56usize,
        concat!("Size of: ", stringify!(netsnmp_oid_stash_node_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_oid_stash_node_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_oid_stash_node_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_oid_stash_node_s>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_oid_stash_node_s),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_oid_stash_node_s>())).children as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_oid_stash_node_s),
            "::",
            stringify!(children)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_oid_stash_node_s>())).children_size as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_oid_stash_node_s),
            "::",
            stringify!(children_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_oid_stash_node_s>())).next_sibling as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_oid_stash_node_s),
            "::",
            stringify!(next_sibling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_oid_stash_node_s>())).prev_sibling as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_oid_stash_node_s),
            "::",
            stringify!(prev_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_oid_stash_node_s>())).parent as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_oid_stash_node_s),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_oid_stash_node_s>())).thedata as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_oid_stash_node_s),
            "::",
            stringify!(thedata)
        )
    );
}
impl Default for netsnmp_oid_stash_node_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_oid_stash_node = netsnmp_oid_stash_node_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_oid_stash_save_info_s {
    pub token: *const ::std::os::raw::c_char,
    pub root: *mut *mut netsnmp_oid_stash_node,
    pub dumpfn: NetSNMPStashDump,
}
#[test]
fn bindgen_test_layout_netsnmp_oid_stash_save_info_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_oid_stash_save_info_s>(),
        24usize,
        concat!("Size of: ", stringify!(netsnmp_oid_stash_save_info_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_oid_stash_save_info_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_oid_stash_save_info_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_oid_stash_save_info_s>())).token as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_oid_stash_save_info_s),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_oid_stash_save_info_s>())).root as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_oid_stash_save_info_s),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_oid_stash_save_info_s>())).dumpfn as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_oid_stash_save_info_s),
            "::",
            stringify!(dumpfn)
        )
    );
}
impl Default for netsnmp_oid_stash_save_info_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_oid_stash_save_info = netsnmp_oid_stash_save_info_s;
extern "C" {
    pub fn netsnmp_oid_stash_add_data(
        root: *mut *mut netsnmp_oid_stash_node,
        lookup: *const oid,
        lookup_len: size_t,
        mydata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_oid_stash_store_all(
        majorID: ::std::os::raw::c_int,
        minorID: ::std::os::raw::c_int,
        serverarg: *mut ::std::os::raw::c_void,
        clientarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_oid_stash_get_node(
        root: *mut netsnmp_oid_stash_node,
        lookup: *const oid,
        lookup_len: size_t,
    ) -> *mut netsnmp_oid_stash_node;
}
extern "C" {
    pub fn netsnmp_oid_stash_get_data(
        root: *mut netsnmp_oid_stash_node,
        lookup: *const oid,
        lookup_len: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn netsnmp_oid_stash_getnext_node(
        root: *mut netsnmp_oid_stash_node,
        lookup: *mut oid,
        lookup_len: size_t,
    ) -> *mut netsnmp_oid_stash_node;
}
extern "C" {
    pub fn netsnmp_oid_stash_create_sized_node(mysize: size_t) -> *mut netsnmp_oid_stash_node;
}
extern "C" {
    pub fn netsnmp_oid_stash_create_node() -> *mut netsnmp_oid_stash_node;
}
extern "C" {
    pub fn netsnmp_oid_stash_store(
        root: *mut netsnmp_oid_stash_node,
        tokenname: *const ::std::os::raw::c_char,
        dumpfn: NetSNMPStashDump,
        curoid: *mut oid,
        curoid_len: size_t,
    );
}
extern "C" {
    pub fn netsnmp_oid_stash_free(
        root: *mut *mut netsnmp_oid_stash_node,
        freefn: NetSNMPStashFreeNode,
    );
}
extern "C" {
    pub fn netsnmp_oid_stash_no_free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn print_ascii_dump(arg1: *mut FILE);
}
extern "C" {
    pub fn register_mib_handlers();
}
extern "C" {
    pub fn netsnmp_set_mib_directory(dir: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn netsnmp_get_mib_directory() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn netsnmp_fixup_mib_directory();
}
extern "C" {
    pub fn netsnmp_mibindex_load();
}
extern "C" {
    pub fn netsnmp_mibindex_lookup(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn netsnmp_mibindex_new(arg1: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn sprint_realloc_description(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        objid: *mut oid,
        objidlen: size_t,
        width: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_wild_node(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut oid,
        arg3: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_node(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut oid,
        arg3: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_tree(arg1: *const oid, arg2: size_t, arg3: *mut tree) -> *mut tree;
}
extern "C" {
    pub fn get_tree_head() -> *mut tree;
}
extern "C" {
    pub fn set_function(arg1: *mut tree);
}
extern "C" {
    pub fn parse_one_oid_index(
        oidStart: *mut *mut oid,
        oidLen: *mut size_t,
        data: *mut netsnmp_variable_list,
        complete: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_oid_indexes(
        oidIndex: *mut oid,
        oidLen: size_t,
        data: *mut netsnmp_variable_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn build_oid_noalloc(
        in_: *mut oid,
        in_len: size_t,
        out_len: *mut size_t,
        prefix: *mut oid,
        prefix_len: size_t,
        indexes: *mut netsnmp_variable_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn build_oid(
        out: *mut *mut oid,
        out_len: *mut size_t,
        prefix: *mut oid,
        prefix_len: size_t,
        indexes: *mut netsnmp_variable_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn build_oid_segment(var: *mut netsnmp_variable_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_variable(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        objid: *const oid,
        objidlen: size_t,
        variable: *const netsnmp_variable_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_sprint_realloc_objid_tree(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        buf_overflow: *mut ::std::os::raw::c_int,
        objid: *const oid,
        objidlen: size_t,
    ) -> *mut tree;
}
extern "C" {
    pub fn netsnmp_sprint_realloc_objid(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        buf_overflow: *mut ::std::os::raw::c_int,
        objid: *const oid,
        objidlen: size_t,
    );
}
extern "C" {
    pub fn sprint_realloc_value(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        objid: *const oid,
        objidlen: size_t,
        variable: *const netsnmp_variable_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_objid(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        objid: *const oid,
        objidlen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_by_type(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        var: *const netsnmp_variable_list,
        enums: *const enum_list,
        hint: *const ::std::os::raw::c_char,
        units: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_hexstring(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const u_char,
        arg2: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_asciistring(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        cp: *const u_char,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_octet_string(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_opaque(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_object_identifier(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_timeticks(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_hinted_integer(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_integer(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_uinteger(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_gauge(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_counter(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_networkaddress(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_ipaddress(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_null(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_bitstring(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_nsapaddress(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_counter64(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_badtype(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_float(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprint_realloc_double(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_by_type(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        var: *mut netsnmp_variable_list,
        enums: *const enum_list,
        hint: *const ::std::os::raw::c_char,
        units: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_hexstring(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const u_char,
        arg2: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_asciistring(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        cp: *const u_char,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_octet_string(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_opaque(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_object_identifier(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_timeticks(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_hinted_integer(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: ::std::os::raw::c_long,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_integer(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_uinteger(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_gauge(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_counter(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_networkaddress(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_ipaddress(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_null(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_bitstring(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_nsapaddress(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_counter64(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_badtype(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_float(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprint_double(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *const netsnmp_variable_list,
        arg2: *const enum_list,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn print_oid_report(arg1: *mut FILE);
}
extern "C" {
    pub fn print_oid_report_enable_labeledoid();
}
extern "C" {
    pub fn print_oid_report_enable_oid();
}
extern "C" {
    pub fn print_oid_report_enable_suffix();
}
extern "C" {
    pub fn print_oid_report_enable_symbolic();
}
extern "C" {
    pub fn print_oid_report_enable_mibchildoid();
}
extern "C" {
    pub fn parse_octet_hint(
        hint: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        new_val: *mut *mut ::std::os::raw::c_uchar,
        new_val_len: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn clear_tree_flags(tp: *mut tree);
}
extern "C" {
    pub fn snmp_out_toggle_options(
        arg1: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn snmp_out_options(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn snmp_out_toggle_options_usage(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE);
}
extern "C" {
    pub fn snmp_in_toggle_options(arg1: *mut ::std::os::raw::c_char)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn snmp_in_options(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn snmp_in_toggle_options_usage(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE);
}
extern "C" {
    pub fn mib_to_asn_type(mib_type: ::std::os::raw::c_int) -> u_char;
}
extern "C" {
    pub fn netsnmp_str2oid(
        S: *const ::std::os::raw::c_char,
        O: *mut oid,
        L: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn make_printf_format_string(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn snmp_set_detail(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn netsnmp_malloc(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn netsnmp_calloc(nelem: size_t, elsize: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn netsnmp_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn netsnmp_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn netsnmp_strdup(s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn netsnmp_random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn netsnmp_srandom(seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn snmp_free_var_internals(arg1: *mut netsnmp_variable_list);
}
extern "C" {
    pub fn snmp_get_next_msgid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snmp_get_next_reqid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snmp_get_next_sessid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snmp_get_next_transid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn netsnmp_max_send_msg_size() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_oid_compare(
        arg1: *const oid,
        arg2: size_t,
        arg3: *const oid,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_oid_ncompare(
        arg1: *const oid,
        arg2: size_t,
        arg3: *const oid,
        arg4: size_t,
        arg5: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_oidtree_compare(
        arg1: *const oid,
        arg2: size_t,
        arg3: *const oid,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_oidsubtree_compare(
        arg1: *const oid,
        arg2: size_t,
        arg3: *const oid,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_oid_compare_ll(
        in_name1: *const oid,
        len1: size_t,
        in_name2: *const oid,
        len2: size_t,
        offpt: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_oid_equals(
        arg1: *const oid,
        arg2: size_t,
        arg3: *const oid,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_oid_tree_equals(
        arg1: *const oid,
        arg2: size_t,
        arg3: *const oid,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_oid_is_subtree(
        arg1: *const oid,
        arg2: size_t,
        arg3: *const oid,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_oid_find_prefix(
        in_name1: *const oid,
        len1: size_t,
        in_name2: *const oid,
        len2: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_snmp(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn snmp_build(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        pss: *mut netsnmp_session,
        pdu: *mut netsnmp_pdu,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_pdu_build(
        arg1: *mut netsnmp_pdu,
        arg2: *mut u_char,
        arg3: *mut size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn snmp_pdu_rbuild(
        arg1: *mut netsnmp_pdu,
        arg2: *mut u_char,
        arg3: *mut size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn snmpv3_parse(
        arg1: *mut netsnmp_pdu,
        arg2: *mut u_char,
        arg3: *mut size_t,
        arg4: *mut *mut u_char,
        arg5: *mut netsnmp_session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmpv3_packet_build(
        arg1: *mut netsnmp_session,
        pdu: *mut netsnmp_pdu,
        packet: *mut u_char,
        out_length: *mut size_t,
        pdu_data: *mut u_char,
        pdu_data_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmpv3_packet_rbuild(
        arg1: *mut netsnmp_session,
        pdu: *mut netsnmp_pdu,
        packet: *mut u_char,
        out_length: *mut size_t,
        pdu_data: *mut u_char,
        pdu_data_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmpv3_make_report(
        pdu: *mut netsnmp_pdu,
        error: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmpv3_get_report_type(pdu: *mut netsnmp_pdu) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_pdu_parse(
        pdu: *mut netsnmp_pdu,
        data: *mut u_char,
        length: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmpv3_scopedPDU_parse(
        pdu: *mut netsnmp_pdu,
        cp: *mut u_char,
        length: *mut size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn snmp_store_needed(type_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn snmp_store_if_needed();
}
extern "C" {
    pub fn snmp_store(type_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn snmp_shutdown(type_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn snmp_add_var(
        arg1: *mut netsnmp_pdu,
        arg2: *const oid,
        arg3: size_t,
        arg4: ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_duplicate_objid(objToCopy: *const oid, arg1: size_t) -> *mut oid;
}
extern "C" {
    pub fn snmp_increment_statistic(which: ::std::os::raw::c_int) -> u_int;
}
extern "C" {
    pub fn snmp_increment_statistic_by(
        which: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ) -> u_int;
}
extern "C" {
    pub fn snmp_get_statistic(which: ::std::os::raw::c_int) -> u_int;
}
extern "C" {
    pub fn snmp_init_statistics();
}
extern "C" {
    pub fn create_user_from_session(session: *mut netsnmp_session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmpv3_probe_contextEngineID_rfc5343(
        slp: *mut ::std::os::raw::c_void,
        session: *mut netsnmp_session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmpv3_packet_realloc_rbuild(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        session: *mut netsnmp_session,
        pdu: *mut netsnmp_pdu,
        pdu_data: *mut u_char,
        pdu_data_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_pdu_realloc_rbuild(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        pdu: *mut netsnmp_pdu,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_open_ex(
        arg1: *mut netsnmp_session,
        fpre_parse: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_transport_s,
                arg3: *mut ::std::os::raw::c_void,
                arg4: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        fparse: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_pdu,
                arg3: *mut u_char,
                arg4: size_t,
            ) -> ::std::os::raw::c_int,
        >,
        fpost_parse: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_pdu,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        fbuild: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_pdu,
                arg3: *mut u_char,
                arg4: *mut size_t,
            ) -> ::std::os::raw::c_int,
        >,
        frbuild: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_pdu,
                arg3: *mut *mut u_char,
                arg4: *mut size_t,
                arg5: *mut size_t,
            ) -> ::std::os::raw::c_int,
        >,
        fcheck: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut u_char, arg2: size_t) -> ::std::os::raw::c_int,
        >,
    ) -> *mut netsnmp_session;
}
extern "C" {
    pub fn netsnmp_sess_log_error(
        priority: ::std::os::raw::c_int,
        prog_string: *const ::std::os::raw::c_char,
        ss: *mut netsnmp_session,
    );
}
extern "C" {
    pub fn snmp_pdu_type(type_: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snmp_sess_transport(arg1: *mut ::std::os::raw::c_void) -> *mut netsnmp_transport_s;
}
extern "C" {
    pub fn snmp_sess_transport_set(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut netsnmp_transport_s,
    );
}
extern "C" {
    pub fn netsnmp_sess_config_transport(
        transport_configuration: *mut netsnmp_container_s,
        transport: *mut netsnmp_transport_s,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_sess_config_and_open_transport(
        in_session: *mut netsnmp_session,
        transport: *mut netsnmp_transport_s,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_sess_add_ex(
        arg1: *mut netsnmp_session,
        arg2: *mut netsnmp_transport_s,
        fpre_parse: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_transport_s,
                arg3: *mut ::std::os::raw::c_void,
                arg4: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        fparse: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut snmp_pdu,
                arg3: *mut u_char,
                arg4: size_t,
            ) -> ::std::os::raw::c_int,
        >,
        fpost_parse: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut snmp_pdu,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        fbuild: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut snmp_pdu,
                arg3: *mut u_char,
                arg4: *mut size_t,
            ) -> ::std::os::raw::c_int,
        >,
        frbuild: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut snmp_pdu,
                arg3: *mut *mut u_char,
                arg4: *mut size_t,
                arg5: *mut size_t,
            ) -> ::std::os::raw::c_int,
        >,
        fcheck: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut u_char, arg2: size_t) -> ::std::os::raw::c_int,
        >,
        fcreate_pdu: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_transport_s,
                arg2: *mut ::std::os::raw::c_void,
                arg3: size_t,
            ) -> *mut netsnmp_pdu,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn snmp_sess_add(
        arg1: *mut netsnmp_session,
        arg2: *mut netsnmp_transport_s,
        fpre_parse: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_transport_s,
                arg3: *mut ::std::os::raw::c_void,
                arg4: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        fpost_parse: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_pdu,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn snmp_add(
        arg1: *mut netsnmp_session,
        arg2: *mut netsnmp_transport_s,
        fpre_parse: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_transport_s,
                arg3: *mut ::std::os::raw::c_void,
                arg4: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        fpost_parse: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_pdu,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut netsnmp_session;
}
extern "C" {
    pub fn snmp_add_full(
        in_session: *mut netsnmp_session,
        transport: *mut netsnmp_transport_s,
        fpre_parse: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_transport_s,
                arg3: *mut ::std::os::raw::c_void,
                arg4: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        fparse: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_pdu,
                arg3: *mut u_char,
                arg4: size_t,
            ) -> ::std::os::raw::c_int,
        >,
        fpost_parse: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_pdu,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        fbuild: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_pdu,
                arg3: *mut u_char,
                arg4: *mut size_t,
            ) -> ::std::os::raw::c_int,
        >,
        frbuild: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_session,
                arg2: *mut netsnmp_pdu,
                arg3: *mut *mut u_char,
                arg4: *mut size_t,
                arg5: *mut size_t,
            ) -> ::std::os::raw::c_int,
        >,
        fcheck: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut u_char, arg2: size_t) -> ::std::os::raw::c_int,
        >,
        fcreate_pdu: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut netsnmp_transport_s,
                arg2: *mut ::std::os::raw::c_void,
                arg3: size_t,
            ) -> *mut netsnmp_pdu,
        >,
    ) -> *mut netsnmp_session;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session_list {
    pub next: *mut session_list,
    pub session: *mut netsnmp_session,
    pub transport: *mut netsnmp_transport,
    pub internal: *mut snmp_internal_session,
}
#[test]
fn bindgen_test_layout_session_list() {
    assert_eq!(
        ::std::mem::size_of::<session_list>(),
        32usize,
        concat!("Size of: ", stringify!(session_list))
    );
    assert_eq!(
        ::std::mem::align_of::<session_list>(),
        8usize,
        concat!("Alignment of ", stringify!(session_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_list>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(session_list),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_list>())).session as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(session_list),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_list>())).transport as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(session_list),
            "::",
            stringify!(transport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_list>())).internal as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(session_list),
            "::",
            stringify!(internal)
        )
    );
}
impl Default for session_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub static mut sid: [u_char; 0usize];
}
extern "C" {
    pub static mut snmp_errno: ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_comstr_parse(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: *mut u_char,
        arg4: *mut size_t,
        arg5: *mut ::std::os::raw::c_long,
    ) -> *mut u_char;
}
extern "C" {
    pub fn snmp_comstr_build(
        arg1: *mut u_char,
        arg2: *mut size_t,
        arg3: *mut u_char,
        arg4: *mut size_t,
        arg5: *mut ::std::os::raw::c_long,
        arg6: size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn has_access(
        arg1: u_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uptime_string(
        arg1: u_long,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn uptime_string_n(
        arg1: u_long,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xdump(
        arg1: *const ::std::os::raw::c_void,
        arg2: size_t,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn snmp_parse_var_op(
        arg1: *mut u_char,
        arg2: *mut oid,
        arg3: *mut size_t,
        arg4: *mut u_char,
        arg5: *mut size_t,
        arg6: *mut *mut u_char,
        arg7: *mut size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn snmp_build_var_op(
        arg1: *mut u_char,
        arg2: *mut oid,
        arg3: *mut size_t,
        arg4: u_char,
        arg5: size_t,
        arg6: *mut u_char,
        arg7: *mut size_t,
    ) -> *mut u_char;
}
extern "C" {
    pub fn snmp_realloc_rbuild_var_op(
        pkt: *mut *mut u_char,
        pkt_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        name: *const oid,
        name_len: *mut size_t,
        value_type: u_char,
        value: *mut u_char,
        value_length: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_dateandtime_set_buf_from_vars(
        buf: *mut u_char,
        bufsize: *mut size_t,
        y: u_short,
        mon: u_char,
        d: u_char,
        h: u_char,
        min: u_char,
        s: u_char,
        deci_seconds: u_char,
        utc_offset_direction: ::std::os::raw::c_int,
        utc_offset_hours: u_char,
        utc_offset_minutes: u_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn date_n_time(arg1: *const time_t, arg2: *mut size_t) -> *mut u_char;
}
extern "C" {
    pub fn ctime_to_timet(arg1: *const ::std::os::raw::c_char) -> time_t;
}
extern "C" {
    pub fn check_rowstatus_transition(
        old_val: ::std::os::raw::c_int,
        new_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn check_rowstatus_with_storagetype_transition(
        old_val: ::std::os::raw::c_int,
        new_val: ::std::os::raw::c_int,
        old_storage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn check_storage_transition(
        old_val: ::std::os::raw::c_int,
        new_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct option {
    pub name: *const ::std::os::raw::c_char,
    pub has_arg: ::std::os::raw::c_int,
    pub flag: *mut ::std::os::raw::c_int,
    pub val: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_option() {
    assert_eq!(
        ::std::mem::size_of::<option>(),
        32usize,
        concat!("Size of: ", stringify!(option))
    );
    assert_eq!(
        ::std::mem::align_of::<option>(),
        8usize,
        concat!("Alignment of ", stringify!(option))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option>())).has_arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(has_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option>())).flag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option>())).val as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(val)
        )
    );
}
impl Default for option {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn getopt_long(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
        __longopts: *const option,
        __longind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt_long_only(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
        __longopts: *const option,
        __longind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_daemonize(
        quit_immediately: ::std::os::raw::c_int,
        stderr_log: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_gethostbyname_v4(
        name: *const ::std::os::raw::c_char,
        addr_out: *mut in_addr_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn netsnmp_gethostbyname(name: *const ::std::os::raw::c_char) -> *mut hostent;
}
extern "C" {
    pub fn netsnmp_gethostbyaddr(
        addr: *const ::std::os::raw::c_void,
        len: socklen_t,
        type_: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn netsnmp_getaddrinfo(
        name: *const ::std::os::raw::c_char,
        service: *const ::std::os::raw::c_char,
        hints: *const addrinfo,
        res: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_myaddr() -> in_addr_t;
}
extern "C" {
    pub fn get_uptime() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn calculate_time_diff(arg1: *const timeval, arg2: *const timeval)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn calculate_sectime_diff(now: *const timeval, then: *const timeval) -> u_int;
}
extern "C" {
    pub fn mkdirhier(
        pathname: *const ::std::os::raw::c_char,
        mode: mode_t,
        skiplast: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_mktemp() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn strlcat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn netsnmp_os_prematch(
        ospmname: *const ::std::os::raw::c_char,
        ospmrelprefix: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_os_kernel_width() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_str_to_uid(useroruid: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_str_to_gid(grouporgid: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_realloc(buf: *mut *mut u_char, buf_len: *mut size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_zero(buf: *mut ::std::os::raw::c_void, size: size_t);
}
extern "C" {
    pub fn malloc_random(size: *mut size_t) -> *mut u_char;
}
extern "C" {
    pub fn malloc_zero(size: size_t) -> *mut u_char;
}
extern "C" {
    pub fn netsnmp_memdup(
        from: *const ::std::os::raw::c_void,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn netsnmp_memdup_nt(
        from: *const ::std::os::raw::c_void,
        from_len: size_t,
        to_len: *mut size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn netsnmp_check_definedness(packet: *const ::std::os::raw::c_void, length: size_t);
}
extern "C" {
    pub fn netsnmp_binary_to_hex(
        dest: *mut *mut u_char,
        dest_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        input: *const u_char,
        len: size_t,
    ) -> u_int;
}
extern "C" {
    pub fn binary_to_hex(
        input: *const u_char,
        len: size_t,
        output: *mut *mut ::std::os::raw::c_char,
    ) -> u_int;
}
extern "C" {
    pub fn netsnmp_hex_to_binary(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        hex: *const ::std::os::raw::c_char,
        delim: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_hex_to_binary(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        offset: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        hex: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hex_to_binary2(
        input: *const u_char,
        len: size_t,
        output: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_decimal_to_binary(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        decimal: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_strcat(
        buf: *mut *mut u_char,
        buf_len: *mut size_t,
        out_len: *mut size_t,
        allow_realloc: ::std::os::raw::c_int,
        s: *const u_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_strdup_and_null(
        from: *const u_char,
        from_len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dump_chunk(
        debugtoken: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
        buf: *const u_char,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dump_snmpEngineID(
        buf: *const u_char,
        buflen: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
}
pub type marker_t = *mut ::std::os::raw::c_void;
pub type const_marker_t = *const ::std::os::raw::c_void;
extern "C" {
    pub fn atime_newMarker() -> marker_t;
}
extern "C" {
    pub fn atime_setMarker(pm: marker_t);
}
extern "C" {
    pub fn netsnmp_get_monotonic_clock(tv: *mut timeval);
}
extern "C" {
    pub fn netsnmp_set_monotonic_marker(pm: *mut marker_t);
}
extern "C" {
    pub fn atime_diff(first: const_marker_t, second: const_marker_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn uatime_diff(first: const_marker_t, second: const_marker_t) -> u_long;
}
extern "C" {
    pub fn uatime_hdiff(first: const_marker_t, second: const_marker_t) -> u_long;
}
extern "C" {
    pub fn atime_ready(
        pm: const_marker_t,
        delta_ms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_ready_monotonic(
        pm: const_marker_t,
        delta_ms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uatime_ready(
        pm: const_marker_t,
        delta_ms: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn marker_tticks(pm: const_marker_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timeval_tticks(tv: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_getenv(name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn netsnmp_setenv(
        envname: *const ::std::os::raw::c_char,
        envval: *const ::std::os::raw::c_char,
        overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_addrstr_hton(
        ptr: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_string_time_to_secs(
        time_string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type U64 = counter64;
extern "C" {
    pub fn divBy10(arg1: counter64, arg2: *mut counter64, arg3: *mut ::std::os::raw::c_uint);
}
extern "C" {
    pub fn multBy10(arg1: counter64, arg2: *mut counter64);
}
extern "C" {
    pub fn incrByU16(arg1: *mut counter64, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn incrByU32(arg1: *mut counter64, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn zeroU64(arg1: *mut counter64);
}
extern "C" {
    pub fn isZeroU64(arg1: *const counter64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printU64(arg1: *mut ::std::os::raw::c_char, arg2: *const counter64);
}
extern "C" {
    pub fn printI64(arg1: *mut ::std::os::raw::c_char, arg2: *const counter64);
}
extern "C" {
    pub fn read64(
        arg1: *mut counter64,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u64Subtract(
        pu64one: *const counter64,
        pu64two: *const counter64,
        pu64out: *mut counter64,
    );
}
extern "C" {
    pub fn u64Incr(pu64out: *mut counter64, pu64one: *const counter64);
}
extern "C" {
    pub fn u64UpdateCounter(
        pu64out: *mut counter64,
        pu64one: *const counter64,
        pu64two: *const counter64,
    );
}
extern "C" {
    pub fn u64Copy(pu64one: *mut counter64, pu64two: *const counter64);
}
extern "C" {
    pub fn netsnmp_c64_check_for_32bit_wrap(
        old_val: *mut counter64,
        new_val: *mut counter64,
        adjust: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_c64_check32_and_update(
        prev_val: *mut counter64,
        new_val: *mut counter64,
        old_prev_val: *mut counter64,
        need_wrap_check: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type SNMPAlarmCallback = ::std::option::Option<
    unsafe extern "C" fn(clientreg: ::std::os::raw::c_uint, clientarg: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snmp_alarm {
    pub t: timeval,
    pub flags: ::std::os::raw::c_uint,
    pub clientreg: ::std::os::raw::c_uint,
    pub t_lastM: timeval,
    pub t_nextM: timeval,
    pub clientarg: *mut ::std::os::raw::c_void,
    pub thecallback: SNMPAlarmCallback,
    pub next: *mut snmp_alarm,
}
#[test]
fn bindgen_test_layout_snmp_alarm() {
    assert_eq!(
        ::std::mem::size_of::<snmp_alarm>(),
        80usize,
        concat!("Size of: ", stringify!(snmp_alarm))
    );
    assert_eq!(
        ::std::mem::align_of::<snmp_alarm>(),
        8usize,
        concat!("Alignment of ", stringify!(snmp_alarm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_alarm>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_alarm),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_alarm>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_alarm),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_alarm>())).clientreg as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_alarm),
            "::",
            stringify!(clientreg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_alarm>())).t_lastM as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_alarm),
            "::",
            stringify!(t_lastM)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_alarm>())).t_nextM as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_alarm),
            "::",
            stringify!(t_nextM)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_alarm>())).clientarg as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_alarm),
            "::",
            stringify!(clientarg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_alarm>())).thecallback as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_alarm),
            "::",
            stringify!(thecallback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_alarm>())).next as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_alarm),
            "::",
            stringify!(next)
        )
    );
}
impl Default for snmp_alarm {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn snmp_alarm_unregister(clientreg: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn snmp_alarm_unregister_all();
}
extern "C" {
    pub fn snmp_alarm_register(
        when: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        thecallback: SNMPAlarmCallback,
        clientarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snmp_alarm_register_hr(
        t: timeval,
        flags: ::std::os::raw::c_uint,
        cb: SNMPAlarmCallback,
        cd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snmp_alarm_reset(clientreg: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_snmp_alarm();
}
extern "C" {
    pub fn init_alarm_post_config(
        majorid: ::std::os::raw::c_int,
        minorid: ::std::os::raw::c_int,
        serverarg: *mut ::std::os::raw::c_void,
        clientarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sa_update_entry(alrm: *mut snmp_alarm);
}
extern "C" {
    pub fn sa_find_next() -> *mut snmp_alarm;
}
extern "C" {
    pub fn run_alarms();
}
extern "C" {
    pub fn alarm_handler(a: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_an_alarm();
}
extern "C" {
    pub fn netsnmp_get_next_alarm_time(
        alarm_tm: *mut timeval,
        now: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_next_alarm_delay_time(delta: *mut timeval) -> ::std::os::raw::c_int;
}
pub type Netsnmp_Free_List_Data =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type Netsnmp_Save_List_Data = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type Netsnmp_Read_List_Data = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut ::std::os::raw::c_char,
        buf_len: size_t,
    ) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_data_list_s {
    pub next: *mut netsnmp_data_list_s,
    pub name: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub free_func: Netsnmp_Free_List_Data,
}
#[test]
fn bindgen_test_layout_netsnmp_data_list_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_data_list_s>(),
        32usize,
        concat!("Size of: ", stringify!(netsnmp_data_list_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_data_list_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_data_list_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_data_list_s>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_data_list_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_data_list_s>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_data_list_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_data_list_s>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_data_list_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_data_list_s>())).free_func as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_data_list_s),
            "::",
            stringify!(free_func)
        )
    );
}
impl Default for netsnmp_data_list_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_data_list = netsnmp_data_list_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_data_list_saveinfo_s {
    pub datalist: *mut *mut netsnmp_data_list,
    pub type_: *const ::std::os::raw::c_char,
    pub token: *const ::std::os::raw::c_char,
    pub data_list_save_ptr: Netsnmp_Save_List_Data,
    pub data_list_read_ptr: Netsnmp_Read_List_Data,
    pub data_list_free_ptr: Netsnmp_Free_List_Data,
}
#[test]
fn bindgen_test_layout_netsnmp_data_list_saveinfo_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_data_list_saveinfo_s>(),
        48usize,
        concat!("Size of: ", stringify!(netsnmp_data_list_saveinfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_data_list_saveinfo_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_data_list_saveinfo_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_data_list_saveinfo_s>())).datalist as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_data_list_saveinfo_s),
            "::",
            stringify!(datalist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_data_list_saveinfo_s>())).type_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_data_list_saveinfo_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_data_list_saveinfo_s>())).token as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_data_list_saveinfo_s),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_data_list_saveinfo_s>())).data_list_save_ptr as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_data_list_saveinfo_s),
            "::",
            stringify!(data_list_save_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_data_list_saveinfo_s>())).data_list_read_ptr as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_data_list_saveinfo_s),
            "::",
            stringify!(data_list_read_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_data_list_saveinfo_s>())).data_list_free_ptr as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_data_list_saveinfo_s),
            "::",
            stringify!(data_list_free_ptr)
        )
    );
}
impl Default for netsnmp_data_list_saveinfo_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_data_list_saveinfo = netsnmp_data_list_saveinfo_s;
extern "C" {
    pub fn netsnmp_create_data_list(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: Netsnmp_Free_List_Data,
    ) -> *mut netsnmp_data_list;
}
extern "C" {
    pub fn netsnmp_data_list_add_node(
        head: *mut *mut netsnmp_data_list,
        node: *mut netsnmp_data_list,
    );
}
extern "C" {
    pub fn netsnmp_data_list_add_data(
        head: *mut *mut netsnmp_data_list,
        name: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        beer: Netsnmp_Free_List_Data,
    ) -> *mut netsnmp_data_list;
}
extern "C" {
    pub fn netsnmp_get_list_data(
        head: *mut netsnmp_data_list,
        node: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn netsnmp_free_list_data(head: *mut netsnmp_data_list);
}
extern "C" {
    pub fn netsnmp_free_all_list_data(head: *mut netsnmp_data_list);
}
extern "C" {
    pub fn netsnmp_remove_list_node(
        realhead: *mut *mut netsnmp_data_list,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_get_list_node(
        head: *mut netsnmp_data_list,
        name: *const ::std::os::raw::c_char,
    ) -> *mut netsnmp_data_list;
}
extern "C" {
    pub fn netsnmp_add_list_data(head: *mut *mut netsnmp_data_list, node: *mut netsnmp_data_list);
}
extern "C" {
    pub fn netsnmp_register_save_list(
        datalist: *mut *mut netsnmp_data_list,
        type_: *const ::std::os::raw::c_char,
        token: *const ::std::os::raw::c_char,
        data_list_save_ptr: Netsnmp_Save_List_Data,
        data_list_read_ptr: Netsnmp_Read_List_Data,
        data_list_free_ptr: Netsnmp_Free_List_Data,
    );
}
extern "C" {
    pub fn netsnmp_save_all_data(
        head: *mut netsnmp_data_list,
        type_: *const ::std::os::raw::c_char,
        token: *const ::std::os::raw::c_char,
        data_list_save_ptr: Netsnmp_Save_List_Data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_save_all_data_callback(
        majorID: ::std::os::raw::c_int,
        minorID: ::std::os::raw::c_int,
        serverarg: *mut ::std::os::raw::c_void,
        clientarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_read_data_callback(
        token: *const ::std::os::raw::c_char,
        line: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn shutdown_data_list();
}
extern "C" {
    pub fn netsnmp_check_vb_type(
        var: *const netsnmp_variable_list,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_check_vb_size(
        var: *const netsnmp_variable_list,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_check_vb_max_size(
        var: *const netsnmp_variable_list,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_check_vb_range(
        var: *const netsnmp_variable_list,
        low: size_t,
        high: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_check_vb_size_range(
        var: *const netsnmp_variable_list,
        low: size_t,
        high: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_check_vb_type_and_size(
        var: *const netsnmp_variable_list,
        type_: ::std::os::raw::c_int,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_check_vb_type_and_max_size(
        var: *const netsnmp_variable_list,
        type_: ::std::os::raw::c_int,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_check_vb_oid(var: *const netsnmp_variable_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_check_vb_int(var: *const netsnmp_variable_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_check_vb_uint(var: *const netsnmp_variable_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_check_vb_int_range(
        var: *const netsnmp_variable_list,
        low: ::std::os::raw::c_int,
        high: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_check_vb_truthvalue(var: *const netsnmp_variable_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_check_vb_rowstatus_value(
        var: *const netsnmp_variable_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_check_vb_rowstatus(
        var: *const netsnmp_variable_list,
        old_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_check_vb_rowstatus_with_storagetype(
        var: *const netsnmp_variable_list,
        old_val: ::std::os::raw::c_int,
        old_storage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_check_vb_storagetype(
        var: *const netsnmp_variable_list,
        old_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtof32(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64x;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strfromd(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfroml(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: u128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> u128;
}
extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64x;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
impl Default for random_data {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize_file_name(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_d_fn_t,
        __arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type netsnmp_factory_produce_f =
    ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>;
pub type netsnmp_factory_produce_noalloc_f = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_factory_s {
    pub product: *const ::std::os::raw::c_char,
    pub produce: netsnmp_factory_produce_f,
    pub produce_noalloc: netsnmp_factory_produce_noalloc_f,
}
#[test]
fn bindgen_test_layout_netsnmp_factory_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_factory_s>(),
        24usize,
        concat!("Size of: ", stringify!(netsnmp_factory_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_factory_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_factory_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_factory_s>())).product as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_factory_s),
            "::",
            stringify!(product)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_factory_s>())).produce as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_factory_s),
            "::",
            stringify!(produce)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_factory_s>())).produce_noalloc as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_factory_s),
            "::",
            stringify!(produce_noalloc)
        )
    );
}
impl Default for netsnmp_factory_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_factory = netsnmp_factory_s;
extern "C" {
    pub fn netsnmp_factory_init();
}
extern "C" {
    pub fn netsnmp_factory_register(f: *mut netsnmp_factory) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_factory_get(product: *const ::std::os::raw::c_char) -> *mut netsnmp_factory;
}
extern "C" {
    pub fn netsnmp_factory_produce(
        product: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn netsnmp_factory_produce_noalloc(
        product: *const ::std::os::raw::c_char,
        memory: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const FACTORY_NOERROR: _bindgen_ty_7 = 0;
pub const FACTORY_EXISTS: _bindgen_ty_7 = 1;
pub const FACTORY_NOTFOUND: _bindgen_ty_7 = 2;
pub const FACTORY_NOMEMORY: _bindgen_ty_7 = 3;
pub const FACTORY_GENERR: _bindgen_ty_7 = 4;
pub const FACTORY_MAXIMUM_ERROR: _bindgen_ty_7 = 5;
pub type _bindgen_ty_7 = u32;
pub type netsnmp_container_mod_op = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut netsnmp_container_s,
        context: *mut ::std::os::raw::c_void,
        flags: u_int,
    ) -> *mut netsnmp_container_s,
>;
pub type netsnmp_container_option = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut netsnmp_container_s,
        set: ::std::os::raw::c_int,
        flags: u_int,
    ) -> ::std::os::raw::c_int,
>;
pub type netsnmp_container_rc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut netsnmp_container_s) -> ::std::os::raw::c_int,
>;
pub type netsnmp_container_it = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut netsnmp_container_s) -> *mut netsnmp_iterator_s,
>;
pub type netsnmp_container_size =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut netsnmp_container_s) -> size_t>;
pub type netsnmp_container_op = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut netsnmp_container_s,
        data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type netsnmp_container_da_op = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut netsnmp_container_s,
        pos: size_t,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type netsnmp_container_da_op_rtn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut netsnmp_container_s,
        pos: size_t,
        data: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type netsnmp_container_rtn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut netsnmp_container_s,
        data: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type netsnmp_container_obj_func = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, context: *mut ::std::os::raw::c_void),
>;
pub type netsnmp_container_func = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut netsnmp_container_s,
        arg2: netsnmp_container_obj_func,
        context: *mut ::std::os::raw::c_void,
    ),
>;
pub type netsnmp_container_set = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut netsnmp_container_s,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut netsnmp_void_array,
>;
pub type netsnmp_container_compare = ::std::option::Option<
    unsafe extern "C" fn(
        lhs: *const ::std::os::raw::c_void,
        rhs: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_container_s {
    pub container_data: *mut ::std::os::raw::c_void,
    pub get_size: netsnmp_container_size,
    pub init: netsnmp_container_rc,
    pub cfree: netsnmp_container_rc,
    pub insert: netsnmp_container_op,
    pub insert_before: netsnmp_container_da_op,
    pub insert_after: netsnmp_container_da_op,
    pub remove: netsnmp_container_op,
    pub remove_at: netsnmp_container_da_op_rtn,
    pub release: netsnmp_container_op,
    pub free_item: netsnmp_container_obj_func,
    pub find: netsnmp_container_rtn,
    pub find_next: netsnmp_container_rtn,
    pub get_at: netsnmp_container_da_op_rtn,
    pub get_subset: netsnmp_container_set,
    pub get_iterator: netsnmp_container_it,
    pub for_each: netsnmp_container_func,
    pub clear: netsnmp_container_func,
    pub insert_filter: netsnmp_container_op,
    pub duplicate: netsnmp_container_mod_op,
    pub compare: netsnmp_container_compare,
    pub ncompare: netsnmp_container_compare,
    pub options: netsnmp_container_option,
    pub container_name: *mut ::std::os::raw::c_char,
    pub sync: u_long,
    pub flags: u_int,
    pub next: *mut netsnmp_container_s,
    pub prev: *mut netsnmp_container_s,
}
#[test]
fn bindgen_test_layout_netsnmp_container_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_container_s>(),
        224usize,
        concat!("Size of: ", stringify!(netsnmp_container_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_container_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_container_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_container_s>())).container_data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(container_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).get_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).init as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).cfree as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(cfree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).insert as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(insert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_container_s>())).insert_before as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(insert_before)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_container_s>())).insert_after as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(insert_after)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).remove as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).remove_at as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(remove_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).release as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).free_item as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(free_item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).find as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(find)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).find_next as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(find_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).get_at as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(get_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).get_subset as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(get_subset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_container_s>())).get_iterator as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(get_iterator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).for_each as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(for_each)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).clear as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(clear)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_container_s>())).insert_filter as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(insert_filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).duplicate as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(duplicate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).compare as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(compare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).ncompare as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(ncompare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).options as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_container_s>())).container_name as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(container_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).sync as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(sync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).flags as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).next as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_container_s>())).prev as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_container_s),
            "::",
            stringify!(prev)
        )
    );
}
impl Default for netsnmp_container_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_container = netsnmp_container_s;
extern "C" {
    pub fn netsnmp_container_init_list();
}
extern "C" {
    pub fn netsnmp_container_free_list();
}
extern "C" {
    pub fn netsnmp_container_register_with_compare(
        name: *const ::std::os::raw::c_char,
        f: *mut netsnmp_factory,
        c: netsnmp_container_compare,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_container_register(
        name: *const ::std::os::raw::c_char,
        f: *mut netsnmp_factory,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_container_find(
        type_list: *const ::std::os::raw::c_char,
    ) -> *mut netsnmp_container;
}
extern "C" {
    pub fn netsnmp_container_get(type_: *const ::std::os::raw::c_char) -> *mut netsnmp_container;
}
extern "C" {
    pub fn netsnmp_container_add_index(
        primary: *mut netsnmp_container,
        new_index: *mut netsnmp_container,
    );
}
extern "C" {
    pub fn netsnmp_container_get_factory(
        type_: *const ::std::os::raw::c_char,
    ) -> *mut netsnmp_factory;
}
extern "C" {
    pub fn netsnmp_compare_netsnmp_index(
        lhs: *const ::std::os::raw::c_void,
        rhs: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_ncompare_netsnmp_index(
        lhs: *const ::std::os::raw::c_void,
        rhs: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_compare_cstring(
        lhs: *const ::std::os::raw::c_void,
        rhs: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_ncompare_cstring(
        lhs: *const ::std::os::raw::c_void,
        rhs: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_compare_mem(
        lhs: *const ::std::os::raw::c_char,
        lhs_len: size_t,
        rhs: *const ::std::os::raw::c_char,
        rhs_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_compare_direct_cstring(
        lhs: *const ::std::os::raw::c_void,
        rhs: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_compare_long(
        lhs: *const ::std::os::raw::c_void,
        rhs: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_compare_ulong(
        lhs: *const ::std::os::raw::c_void,
        rhs: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_compare_int32(
        lhs: *const ::std::os::raw::c_void,
        rhs: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_compare_uint32(
        lhs: *const ::std::os::raw::c_void,
        rhs: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_container_simple_free(
        data: *mut ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CONTAINER_INSERT(
        x: *mut netsnmp_container,
        k: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CONTAINER_INSERT_BEFORE(
        x: *mut netsnmp_container,
        pos: size_t,
        k: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CONTAINER_REMOVE(
        x: *mut netsnmp_container,
        k: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CONTAINER_REMOVE_AT(
        x: *mut netsnmp_container,
        pos: size_t,
        k: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CONTAINER_GET_AT(
        x: *mut netsnmp_container,
        pos: size_t,
        k: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CONTAINER_DUP(
        x: *mut netsnmp_container,
        ctx: *mut ::std::os::raw::c_void,
        flags: u_int,
    ) -> *mut netsnmp_container;
}
extern "C" {
    pub fn CONTAINER_CLEAR(
        x: *mut netsnmp_container,
        f: netsnmp_container_obj_func,
        c: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CONTAINER_FREE_ALL(x: *mut netsnmp_container, c: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CONTAINER_FREE(x: *mut netsnmp_container) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUBCONTAINER_FIND(
        x: *mut netsnmp_container,
        name: *const ::std::os::raw::c_char,
    ) -> *mut netsnmp_container;
}
extern "C" {
    pub fn netsnmp_init_container(
        c: *mut netsnmp_container,
        init: netsnmp_container_rc,
        cfree: netsnmp_container_rc,
        size: netsnmp_container_size,
        cmp: netsnmp_container_compare,
        ins: netsnmp_container_op,
        rem: netsnmp_container_op,
        fnd: netsnmp_container_rtn,
    );
}
extern "C" {
    pub fn netsnmp_container_data_dup(
        dup: *mut netsnmp_container,
        c: *mut netsnmp_container,
    ) -> ::std::os::raw::c_int;
}
pub type netsnmp_iterator_rc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut netsnmp_iterator_s) -> ::std::os::raw::c_int,
>;
pub type netsnmp_iterator_rtn = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut netsnmp_iterator_s) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_iterator_s {
    pub container: *mut netsnmp_container,
    pub sync: u_long,
    pub reset: netsnmp_iterator_rc,
    pub release: netsnmp_iterator_rc,
    pub first: netsnmp_iterator_rtn,
    pub curr: netsnmp_iterator_rtn,
    pub last: netsnmp_iterator_rtn,
    pub next: netsnmp_iterator_rtn,
    pub remove: netsnmp_iterator_rc,
}
#[test]
fn bindgen_test_layout_netsnmp_iterator_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_iterator_s>(),
        72usize,
        concat!("Size of: ", stringify!(netsnmp_iterator_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_iterator_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_iterator_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_iterator_s>())).container as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_iterator_s),
            "::",
            stringify!(container)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_iterator_s>())).sync as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_iterator_s),
            "::",
            stringify!(sync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_iterator_s>())).reset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_iterator_s),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_iterator_s>())).release as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_iterator_s),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_iterator_s>())).first as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_iterator_s),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_iterator_s>())).curr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_iterator_s),
            "::",
            stringify!(curr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_iterator_s>())).last as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_iterator_s),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_iterator_s>())).next as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_iterator_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_iterator_s>())).remove as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_iterator_s),
            "::",
            stringify!(remove)
        )
    );
}
impl Default for netsnmp_iterator_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_iterator = netsnmp_iterator_s;
extern "C" {
    pub fn netsnmp_container_binary_array_init();
}
extern "C" {
    pub fn netsnmp_container_get_binary_array() -> *mut netsnmp_container;
}
extern "C" {
    pub fn netsnmp_container_get_binary_array_factory() -> *mut netsnmp_factory;
}
extern "C" {
    pub fn netsnmp_binary_array_remove(
        c: *mut netsnmp_container,
        key: *const ::std::os::raw::c_void,
        save: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_binary_array_release(c: *mut netsnmp_container);
}
extern "C" {
    pub fn netsnmp_binary_array_options_set(
        c: *mut netsnmp_container,
        set: ::std::os::raw::c_int,
        flags: u_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_container_get_sorted_singly_linked_list() -> *mut netsnmp_container;
}
extern "C" {
    pub fn netsnmp_container_get_singly_linked_list(
        fifo: ::std::os::raw::c_int,
    ) -> *mut netsnmp_container;
}
extern "C" {
    pub fn netsnmp_container_ssll_init();
}
pub type Netsnmp_Iterator_Loop_Key = ::std::option::Option<
    unsafe extern "C" fn(
        iterator_ctx: *mut ::std::os::raw::c_void,
        loop_ctx: *mut netsnmp_ref_void,
        key: *mut netsnmp_ref_void,
    ) -> ::std::os::raw::c_int,
>;
pub type Netsnmp_Iterator_Loop_Data = ::std::option::Option<
    unsafe extern "C" fn(
        iterator_ctx: *mut ::std::os::raw::c_void,
        loop_ctx: *mut netsnmp_ref_void,
        data: *mut netsnmp_ref_void,
    ) -> ::std::os::raw::c_int,
>;
pub type Netsnmp_Iterator_Ctx = ::std::option::Option<
    unsafe extern "C" fn(
        iterator_ctx: *mut ::std::os::raw::c_void,
        loop_ctx: *mut netsnmp_ref_void,
    ) -> ::std::os::raw::c_int,
>;
pub type Netsnmp_Iterator_Ctx_Dup = ::std::option::Option<
    unsafe extern "C" fn(
        iterator_ctx: *mut ::std::os::raw::c_void,
        loop_ctx: *mut netsnmp_ref_void,
        dup_ctx: *mut netsnmp_ref_void,
        reuse: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Netsnmp_Iterator_Op = ::std::option::Option<
    unsafe extern "C" fn(iterator_ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type Netsnmp_Iterator_Data = ::std::option::Option<
    unsafe extern "C" fn(
        iterator_ctx: *mut ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn netsnmp_container_iterator_init();
}
extern "C" {
    pub fn netsnmp_container_iterator_get(
        iterator_user_ctx: *mut ::std::os::raw::c_void,
        compare: netsnmp_container_compare,
        get_first: Netsnmp_Iterator_Loop_Key,
        get_next: Netsnmp_Iterator_Loop_Key,
        get_data: Netsnmp_Iterator_Loop_Data,
        save_pos: Netsnmp_Iterator_Ctx_Dup,
        init_loop_ctx: Netsnmp_Iterator_Ctx,
        cleanup_loop_ctx: Netsnmp_Iterator_Ctx,
        free_user_ctx: Netsnmp_Iterator_Data,
        sorted: ::std::os::raw::c_int,
    ) -> *mut netsnmp_container;
}
extern "C" {
    pub fn netsnmp_container_iterator_set_data_cb(
        c: *mut netsnmp_container,
        insert_data: Netsnmp_Iterator_Data,
        remove_data: Netsnmp_Iterator_Data,
        get_size: Netsnmp_Iterator_Op,
    );
}
extern "C" {
    pub fn netsnmp_get_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn register_config_handler(
        filePrefix: *const ::std::os::raw::c_char,
        token: *const ::std::os::raw::c_char,
        parser: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *mut ::std::os::raw::c_char,
            ),
        >,
        releaser: ::std::option::Option<unsafe extern "C" fn()>,
        usageLine: *const ::std::os::raw::c_char,
    ) -> *mut config_line;
}
extern "C" {
    pub fn register_const_config_handler(
        filePrefix: *const ::std::os::raw::c_char,
        token: *const ::std::os::raw::c_char,
        parser: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *const ::std::os::raw::c_char,
            ),
        >,
        releaser: ::std::option::Option<unsafe extern "C" fn()>,
        usageLine: *const ::std::os::raw::c_char,
    ) -> *mut config_line;
}
extern "C" {
    pub fn register_prenetsnmp_mib_handler(
        filePrefix: *const ::std::os::raw::c_char,
        token: *const ::std::os::raw::c_char,
        parser: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *mut ::std::os::raw::c_char,
            ),
        >,
        releaser: ::std::option::Option<unsafe extern "C" fn()>,
        usageLine: *const ::std::os::raw::c_char,
    ) -> *mut config_line;
}
extern "C" {
    pub fn unregister_config_handler(
        filePrefix: *const ::std::os::raw::c_char,
        token: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn unregister_all_config_handlers();
}
extern "C" {
    pub fn register_app_config_handler(
        token: *const ::std::os::raw::c_char,
        parser: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *mut ::std::os::raw::c_char,
            ),
        >,
        releaser: ::std::option::Option<unsafe extern "C" fn()>,
        usageLine: *const ::std::os::raw::c_char,
    ) -> *mut config_line;
}
extern "C" {
    pub fn register_app_prenetsnmp_mib_handler(
        token: *const ::std::os::raw::c_char,
        parser: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *mut ::std::os::raw::c_char,
            ),
        >,
        releaser: ::std::option::Option<unsafe extern "C" fn()>,
        usageLine: *const ::std::os::raw::c_char,
    ) -> *mut config_line;
}
extern "C" {
    pub fn unregister_app_config_handler(token: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn read_configs();
}
extern "C" {
    pub fn read_premib_configs();
}
extern "C" {
    pub fn read_config_print_usage(lead: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn config_perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn config_pwarn(arg1: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct config_files {
    pub fileHeader: *mut ::std::os::raw::c_char,
    pub start: *mut config_line,
    pub next: *mut config_files,
}
#[test]
fn bindgen_test_layout_config_files() {
    assert_eq!(
        ::std::mem::size_of::<config_files>(),
        24usize,
        concat!("Size of: ", stringify!(config_files))
    );
    assert_eq!(
        ::std::mem::align_of::<config_files>(),
        8usize,
        concat!("Alignment of ", stringify!(config_files))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config_files>())).fileHeader as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(config_files),
            "::",
            stringify!(fileHeader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config_files>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(config_files),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config_files>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(config_files),
            "::",
            stringify!(next)
        )
    );
}
impl Default for config_files {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct config_line {
    pub config_token: *mut ::std::os::raw::c_char,
    pub parse_line: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
        ),
    >,
    pub free_func: ::std::option::Option<unsafe extern "C" fn()>,
    pub next: *mut config_line,
    pub config_time: ::std::os::raw::c_char,
    pub help: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_config_line() {
    assert_eq!(
        ::std::mem::size_of::<config_line>(),
        48usize,
        concat!("Size of: ", stringify!(config_line))
    );
    assert_eq!(
        ::std::mem::align_of::<config_line>(),
        8usize,
        concat!("Alignment of ", stringify!(config_line))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config_line>())).config_token as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(config_line),
            "::",
            stringify!(config_token)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config_line>())).parse_line as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(config_line),
            "::",
            stringify!(parse_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config_line>())).free_func as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(config_line),
            "::",
            stringify!(free_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config_line>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(config_line),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config_line>())).config_time as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(config_line),
            "::",
            stringify!(config_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<config_line>())).help as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(config_line),
            "::",
            stringify!(help)
        )
    );
}
impl Default for config_line {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct read_config_memory {
    pub line: *mut ::std::os::raw::c_char,
    pub next: *mut read_config_memory,
}
#[test]
fn bindgen_test_layout_read_config_memory() {
    assert_eq!(
        ::std::mem::size_of::<read_config_memory>(),
        16usize,
        concat!("Size of: ", stringify!(read_config_memory))
    );
    assert_eq!(
        ::std::mem::align_of::<read_config_memory>(),
        8usize,
        concat!("Alignment of ", stringify!(read_config_memory))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_config_memory>())).line as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_config_memory),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<read_config_memory>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(read_config_memory),
            "::",
            stringify!(next)
        )
    );
}
impl Default for read_config_memory {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn netsnmp_config(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_config_remember(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn netsnmp_config_process_memories();
}
extern "C" {
    pub fn read_config(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut config_line,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read_config_files(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_config();
}
extern "C" {
    pub fn netsnmp_config_error(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn netsnmp_config_warn(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn skip_white(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn skip_white_const(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn skip_not_white(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn skip_not_white_const(
        arg1: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn skip_token(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn skip_token_const(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn copy_nword(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn copy_nword_const(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn copy_word(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn read_config_with_type(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read_config_save_octet_string(
        saveto: *mut ::std::os::raw::c_char,
        str_: *const u_char,
        len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn read_config_read_octet_string(
        readfrom: *const ::std::os::raw::c_char,
        str_: *mut *mut u_char,
        len: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn read_config_read_octet_string_const(
        readfrom: *const ::std::os::raw::c_char,
        str_: *mut *mut u_char,
        len: *mut size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn read_config_read_objid(
        readfrom: *mut ::std::os::raw::c_char,
        objid: *mut *mut oid,
        len: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn read_config_read_objid_const(
        readfrom: *const ::std::os::raw::c_char,
        objid: *mut *mut oid,
        len: *mut size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn read_config_save_objid(
        saveto: *mut ::std::os::raw::c_char,
        objid: *mut oid,
        len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn read_config_read_data(
        type_: ::std::os::raw::c_int,
        readfrom: *mut ::std::os::raw::c_char,
        dataptr: *mut ::std::os::raw::c_void,
        len: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn read_config_read_memory(
        type_: ::std::os::raw::c_int,
        readfrom: *mut ::std::os::raw::c_char,
        dataptr: *mut ::std::os::raw::c_char,
        len: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn read_config_store_data(
        type_: ::std::os::raw::c_int,
        storeto: *mut ::std::os::raw::c_char,
        dataptr: *mut ::std::os::raw::c_void,
        len: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn read_config_store_data_prefix(
        prefix: ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        storeto: *mut ::std::os::raw::c_char,
        dataptr: *mut ::std::os::raw::c_void,
        len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn read_config_files_of_type(
        when: ::std::os::raw::c_int,
        ctmp: *mut config_files,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read_config_store(
        type_: *const ::std::os::raw::c_char,
        line: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn read_app_config_store(line: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn snmp_save_persistent(type_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn snmp_clean_persistent(type_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn read_config_get_handlers(type_: *const ::std::os::raw::c_char) -> *mut config_line;
}
extern "C" {
    pub fn snmp_config_remember_in_list(
        line: *mut ::std::os::raw::c_char,
        mem: *mut *mut read_config_memory,
    );
}
extern "C" {
    pub fn snmp_config_process_memory_list(
        mem: *mut *mut read_config_memory,
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snmp_config_remember_free_list(mem: *mut *mut read_config_memory);
}
extern "C" {
    pub fn set_configuration_directory(dir: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn get_configuration_directory() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn set_persistent_directory(dir: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn get_persistent_directory() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn set_temp_file_pattern(pattern: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn get_temp_file_pattern() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn handle_long_opt(myoptarg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn netsnmp_ds_set_boolean(
        storeid: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_ds_get_boolean(
        storeid: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_ds_toggle_boolean(
        storeid: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_ds_set_int(
        storeid: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_ds_get_int(
        storeid: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_ds_set_string(
        storeid: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_ds_get_string(
        storeid: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn netsnmp_ds_set_void(
        storeid: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_ds_get_void(
        storeid: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn netsnmp_ds_register_config(
        type_: u_char,
        ftype: *const ::std::os::raw::c_char,
        token: *const ::std::os::raw::c_char,
        storeid: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_ds_register_premib(
        type_: u_char,
        ftype: *const ::std::os::raw::c_char,
        token: *const ::std::os::raw::c_char,
        storeid: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_ds_parse_boolean(line: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_ds_shutdown();
}
extern "C" {
    pub fn netsnmp_parse_args(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        session: *mut netsnmp_session,
        localOpts: *const ::std::os::raw::c_char,
        proc_: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *const *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ),
        >,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_parse_args(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        session: *mut netsnmp_session,
        localOpts: *const ::std::os::raw::c_char,
        proc_: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *const *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmp_parse_args_descriptions(arg1: *mut FILE);
}
extern "C" {
    pub fn snmp_parse_args_usage(arg1: *mut FILE);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snmp_enum_list {
    pub next: *mut snmp_enum_list,
    pub value: ::std::os::raw::c_int,
    pub label: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_snmp_enum_list() {
    assert_eq!(
        ::std::mem::size_of::<snmp_enum_list>(),
        24usize,
        concat!("Size of: ", stringify!(snmp_enum_list))
    );
    assert_eq!(
        ::std::mem::align_of::<snmp_enum_list>(),
        8usize,
        concat!("Alignment of ", stringify!(snmp_enum_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_enum_list>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_enum_list),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_enum_list>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_enum_list),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_enum_list>())).label as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_enum_list),
            "::",
            stringify!(label)
        )
    );
}
impl Default for snmp_enum_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn init_snmp_enum(type_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn se_find_list(
        major: ::std::os::raw::c_uint,
        minor: ::std::os::raw::c_uint,
    ) -> *mut snmp_enum_list;
}
extern "C" {
    pub fn se_find_slist(listname: *const ::std::os::raw::c_char) -> *mut snmp_enum_list;
}
extern "C" {
    pub fn se_store_in_list(
        arg1: *mut snmp_enum_list,
        major: ::std::os::raw::c_uint,
        minor: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn se_find_value(
        major: ::std::os::raw::c_uint,
        minor: ::std::os::raw::c_uint,
        label: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn se_find_free_value(
        major: ::std::os::raw::c_uint,
        minor: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn se_find_label(
        major: ::std::os::raw::c_uint,
        minor: ::std::os::raw::c_uint,
        value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn se_add_pair(
        major: ::std::os::raw::c_uint,
        minor: ::std::os::raw::c_uint,
        label: *mut ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn se_find_label_in_slist(
        listname: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn se_find_value_in_slist(
        listname: *const ::std::os::raw::c_char,
        label: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn se_find_casevalue_in_slist(
        listname: *const ::std::os::raw::c_char,
        label: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn se_find_free_value_in_slist(
        listname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn se_add_pair_to_slist(
        listname: *const ::std::os::raw::c_char,
        label: *mut ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn se_find_label_in_list(
        list: *mut snmp_enum_list,
        value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn se_find_value_in_list(
        list: *mut snmp_enum_list,
        label: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn se_find_casevalue_in_list(
        list: *mut snmp_enum_list,
        label: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn se_find_free_value_in_list(list: *mut snmp_enum_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn se_add_pair_to_list(
        list: *mut *mut snmp_enum_list,
        label: *mut ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn se_store_enum_list(
        new_list: *mut snmp_enum_list,
        token: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn se_store_list(
        major: ::std::os::raw::c_uint,
        minor: ::std::os::raw::c_uint,
        type_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn se_clear_slist(listname: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn se_store_slist(
        listname: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn se_store_slist_callback(
        majorID: ::std::os::raw::c_int,
        minorID: ::std::os::raw::c_int,
        serverargs: *mut ::std::os::raw::c_void,
        clientargs: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn se_read_conf(word: *const ::std::os::raw::c_char, cptr: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn clear_snmp_enum();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vacm_groupEntry {
    pub securityModel: ::std::os::raw::c_int,
    pub securityName: [::std::os::raw::c_char; 34usize],
    pub groupName: [::std::os::raw::c_char; 34usize],
    pub storageType: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
    pub bitMask: u_long,
    pub reserved: *mut vacm_groupEntry,
    pub next: *mut vacm_groupEntry,
}
#[test]
fn bindgen_test_layout_vacm_groupEntry() {
    assert_eq!(
        ::std::mem::size_of::<vacm_groupEntry>(),
        104usize,
        concat!("Size of: ", stringify!(vacm_groupEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<vacm_groupEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(vacm_groupEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_groupEntry>())).securityModel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_groupEntry),
            "::",
            stringify!(securityModel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_groupEntry>())).securityName as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_groupEntry),
            "::",
            stringify!(securityName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_groupEntry>())).groupName as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_groupEntry),
            "::",
            stringify!(groupName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_groupEntry>())).storageType as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_groupEntry),
            "::",
            stringify!(storageType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_groupEntry>())).status as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_groupEntry),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_groupEntry>())).bitMask as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_groupEntry),
            "::",
            stringify!(bitMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_groupEntry>())).reserved as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_groupEntry),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_groupEntry>())).next as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_groupEntry),
            "::",
            stringify!(next)
        )
    );
}
impl Default for vacm_groupEntry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn init_vacm();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vacm_accessEntry {
    pub groupName: [::std::os::raw::c_char; 34usize],
    pub contextPrefix: [::std::os::raw::c_char; 34usize],
    pub securityModel: ::std::os::raw::c_int,
    pub securityLevel: ::std::os::raw::c_int,
    pub contextMatch: ::std::os::raw::c_int,
    pub views: [[::std::os::raw::c_char; 34usize]; 8usize],
    pub storageType: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
    pub bitMask: u_long,
    pub reserved: *mut vacm_accessEntry,
    pub next: *mut vacm_accessEntry,
}
#[test]
fn bindgen_test_layout_vacm_accessEntry() {
    assert_eq!(
        ::std::mem::size_of::<vacm_accessEntry>(),
        384usize,
        concat!("Size of: ", stringify!(vacm_accessEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<vacm_accessEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(vacm_accessEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_accessEntry>())).groupName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_accessEntry),
            "::",
            stringify!(groupName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_accessEntry>())).contextPrefix as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_accessEntry),
            "::",
            stringify!(contextPrefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_accessEntry>())).securityModel as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_accessEntry),
            "::",
            stringify!(securityModel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_accessEntry>())).securityLevel as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_accessEntry),
            "::",
            stringify!(securityLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_accessEntry>())).contextMatch as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_accessEntry),
            "::",
            stringify!(contextMatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_accessEntry>())).views as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_accessEntry),
            "::",
            stringify!(views)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_accessEntry>())).storageType as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_accessEntry),
            "::",
            stringify!(storageType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_accessEntry>())).status as *const _ as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_accessEntry),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_accessEntry>())).bitMask as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_accessEntry),
            "::",
            stringify!(bitMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_accessEntry>())).reserved as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_accessEntry),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_accessEntry>())).next as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_accessEntry),
            "::",
            stringify!(next)
        )
    );
}
impl Default for vacm_accessEntry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vacm_viewEntry {
    pub viewName: [::std::os::raw::c_char; 34usize],
    pub viewSubtree: [oid; 129usize],
    pub viewSubtreeLen: size_t,
    pub viewMask: [u_char; 34usize],
    pub viewMaskLen: size_t,
    pub viewType: ::std::os::raw::c_int,
    pub viewStorageType: ::std::os::raw::c_int,
    pub viewStatus: ::std::os::raw::c_int,
    pub bitMask: u_long,
    pub reserved: *mut vacm_viewEntry,
    pub next: *mut vacm_viewEntry,
}
#[test]
fn bindgen_test_layout_vacm_viewEntry() {
    assert_eq!(
        ::std::mem::size_of::<vacm_viewEntry>(),
        1168usize,
        concat!("Size of: ", stringify!(vacm_viewEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<vacm_viewEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(vacm_viewEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_viewEntry>())).viewName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_viewEntry),
            "::",
            stringify!(viewName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_viewEntry>())).viewSubtree as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_viewEntry),
            "::",
            stringify!(viewSubtree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_viewEntry>())).viewSubtreeLen as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_viewEntry),
            "::",
            stringify!(viewSubtreeLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_viewEntry>())).viewMask as *const _ as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_viewEntry),
            "::",
            stringify!(viewMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_viewEntry>())).viewMaskLen as *const _ as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_viewEntry),
            "::",
            stringify!(viewMaskLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_viewEntry>())).viewType as *const _ as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_viewEntry),
            "::",
            stringify!(viewType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_viewEntry>())).viewStorageType as *const _ as usize },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_viewEntry),
            "::",
            stringify!(viewStorageType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_viewEntry>())).viewStatus as *const _ as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_viewEntry),
            "::",
            stringify!(viewStatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_viewEntry>())).bitMask as *const _ as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_viewEntry),
            "::",
            stringify!(bitMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_viewEntry>())).reserved as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_viewEntry),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vacm_viewEntry>())).next as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(vacm_viewEntry),
            "::",
            stringify!(next)
        )
    );
}
impl Default for vacm_viewEntry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn vacm_destroyViewEntry(arg1: *const ::std::os::raw::c_char, arg2: *mut oid, arg3: size_t);
}
extern "C" {
    pub fn vacm_destroyAllViewEntries();
}
extern "C" {
    pub fn vacm_getViewEntry(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut oid,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
    ) -> *mut vacm_viewEntry;
}
extern "C" {
    pub fn vacm_checkSubtree(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut oid,
        arg3: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vacm_scanViewInit();
}
extern "C" {
    pub fn vacm_scanViewNext() -> *mut vacm_viewEntry;
}
extern "C" {
    pub fn vacm_createViewEntry(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut oid,
        arg3: size_t,
    ) -> *mut vacm_viewEntry;
}
extern "C" {
    pub fn vacm_destroyGroupEntry(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn vacm_destroyAllGroupEntries();
}
extern "C" {
    pub fn vacm_createGroupEntry(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut vacm_groupEntry;
}
extern "C" {
    pub fn vacm_getGroupEntry(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut vacm_groupEntry;
}
extern "C" {
    pub fn vacm_scanGroupInit();
}
extern "C" {
    pub fn vacm_scanGroupNext() -> *mut vacm_groupEntry;
}
extern "C" {
    pub fn vacm_destroyAccessEntry(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vacm_destroyAllAccessEntries();
}
extern "C" {
    pub fn vacm_createAccessEntry(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut vacm_accessEntry;
}
extern "C" {
    pub fn vacm_getAccessEntry(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut vacm_accessEntry;
}
extern "C" {
    pub fn vacm_scanAccessInit();
}
extern "C" {
    pub fn vacm_scanAccessNext() -> *mut vacm_accessEntry;
}
extern "C" {
    pub fn vacm_destroySecurityEntry(arg1: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vacm_securityEntry {
    _unused: [u8; 0],
}
extern "C" {
    pub fn vacm_createSecurityEntry(arg1: *const ::std::os::raw::c_char)
        -> *mut vacm_securityEntry;
}
extern "C" {
    pub fn vacm_getSecurityEntry(arg1: *const ::std::os::raw::c_char) -> *mut vacm_securityEntry;
}
extern "C" {
    pub fn vacm_scanSecurityInit();
}
extern "C" {
    pub fn vacm_scanSecurityEntry() -> *mut vacm_securityEntry;
}
extern "C" {
    pub fn vacm_is_configured() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vacm_save(token: *const ::std::os::raw::c_char, type_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn vacm_save_view(
        view: *mut vacm_viewEntry,
        token: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn vacm_save_access(
        access_entry: *mut vacm_accessEntry,
        token: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn vacm_save_auth_access(
        access_entry: *mut vacm_accessEntry,
        token: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        authtype: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vacm_save_group(
        group_entry: *mut vacm_groupEntry,
        token: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn vacm_parse_config_view(
        token: *const ::std::os::raw::c_char,
        line: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn vacm_parse_config_group(
        token: *const ::std::os::raw::c_char,
        line: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn vacm_parse_config_access(
        token: *const ::std::os::raw::c_char,
        line: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn vacm_parse_config_auth_access(
        token: *const ::std::os::raw::c_char,
        line: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn store_vacm(
        majorID: ::std::os::raw::c_int,
        minorID: ::std::os::raw::c_int,
        serverarg: *mut ::std::os::raw::c_void,
        clientarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_view_get(
        head: *mut vacm_viewEntry,
        viewName: *const ::std::os::raw::c_char,
        viewSubtree: *mut oid,
        viewSubtreeLen: size_t,
        mode: ::std::os::raw::c_int,
    ) -> *mut vacm_viewEntry;
}
extern "C" {
    pub fn netsnmp_vacm_simple_usm_add(
        user: *const ::std::os::raw::c_char,
        rw: ::std::os::raw::c_int,
        authLevel: ::std::os::raw::c_int,
        view: *const ::std::os::raw::c_char,
        oidView: *mut oid,
        oidViewLen: size_t,
        context: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_vacm_simple_usm_del(
        user: *const ::std::os::raw::c_char,
        authLevel: ::std::os::raw::c_int,
        view: *const ::std::os::raw::c_char,
        oidView: *mut oid,
        oidViewLen: size_t,
        context: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmpv3_parse_args(
        optarg: *mut ::std::os::raw::c_char,
        session: *mut netsnmp_session,
        Apsz: *mut *mut ::std::os::raw::c_char,
        Xpsz: *mut *mut ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        argv: *const *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setup_engineID(
        eidp: *mut *mut u_char,
        text: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_exact_engineID(id: *const u_char, len: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn engineID_conf(word: *const ::std::os::raw::c_char, cptr: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn engineBoots_conf(arg1: *const ::std::os::raw::c_char, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn engineIDType_conf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn engineIDNic_conf(arg1: *const ::std::os::raw::c_char, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn init_snmpv3(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn init_snmpv3_post_config(
        majorid: ::std::os::raw::c_int,
        minorid: ::std::os::raw::c_int,
        serverarg: *mut ::std::os::raw::c_void,
        clientarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_snmpv3_post_premib_config(
        majorid: ::std::os::raw::c_int,
        minorid: ::std::os::raw::c_int,
        serverarg: *mut ::std::os::raw::c_void,
        clientarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown_snmpv3(type_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn snmpv3_store(
        majorID: ::std::os::raw::c_int,
        minorID: ::std::os::raw::c_int,
        serverarg: *mut ::std::os::raw::c_void,
        clientarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmpv3_local_snmpEngineBoots() -> u_long;
}
extern "C" {
    pub fn snmpv3_clone_engineID(
        arg1: *mut *mut u_char,
        arg2: *mut size_t,
        arg3: *mut u_char,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmpv3_get_engineID(buf: *mut u_char, buflen: size_t) -> size_t;
}
extern "C" {
    pub fn snmpv3_generate_engineID(arg1: *mut size_t) -> *mut u_char;
}
extern "C" {
    pub fn snmpv3_local_snmpEngineTime() -> u_long;
}
extern "C" {
    pub fn get_default_secLevel() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmpv3_set_engineBootsAndTime(
        boots: ::std::os::raw::c_int,
        ttime: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn free_engineID(
        majorid: ::std::os::raw::c_int,
        minorid: ::std::os::raw::c_int,
        serverarg: *mut ::std::os::raw::c_void,
        clientarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_secLevel_conf(
        word: *const ::std::os::raw::c_char,
        cptr: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmpv3_parse_arg(
        arg: ::std::os::raw::c_int,
        optarg: *mut ::std::os::raw::c_char,
        session: *mut netsnmp_session,
        Apsz: *mut *mut ::std::os::raw::c_char,
        Xpsz: *mut *mut ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        argv: *const *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snmpv3_options(
        optarg: *mut ::std::os::raw::c_char,
        session: *mut netsnmp_session,
        Apsz: *mut *mut ::std::os::raw::c_char,
        Xpsz: *mut *mut ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut usmNoAuthProtocol: [oid; 10usize];
}
extern "C" {
    pub static mut usmHMACMD5AuthProtocol: [oid; 10usize];
}
extern "C" {
    pub static mut usmHMACSHA1AuthProtocol: [oid; 10usize];
}
extern "C" {
    pub static mut usmHMAC128SHA224AuthProtocol: [oid; 10usize];
}
extern "C" {
    pub static mut usmHMAC192SHA256AuthProtocol: [oid; 10usize];
}
extern "C" {
    pub static mut usmHMAC256SHA384AuthProtocol: [oid; 10usize];
}
extern "C" {
    pub static mut usmHMAC384SHA512AuthProtocol: [oid; 10usize];
}
extern "C" {
    pub static mut usmNoPrivProtocol: [oid; 10usize];
}
extern "C" {
    pub static mut usmDESPrivProtocol: [oid; 10usize];
}
extern "C" {
    pub static mut usmAESPrivProtocol: [oid; 10usize];
}
extern "C" {
    pub static mut usmAES128PrivProtocol: *mut oid;
}
extern "C" {
    pub fn generate_Ku(
        hashtype: *const oid,
        hashtype_len: u_int,
        P: *const u_char,
        pplen: size_t,
        Ku: *mut u_char,
        kulen: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generate_kul(
        hashtype: *const oid,
        hashtype_len: u_int,
        engineID: *const u_char,
        engineID_len: size_t,
        Ku: *const u_char,
        ku_len: size_t,
        Kul: *mut u_char,
        kul_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn netsnmp_extend_kul(
        needKeyLen: u_int,
        hashoid: *mut oid,
        hashoid_len: u_int,
        privType: ::std::os::raw::c_int,
        engineID: *mut u_char,
        engineIDLen: u_int,
        kulBuf: *mut *mut u_char,
        kulBufLen: *mut size_t,
        kulBufSize: u_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn encode_keychange(
        hashtype: *const oid,
        hashtype_len: u_int,
        oldkey: *mut u_char,
        oldkey_len: size_t,
        newkey: *mut u_char,
        newkey_len: size_t,
        kcstring: *mut u_char,
        kcstring_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn decode_keychange(
        hashtype: *const oid,
        hashtype_len: u_int,
        oldkey: *mut u_char,
        oldkey_len: size_t,
        kcstring: *mut u_char,
        kcstring_len: size_t,
        newkey: *mut u_char,
        newkey_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn1_string_st {
    _unused: [u8; 0],
}
pub type ASN1_INTEGER = asn1_string_st;
pub type ASN1_ENUMERATED = asn1_string_st;
pub type ASN1_BIT_STRING = asn1_string_st;
pub type ASN1_OCTET_STRING = asn1_string_st;
pub type ASN1_PRINTABLESTRING = asn1_string_st;
pub type ASN1_T61STRING = asn1_string_st;
pub type ASN1_IA5STRING = asn1_string_st;
pub type ASN1_GENERALSTRING = asn1_string_st;
pub type ASN1_UNIVERSALSTRING = asn1_string_st;
pub type ASN1_BMPSTRING = asn1_string_st;
pub type ASN1_UTCTIME = asn1_string_st;
pub type ASN1_TIME = asn1_string_st;
pub type ASN1_GENERALIZEDTIME = asn1_string_st;
pub type ASN1_VISIBLESTRING = asn1_string_st;
pub type ASN1_UTF8STRING = asn1_string_st;
pub type ASN1_STRING = asn1_string_st;
pub type ASN1_BOOLEAN = ::std::os::raw::c_int;
pub type ASN1_NULL = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn1_object_st {
    _unused: [u8; 0],
}
pub type ASN1_OBJECT = asn1_object_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ASN1_ITEM_st {
    _unused: [u8; 0],
}
pub type ASN1_ITEM = ASN1_ITEM_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn1_pctx_st {
    _unused: [u8; 0],
}
pub type ASN1_PCTX = asn1_pctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn1_sctx_st {
    _unused: [u8; 0],
}
pub type ASN1_SCTX = asn1_sctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dane_st {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bio_st {
    _unused: [u8; 0],
}
pub type BIO = bio_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bignum_st {
    _unused: [u8; 0],
}
pub type BIGNUM = bignum_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bignum_ctx {
    _unused: [u8; 0],
}
pub type BN_CTX = bignum_ctx;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bn_blinding_st {
    _unused: [u8; 0],
}
pub type BN_BLINDING = bn_blinding_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bn_mont_ctx_st {
    _unused: [u8; 0],
}
pub type BN_MONT_CTX = bn_mont_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bn_recp_ctx_st {
    _unused: [u8; 0],
}
pub type BN_RECP_CTX = bn_recp_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bn_gencb_st {
    _unused: [u8; 0],
}
pub type BN_GENCB = bn_gencb_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buf_mem_st {
    _unused: [u8; 0],
}
pub type BUF_MEM = buf_mem_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_cipher_st {
    _unused: [u8; 0],
}
pub type EVP_CIPHER = evp_cipher_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_cipher_ctx_st {
    _unused: [u8; 0],
}
pub type EVP_CIPHER_CTX = evp_cipher_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_md_st {
    _unused: [u8; 0],
}
pub type EVP_MD = evp_md_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_md_ctx_st {
    _unused: [u8; 0],
}
pub type EVP_MD_CTX = evp_md_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_pkey_st {
    _unused: [u8; 0],
}
pub type EVP_PKEY = evp_pkey_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_pkey_asn1_method_st {
    _unused: [u8; 0],
}
pub type EVP_PKEY_ASN1_METHOD = evp_pkey_asn1_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_pkey_method_st {
    _unused: [u8; 0],
}
pub type EVP_PKEY_METHOD = evp_pkey_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_pkey_ctx_st {
    _unused: [u8; 0],
}
pub type EVP_PKEY_CTX = evp_pkey_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_Encode_Ctx_st {
    _unused: [u8; 0],
}
pub type EVP_ENCODE_CTX = evp_Encode_Ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hmac_ctx_st {
    _unused: [u8; 0],
}
pub type HMAC_CTX = hmac_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dh_st {
    _unused: [u8; 0],
}
pub type DH = dh_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dh_method {
    _unused: [u8; 0],
}
pub type DH_METHOD = dh_method;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsa_st {
    _unused: [u8; 0],
}
pub type DSA = dsa_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsa_method {
    _unused: [u8; 0],
}
pub type DSA_METHOD = dsa_method;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsa_st {
    _unused: [u8; 0],
}
pub type RSA = rsa_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsa_meth_st {
    _unused: [u8; 0],
}
pub type RSA_METHOD = rsa_meth_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsa_pss_params_st {
    _unused: [u8; 0],
}
pub type RSA_PSS_PARAMS = rsa_pss_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_key_st {
    _unused: [u8; 0],
}
pub type EC_KEY = ec_key_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_key_method_st {
    _unused: [u8; 0],
}
pub type EC_KEY_METHOD = ec_key_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rand_meth_st {
    _unused: [u8; 0],
}
pub type RAND_METHOD = rand_meth_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rand_drbg_st {
    _unused: [u8; 0],
}
pub type RAND_DRBG = rand_drbg_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ssl_dane_st {
    _unused: [u8; 0],
}
pub type SSL_DANE = ssl_dane_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_st {
    _unused: [u8; 0],
}
pub type X509 = x509_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_algor_st {
    _unused: [u8; 0],
}
pub type X509_ALGOR = X509_algor_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_crl_st {
    _unused: [u8; 0],
}
pub type X509_CRL = X509_crl_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_crl_method_st {
    _unused: [u8; 0],
}
pub type X509_CRL_METHOD = x509_crl_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_revoked_st {
    _unused: [u8; 0],
}
pub type X509_REVOKED = x509_revoked_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_name_st {
    _unused: [u8; 0],
}
pub type X509_NAME = X509_name_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_pubkey_st {
    _unused: [u8; 0],
}
pub type X509_PUBKEY = X509_pubkey_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_store_st {
    _unused: [u8; 0],
}
pub type X509_STORE = x509_store_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_store_ctx_st {
    _unused: [u8; 0],
}
pub type X509_STORE_CTX = x509_store_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_object_st {
    _unused: [u8; 0],
}
pub type X509_OBJECT = x509_object_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_lookup_st {
    _unused: [u8; 0],
}
pub type X509_LOOKUP = x509_lookup_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_lookup_method_st {
    _unused: [u8; 0],
}
pub type X509_LOOKUP_METHOD = x509_lookup_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_VERIFY_PARAM_st {
    _unused: [u8; 0],
}
pub type X509_VERIFY_PARAM = X509_VERIFY_PARAM_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_sig_info_st {
    _unused: [u8; 0],
}
pub type X509_SIG_INFO = x509_sig_info_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pkcs8_priv_key_info_st {
    _unused: [u8; 0],
}
pub type PKCS8_PRIV_KEY_INFO = pkcs8_priv_key_info_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v3_ext_ctx {
    _unused: [u8; 0],
}
pub type X509V3_CTX = v3_ext_ctx;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct conf_st {
    _unused: [u8; 0],
}
pub type CONF = conf_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_init_settings_st {
    _unused: [u8; 0],
}
pub type OPENSSL_INIT_SETTINGS = ossl_init_settings_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ui_st {
    _unused: [u8; 0],
}
pub type UI = ui_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ui_method_st {
    _unused: [u8; 0],
}
pub type UI_METHOD = ui_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct engine_st {
    _unused: [u8; 0],
}
pub type ENGINE = engine_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ssl_st {
    _unused: [u8; 0],
}
pub type SSL = ssl_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ssl_ctx_st {
    _unused: [u8; 0],
}
pub type SSL_CTX = ssl_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct comp_ctx_st {
    _unused: [u8; 0],
}
pub type COMP_CTX = comp_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct comp_method_st {
    _unused: [u8; 0],
}
pub type COMP_METHOD = comp_method_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_POLICY_NODE_st {
    _unused: [u8; 0],
}
pub type X509_POLICY_NODE = X509_POLICY_NODE_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_POLICY_LEVEL_st {
    _unused: [u8; 0],
}
pub type X509_POLICY_LEVEL = X509_POLICY_LEVEL_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_POLICY_TREE_st {
    _unused: [u8; 0],
}
pub type X509_POLICY_TREE = X509_POLICY_TREE_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_POLICY_CACHE_st {
    _unused: [u8; 0],
}
pub type X509_POLICY_CACHE = X509_POLICY_CACHE_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUTHORITY_KEYID_st {
    _unused: [u8; 0],
}
pub type AUTHORITY_KEYID = AUTHORITY_KEYID_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DIST_POINT_st {
    _unused: [u8; 0],
}
pub type DIST_POINT = DIST_POINT_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ISSUING_DIST_POINT_st {
    _unused: [u8; 0],
}
pub type ISSUING_DIST_POINT = ISSUING_DIST_POINT_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NAME_CONSTRAINTS_st {
    _unused: [u8; 0],
}
pub type NAME_CONSTRAINTS = NAME_CONSTRAINTS_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crypto_ex_data_st {
    _unused: [u8; 0],
}
pub type CRYPTO_EX_DATA = crypto_ex_data_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ocsp_req_ctx_st {
    _unused: [u8; 0],
}
pub type OCSP_REQ_CTX = ocsp_req_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ocsp_response_st {
    _unused: [u8; 0],
}
pub type OCSP_RESPONSE = ocsp_response_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ocsp_responder_id_st {
    _unused: [u8; 0],
}
pub type OCSP_RESPID = ocsp_responder_id_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sct_st {
    _unused: [u8; 0],
}
pub type SCT = sct_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sct_ctx_st {
    _unused: [u8; 0],
}
pub type SCT_CTX = sct_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctlog_st {
    _unused: [u8; 0],
}
pub type CTLOG = ctlog_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctlog_store_st {
    _unused: [u8; 0],
}
pub type CTLOG_STORE = ctlog_store_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ct_policy_eval_ctx_st {
    _unused: [u8; 0],
}
pub type CT_POLICY_EVAL_CTX = ct_policy_eval_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_store_info_st {
    _unused: [u8; 0],
}
pub type OSSL_STORE_INFO = ossl_store_info_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_store_search_st {
    _unused: [u8; 0],
}
pub type OSSL_STORE_SEARCH = ossl_store_search_st;
pub type ossl_intmax_t = intmax_t;
pub type ossl_uintmax_t = uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_auth_alg_info_s {
    pub type_: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
    pub alg_oid: *mut oid,
    pub oid_len: ::std::os::raw::c_int,
    pub proper_length: ::std::os::raw::c_int,
    pub mac_length: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_netsnmp_auth_alg_info_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_auth_alg_info_s>(),
        40usize,
        concat!("Size of: ", stringify!(netsnmp_auth_alg_info_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_auth_alg_info_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_auth_alg_info_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_auth_alg_info_s>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_auth_alg_info_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_auth_alg_info_s>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_auth_alg_info_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_auth_alg_info_s>())).alg_oid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_auth_alg_info_s),
            "::",
            stringify!(alg_oid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_auth_alg_info_s>())).oid_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_auth_alg_info_s),
            "::",
            stringify!(oid_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_auth_alg_info_s>())).proper_length as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_auth_alg_info_s),
            "::",
            stringify!(proper_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_auth_alg_info_s>())).mac_length as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_auth_alg_info_s),
            "::",
            stringify!(mac_length)
        )
    );
}
impl Default for netsnmp_auth_alg_info_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_auth_alg_info = netsnmp_auth_alg_info_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netsnmp_priv_alg_info_s {
    pub type_: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
    pub alg_oid: *mut oid,
    pub oid_len: ::std::os::raw::c_int,
    pub proper_length: ::std::os::raw::c_int,
    pub iv_length: ::std::os::raw::c_int,
    pub pad_size: ::std::os::raw::c_int,
    pub cipher: *const EVP_CIPHER,
}
#[test]
fn bindgen_test_layout_netsnmp_priv_alg_info_s() {
    assert_eq!(
        ::std::mem::size_of::<netsnmp_priv_alg_info_s>(),
        48usize,
        concat!("Size of: ", stringify!(netsnmp_priv_alg_info_s))
    );
    assert_eq!(
        ::std::mem::align_of::<netsnmp_priv_alg_info_s>(),
        8usize,
        concat!("Alignment of ", stringify!(netsnmp_priv_alg_info_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_priv_alg_info_s>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_priv_alg_info_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_priv_alg_info_s>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_priv_alg_info_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_priv_alg_info_s>())).alg_oid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_priv_alg_info_s),
            "::",
            stringify!(alg_oid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_priv_alg_info_s>())).oid_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_priv_alg_info_s),
            "::",
            stringify!(oid_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_priv_alg_info_s>())).proper_length as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_priv_alg_info_s),
            "::",
            stringify!(proper_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_priv_alg_info_s>())).iv_length as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_priv_alg_info_s),
            "::",
            stringify!(iv_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<netsnmp_priv_alg_info_s>())).pad_size as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_priv_alg_info_s),
            "::",
            stringify!(pad_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netsnmp_priv_alg_info_s>())).cipher as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(netsnmp_priv_alg_info_s),
            "::",
            stringify!(cipher)
        )
    );
}
impl Default for netsnmp_priv_alg_info_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type netsnmp_priv_alg_info = netsnmp_priv_alg_info_s;
extern "C" {
    pub fn sc_get_authtype(hashoid: *const oid, hashoid_len: u_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_get_proper_auth_length_bytype(
        auth_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_get_auth_maclen(auth_type: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_get_auth_name(auth_type: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sc_get_auth_oid(auth_type: ::std::os::raw::c_int, oid_len: *mut size_t) -> *mut oid;
}
extern "C" {
    pub fn sc_get_auth_alg_byoid(oid: *const oid, len: u_int) -> *mut netsnmp_auth_alg_info;
}
extern "C" {
    pub fn sc_get_auth_alg_bytype(type_: u_int) -> *mut netsnmp_auth_alg_info;
}
extern "C" {
    pub fn sc_get_auth_alg_byindex(index: u_int) -> *mut netsnmp_auth_alg_info;
}
extern "C" {
    pub fn sc_get_properlength(hashtype: *const oid, hashtype_len: u_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_get_openssl_hashfn(auth_type: ::std::os::raw::c_int) -> *const EVP_MD;
}
extern "C" {
    pub fn sc_get_openssl_privfn(priv_type: ::std::os::raw::c_int) -> *const EVP_CIPHER;
}
extern "C" {
    pub fn sc_get_privtype(privtype: *const oid, privtype_len: u_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_get_priv_oid(type_: ::std::os::raw::c_int, oid_len: *mut size_t) -> *mut oid;
}
extern "C" {
    pub fn sc_get_proper_priv_length(
        privtype: *const oid,
        privtype_len: u_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_get_proper_priv_length_bytype(
        privtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_get_priv_alg_byoid(oid: *const oid, len: u_int) -> *mut netsnmp_priv_alg_info;
}
extern "C" {
    pub fn sc_get_priv_alg_bytype(type_: u_int) -> *mut netsnmp_priv_alg_info;
}
extern "C" {
    pub fn sc_get_priv_alg_byindex(index: u_int) -> *mut netsnmp_priv_alg_info;
}
extern "C" {
    pub fn sc_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_shutdown(
        majorID: ::std::os::raw::c_int,
        minorID: ::std::os::raw::c_int,
        serverarg: *mut ::std::os::raw::c_void,
        clientarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_random(buf: *mut u_char, buflen: *mut size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_generate_keyed_hash(
        authtype: *const oid,
        authtypelen: size_t,
        key: *const u_char,
        keylen: u_int,
        message: *const u_char,
        msglen: u_int,
        MAC: *mut u_char,
        maclen: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_check_keyed_hash(
        authtype: *const oid,
        authtypelen: size_t,
        key: *const u_char,
        keylen: u_int,
        message: *const u_char,
        msglen: u_int,
        MAC: *const u_char,
        maclen: u_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_encrypt(
        privtype: *const oid,
        privtypelen: size_t,
        key: *mut u_char,
        keylen: u_int,
        iv: *mut u_char,
        ivlen: u_int,
        plaintext: *const u_char,
        ptlen: u_int,
        ciphertext: *mut u_char,
        ctlen: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_decrypt(
        privtype: *const oid,
        privtypelen: size_t,
        key: *mut u_char,
        keylen: u_int,
        iv: *mut u_char,
        ivlen: u_int,
        ciphertext: *mut u_char,
        ctlen: u_int,
        plaintext: *mut u_char,
        ptlen: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_hash_type(
        auth_type: ::std::os::raw::c_int,
        buf: *const u_char,
        buf_len: size_t,
        MAC: *mut u_char,
        MAC_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_hash(
        hashtype: *const oid,
        hashtypelen: size_t,
        buf: *const u_char,
        buf_len: size_t,
        MAC: *mut u_char,
        MAC_len: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sc_get_transform_type(
        hashtype: *mut oid,
        hashtype_len: u_int,
        hash_fn: *mut ::std::option::Option<
            unsafe extern "C" fn(
                mode: ::std::os::raw::c_int,
                context: *mut *mut ::std::os::raw::c_void,
                data: *const u_char,
                data_len: ::std::os::raw::c_int,
                digest: *mut *mut u_char,
                digest_len: *mut size_t,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct enginetime_struct {
    pub engineID: *mut u_char,
    pub engineID_len: u_int,
    pub engineTime: u_int,
    pub engineBoot: u_int,
    pub lastReceivedEngineTime: time_t,
    pub authenticatedFlag: u_int,
    pub next: *mut enginetime_struct,
}
#[test]
fn bindgen_test_layout_enginetime_struct() {
    assert_eq!(
        ::std::mem::size_of::<enginetime_struct>(),
        48usize,
        concat!("Size of: ", stringify!(enginetime_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<enginetime_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(enginetime_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<enginetime_struct>())).engineID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(enginetime_struct),
            "::",
            stringify!(engineID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<enginetime_struct>())).engineID_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(enginetime_struct),
            "::",
            stringify!(engineID_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<enginetime_struct>())).engineTime as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(enginetime_struct),
            "::",
            stringify!(engineTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<enginetime_struct>())).engineBoot as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(enginetime_struct),
            "::",
            stringify!(engineBoot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<enginetime_struct>())).lastReceivedEngineTime as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(enginetime_struct),
            "::",
            stringify!(lastReceivedEngineTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<enginetime_struct>())).authenticatedFlag as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(enginetime_struct),
            "::",
            stringify!(authenticatedFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<enginetime_struct>())).next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(enginetime_struct),
            "::",
            stringify!(next)
        )
    );
}
impl Default for enginetime_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type enginetime = enginetime_struct;
pub type Enginetime = *mut enginetime_struct;
extern "C" {
    pub fn get_enginetime(
        engineID: *const u_char,
        engineID_len: u_int,
        engine_boot: *mut u_int,
        engine_time: *mut u_int,
        authenticated: u_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_enginetime_ex(
        engineID: *mut u_char,
        engineID_len: u_int,
        engine_boot: *mut u_int,
        engine_time: *mut u_int,
        last_engine_time: *mut u_int,
        authenticated: u_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_enginetime(
        engineID: *const u_char,
        engineID_len: u_int,
        engine_boot: u_int,
        engine_time: u_int,
        authenticated: u_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn search_enginetime_list(engineID: *const u_char, engineID_len: u_int) -> Enginetime;
}
extern "C" {
    pub fn hash_engineID(engineID: *const u_char, engineID_len: u_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dump_etimelist_entry(e: Enginetime, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dump_etimelist();
}
extern "C" {
    pub fn free_etimelist();
}
extern "C" {
    pub fn free_enginetime(engineID: *mut ::std::os::raw::c_uchar, engineID_len: size_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snmp_secmod_outgoing_params {
    pub msgProcModel: ::std::os::raw::c_int,
    pub globalData: *mut u_char,
    pub globalDataLen: size_t,
    pub maxMsgSize: ::std::os::raw::c_int,
    pub secModel: ::std::os::raw::c_int,
    pub secEngineID: *mut u_char,
    pub secEngineIDLen: size_t,
    pub secName: *mut ::std::os::raw::c_char,
    pub secNameLen: size_t,
    pub secLevel: ::std::os::raw::c_int,
    pub scopedPdu: *mut u_char,
    pub scopedPduLen: size_t,
    pub secStateRef: *mut ::std::os::raw::c_void,
    pub secParams: *mut u_char,
    pub secParamsLen: *mut size_t,
    pub wholeMsg: *mut *mut u_char,
    pub wholeMsgLen: *mut size_t,
    pub wholeMsgOffset: *mut size_t,
    pub pdu: *mut netsnmp_pdu,
    pub session: *mut netsnmp_session,
}
#[test]
fn bindgen_test_layout_snmp_secmod_outgoing_params() {
    assert_eq!(
        ::std::mem::size_of::<snmp_secmod_outgoing_params>(),
        152usize,
        concat!("Size of: ", stringify!(snmp_secmod_outgoing_params))
    );
    assert_eq!(
        ::std::mem::align_of::<snmp_secmod_outgoing_params>(),
        8usize,
        concat!("Alignment of ", stringify!(snmp_secmod_outgoing_params))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).msgProcModel as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(msgProcModel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).globalData as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(globalData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).globalDataLen as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(globalDataLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).maxMsgSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(maxMsgSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).secModel as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(secModel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).secEngineID as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(secEngineID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).secEngineIDLen as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(secEngineIDLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).secName as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(secName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).secNameLen as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(secNameLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).secLevel as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(secLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).scopedPdu as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(scopedPdu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).scopedPduLen as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(scopedPduLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).secStateRef as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(secStateRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).secParams as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(secParams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).secParamsLen as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(secParamsLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).wholeMsg as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(wholeMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).wholeMsgLen as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(wholeMsgLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).wholeMsgOffset as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(wholeMsgOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).pdu as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(pdu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_outgoing_params>())).session as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_outgoing_params),
            "::",
            stringify!(session)
        )
    );
}
impl Default for snmp_secmod_outgoing_params {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snmp_secmod_incoming_params {
    pub msgProcModel: ::std::os::raw::c_int,
    pub maxMsgSize: size_t,
    pub secParams: *mut u_char,
    pub secModel: ::std::os::raw::c_int,
    pub secLevel: ::std::os::raw::c_int,
    pub wholeMsg: *mut u_char,
    pub wholeMsgLen: size_t,
    pub secEngineID: *mut u_char,
    pub secEngineIDLen: *mut size_t,
    pub secName: *mut ::std::os::raw::c_char,
    pub secNameLen: *mut size_t,
    pub scopedPdu: *mut *mut u_char,
    pub scopedPduLen: *mut size_t,
    pub maxSizeResponse: *mut size_t,
    pub secStateRef: *mut *mut ::std::os::raw::c_void,
    pub sess: *mut netsnmp_session,
    pub pdu: *mut netsnmp_pdu,
    pub msg_flags: u_char,
}
#[test]
fn bindgen_test_layout_snmp_secmod_incoming_params() {
    assert_eq!(
        ::std::mem::size_of::<snmp_secmod_incoming_params>(),
        136usize,
        concat!("Size of: ", stringify!(snmp_secmod_incoming_params))
    );
    assert_eq!(
        ::std::mem::align_of::<snmp_secmod_incoming_params>(),
        8usize,
        concat!("Alignment of ", stringify!(snmp_secmod_incoming_params))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).msgProcModel as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(msgProcModel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).maxMsgSize as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(maxMsgSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).secParams as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(secParams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).secModel as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(secModel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).secLevel as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(secLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).wholeMsg as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(wholeMsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).wholeMsgLen as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(wholeMsgLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).secEngineID as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(secEngineID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).secEngineIDLen as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(secEngineIDLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).secName as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(secName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).secNameLen as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(secNameLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).scopedPdu as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(scopedPdu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).scopedPduLen as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(scopedPduLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).maxSizeResponse as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(maxSizeResponse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).secStateRef as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(secStateRef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).sess as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(sess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).pdu as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(pdu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_incoming_params>())).msg_flags as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_incoming_params),
            "::",
            stringify!(msg_flags)
        )
    );
}
impl Default for snmp_secmod_incoming_params {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type SecmodSessionCallback = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut netsnmp_session) -> ::std::os::raw::c_int,
>;
pub type SecmodPduCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut netsnmp_pdu) -> ::std::os::raw::c_int>;
pub type Secmod2PduCallback = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut netsnmp_pdu, arg2: *mut netsnmp_pdu) -> ::std::os::raw::c_int,
>;
pub type SecmodOutMsg = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut snmp_secmod_outgoing_params) -> ::std::os::raw::c_int,
>;
pub type SecmodInMsg = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut snmp_secmod_incoming_params) -> ::std::os::raw::c_int,
>;
pub type SecmodFreeState =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type SecmodHandleReport = ::std::option::Option<
    unsafe extern "C" fn(
        sessp: *mut ::std::os::raw::c_void,
        transport: *mut netsnmp_transport,
        arg1: *mut netsnmp_session,
        result: ::std::os::raw::c_int,
        origpdu: *mut netsnmp_pdu,
    ),
>;
pub type SecmodDiscoveryMethod = ::std::option::Option<
    unsafe extern "C" fn(
        slp: *mut ::std::os::raw::c_void,
        session: *mut netsnmp_session,
    ) -> ::std::os::raw::c_int,
>;
pub type SecmodPostDiscovery = ::std::option::Option<
    unsafe extern "C" fn(
        slp: *mut ::std::os::raw::c_void,
        session: *mut netsnmp_session,
    ) -> ::std::os::raw::c_int,
>;
pub type SecmodSessionSetup = ::std::option::Option<
    unsafe extern "C" fn(
        in_session: *mut netsnmp_session,
        out_session: *mut netsnmp_session,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct snmp_secmod_def {
    pub session_open: SecmodSessionCallback,
    pub session_close: SecmodSessionCallback,
    pub session_setup: SecmodSessionSetup,
    pub pdu_free: SecmodPduCallback,
    pub pdu_clone: Secmod2PduCallback,
    pub pdu_timeout: SecmodPduCallback,
    pub pdu_free_state_ref: SecmodFreeState,
    pub encode_reverse: SecmodOutMsg,
    pub encode_forward: SecmodOutMsg,
    pub decode: SecmodInMsg,
    pub handle_report: SecmodHandleReport,
    pub probe_engineid: SecmodDiscoveryMethod,
    pub post_probe_engineid: SecmodPostDiscovery,
}
#[test]
fn bindgen_test_layout_snmp_secmod_def() {
    assert_eq!(
        ::std::mem::size_of::<snmp_secmod_def>(),
        104usize,
        concat!("Size of: ", stringify!(snmp_secmod_def))
    );
    assert_eq!(
        ::std::mem::align_of::<snmp_secmod_def>(),
        8usize,
        concat!("Alignment of ", stringify!(snmp_secmod_def))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_def>())).session_open as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_def),
            "::",
            stringify!(session_open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_def>())).session_close as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_def),
            "::",
            stringify!(session_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_def>())).session_setup as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_def),
            "::",
            stringify!(session_setup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_def>())).pdu_free as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_def),
            "::",
            stringify!(pdu_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_def>())).pdu_clone as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_def),
            "::",
            stringify!(pdu_clone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_def>())).pdu_timeout as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_def),
            "::",
            stringify!(pdu_timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_def>())).pdu_free_state_ref as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_def),
            "::",
            stringify!(pdu_free_state_ref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_def>())).encode_reverse as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_def),
            "::",
            stringify!(encode_reverse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_def>())).encode_forward as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_def),
            "::",
            stringify!(encode_forward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_def>())).decode as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_def),
            "::",
            stringify!(decode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_def>())).handle_report as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_def),
            "::",
            stringify!(handle_report)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_def>())).probe_engineid as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_def),
            "::",
            stringify!(probe_engineid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snmp_secmod_def>())).post_probe_engineid as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_def),
            "::",
            stringify!(post_probe_engineid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snmp_secmod_list {
    pub securityModel: ::std::os::raw::c_int,
    pub secDef: *mut snmp_secmod_def,
    pub next: *mut snmp_secmod_list,
}
#[test]
fn bindgen_test_layout_snmp_secmod_list() {
    assert_eq!(
        ::std::mem::size_of::<snmp_secmod_list>(),
        24usize,
        concat!("Size of: ", stringify!(snmp_secmod_list))
    );
    assert_eq!(
        ::std::mem::align_of::<snmp_secmod_list>(),
        8usize,
        concat!("Alignment of ", stringify!(snmp_secmod_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_list>())).securityModel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_list),
            "::",
            stringify!(securityModel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_list>())).secDef as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_list),
            "::",
            stringify!(secDef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snmp_secmod_list>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(snmp_secmod_list),
            "::",
            stringify!(next)
        )
    );
}
impl Default for snmp_secmod_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn register_sec_mod(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut snmp_secmod_def,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_sec_mod(arg1: ::std::os::raw::c_int) -> *mut snmp_secmod_def;
}
extern "C" {
    pub fn unregister_sec_mod(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_secmod();
}
extern "C" {
    pub fn shutdown_secmod();
}
extern "C" {
    pub fn clear_sec_mod();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usmStateReference {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usmUser {
    pub flags: u_int,
    pub engineID: *mut u_char,
    pub engineIDLen: size_t,
    pub name: *mut ::std::os::raw::c_char,
    pub secName: *mut ::std::os::raw::c_char,
    pub cloneFrom: *mut oid,
    pub cloneFromLen: size_t,
    pub authProtocol: *mut oid,
    pub authProtocolLen: size_t,
    pub authKey: *mut u_char,
    pub authKeyLen: size_t,
    pub authKeyKu: *mut u_char,
    pub authKeyKuLen: size_t,
    pub privProtocol: *mut oid,
    pub privProtocolLen: size_t,
    pub privKeyKu: *mut u_char,
    pub privKeyKuLen: size_t,
    pub privKey: *mut u_char,
    pub privKeyLen: size_t,
    pub userPublicString: *mut u_char,
    pub userPublicStringLen: size_t,
    pub userStatus: ::std::os::raw::c_int,
    pub userStorageType: ::std::os::raw::c_int,
    pub usmDHUserAuthKeyChange: *mut ::std::os::raw::c_void,
    pub usmDHUserPrivKeyChange: *mut ::std::os::raw::c_void,
    pub next: *mut usmUser,
    pub prev: *mut usmUser,
}
#[test]
fn bindgen_test_layout_usmUser() {
    assert_eq!(
        ::std::mem::size_of::<usmUser>(),
        208usize,
        concat!("Size of: ", stringify!(usmUser))
    );
    assert_eq!(
        ::std::mem::align_of::<usmUser>(),
        8usize,
        concat!("Alignment of ", stringify!(usmUser))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).engineID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(engineID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).engineIDLen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(engineIDLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).secName as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(secName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).cloneFrom as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(cloneFrom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).cloneFromLen as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(cloneFromLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).authProtocol as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(authProtocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).authProtocolLen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(authProtocolLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).authKey as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(authKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).authKeyLen as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(authKeyLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).authKeyKu as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(authKeyKu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).authKeyKuLen as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(authKeyKuLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).privProtocol as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(privProtocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).privProtocolLen as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(privProtocolLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).privKeyKu as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(privKeyKu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).privKeyKuLen as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(privKeyKuLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).privKey as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(privKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).privKeyLen as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(privKeyLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).userPublicString as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(userPublicString)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).userPublicStringLen as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(userPublicStringLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).userStatus as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(userStatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).userStorageType as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(userStorageType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).usmDHUserAuthKeyChange as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(usmDHUserAuthKeyChange)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).usmDHUserPrivKeyChange as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(usmDHUserPrivKeyChange)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).next as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<usmUser>())).prev as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(usmUser),
            "::",
            stringify!(prev)
        )
    );
}
impl Default for usmUser {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn usm_malloc_usmStateReference() -> *mut usmStateReference;
}
extern "C" {
    pub fn usm_free_usmStateReference(old: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn usm_set_usmStateReference_name(
        ref_: *mut usmStateReference,
        name: *mut ::std::os::raw::c_char,
        name_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_set_usmStateReference_engine_id(
        ref_: *mut usmStateReference,
        engine_id: *mut u_char,
        engine_id_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_set_usmStateReference_auth_protocol(
        ref_: *mut usmStateReference,
        auth_protocol: *mut oid,
        auth_protocol_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_set_usmStateReference_auth_key(
        ref_: *mut usmStateReference,
        auth_key: *mut u_char,
        auth_key_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_set_usmStateReference_priv_protocol(
        ref_: *mut usmStateReference,
        priv_protocol: *mut oid,
        priv_protocol_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_set_usmStateReference_priv_key(
        ref_: *mut usmStateReference,
        priv_key: *mut u_char,
        priv_key_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_set_usmStateReference_sec_level(
        ref_: *mut usmStateReference,
        sec_level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_clone_usmStateReference(
        from: *mut usmStateReference,
        to: *mut *mut usmStateReference,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_predict_int_length(
        type_: ::std::os::raw::c_int,
        number: ::std::os::raw::c_long,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asn_predict_length(
        type_: ::std::os::raw::c_int,
        ptr: *mut u_char,
        u_char_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_set_salt(
        iv: *mut u_char,
        iv_length: *mut size_t,
        priv_salt: *mut u_char,
        priv_salt_length: size_t,
        msgSalt: *mut u_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_extend_user_kul(user: *mut usmUser, privKeyBufSize: u_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_parse_security_parameters(
        secParams: *mut u_char,
        remaining: size_t,
        secEngineID: *mut u_char,
        secEngineIDLen: *mut size_t,
        boots_uint: *mut u_int,
        time_uint: *mut u_int,
        secName: *mut ::std::os::raw::c_char,
        secNameLen: *mut size_t,
        signature: *mut u_char,
        signature_length: *mut size_t,
        salt: *mut u_char,
        salt_length: *mut size_t,
        data_ptr: *mut *mut u_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_check_and_update_timeliness(
        secEngineID: *mut u_char,
        secEngineIDLen: size_t,
        boots_uint: u_int,
        time_uint: u_int,
        error: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_open_session(arg1: *mut netsnmp_session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_secmod_generate_out_msg(
        arg1: *mut snmp_secmod_outgoing_params,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_secmod_process_in_msg(
        arg1: *mut snmp_secmod_incoming_params,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_generate_out_msg(
        arg1: ::std::os::raw::c_int,
        arg2: *mut u_char,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut u_char,
        arg7: size_t,
        arg8: *mut ::std::os::raw::c_char,
        arg9: size_t,
        arg10: ::std::os::raw::c_int,
        arg11: *mut u_char,
        arg12: size_t,
        arg13: *mut ::std::os::raw::c_void,
        arg14: *mut u_char,
        arg15: *mut size_t,
        arg16: *mut *mut u_char,
        arg17: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_rgenerate_out_msg(
        arg1: ::std::os::raw::c_int,
        arg2: *mut u_char,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut u_char,
        arg7: size_t,
        arg8: *mut ::std::os::raw::c_char,
        arg9: size_t,
        arg10: ::std::os::raw::c_int,
        arg11: *mut u_char,
        arg12: size_t,
        arg13: *mut ::std::os::raw::c_void,
        arg14: *mut *mut u_char,
        arg15: *mut size_t,
        arg16: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_process_in_msg(
        arg1: ::std::os::raw::c_int,
        arg2: size_t,
        arg3: *mut u_char,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut u_char,
        arg7: size_t,
        arg8: *mut u_char,
        arg9: *mut size_t,
        arg10: *mut ::std::os::raw::c_char,
        arg11: *mut size_t,
        arg12: *mut *mut u_char,
        arg13: *mut size_t,
        arg14: *mut size_t,
        arg15: *mut *mut ::std::os::raw::c_void,
        arg16: *mut netsnmp_session,
        arg17: u_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_check_secLevel(
        level: ::std::os::raw::c_int,
        user: *mut usmUser,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_get_userList() -> *mut usmUser;
}
extern "C" {
    pub fn usm_get_user(
        engineID: *mut u_char,
        engineIDLen: size_t,
        name: *mut ::std::os::raw::c_char,
    ) -> *mut usmUser;
}
extern "C" {
    pub fn usm_get_user_from_list(
        engineID: *mut u_char,
        engineIDLen: size_t,
        name: *mut ::std::os::raw::c_char,
        userList: *mut usmUser,
        use_default: ::std::os::raw::c_int,
    ) -> *mut usmUser;
}
extern "C" {
    pub fn usm_add_user(user: *mut usmUser) -> *mut usmUser;
}
extern "C" {
    pub fn usm_add_user_to_list(user: *mut usmUser, userList: *mut usmUser) -> *mut usmUser;
}
extern "C" {
    pub fn usm_free_user(user: *mut usmUser) -> *mut usmUser;
}
extern "C" {
    pub fn usm_create_user() -> *mut usmUser;
}
extern "C" {
    pub fn usm_create_initial_user(
        name: *const ::std::os::raw::c_char,
        authProtocol: *const oid,
        authProtocolLen: size_t,
        privProtocol: *const oid,
        privProtocolLen: size_t,
    ) -> *mut usmUser;
}
extern "C" {
    pub fn usm_cloneFrom_user(from: *mut usmUser, to: *mut usmUser) -> *mut usmUser;
}
extern "C" {
    pub fn usm_remove_user(user: *mut usmUser) -> *mut usmUser;
}
extern "C" {
    pub fn usm_remove_user_from_list(
        user: *mut usmUser,
        userList: *mut *mut usmUser,
    ) -> *mut usmUser;
}
extern "C" {
    pub fn get_objid(
        line: *mut ::std::os::raw::c_char,
        optr: *mut *mut oid,
        len: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn usm_save_users(
        token: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn usm_save_users_from_list(
        user: *mut usmUser,
        token: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn usm_save_user(
        user: *mut usmUser,
        token: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn usm_store_users(
        majorID: ::std::os::raw::c_int,
        minorID: ::std::os::raw::c_int,
        serverarg: *mut ::std::os::raw::c_void,
        clientarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_read_user(line: *const ::std::os::raw::c_char) -> *mut usmUser;
}
extern "C" {
    pub fn usm_parse_config_usmUser(
        token: *const ::std::os::raw::c_char,
        line: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn usm_set_password(
        token: *const ::std::os::raw::c_char,
        line: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn usm_set_user_password(
        user: *mut usmUser,
        token: *const ::std::os::raw::c_char,
        line: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn init_usm();
}
extern "C" {
    pub fn init_usm_conf(app: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn init_usm_post_config(
        majorid: ::std::os::raw::c_int,
        minorid: ::std::os::raw::c_int,
        serverarg: *mut ::std::os::raw::c_void,
        clientarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deinit_usm_post_config(
        majorid: ::std::os::raw::c_int,
        minorid: ::std::os::raw::c_int,
        serverarg: *mut ::std::os::raw::c_void,
        clientarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear_user_list();
}
extern "C" {
    pub fn shutdown_usm();
}
extern "C" {
    pub fn usm_lookup_auth_type(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_lookup_auth_str(value: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn usm_get_auth_oid(auth_type: ::std::os::raw::c_int, oid_len: *mut size_t) -> *mut oid;
}
extern "C" {
    pub fn usm_lookup_priv_type(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_lookup_priv_str(value: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn usm_get_priv_oid(priv_type: ::std::os::raw::c_int, oid_len: *mut size_t) -> *mut oid;
}
extern "C" {
    pub fn usm_create_usmUser(
        userName: *const ::std::os::raw::c_char,
        engineID: *const ::std::os::raw::c_char,
        flags: u_int,
        authType: ::std::os::raw::c_int,
        authPass: *const ::std::os::raw::c_char,
        privType: ::std::os::raw::c_int,
        privPass: *const ::std::os::raw::c_char,
        errorMsg: *mut *const ::std::os::raw::c_char,
    ) -> *mut usmUser;
}
extern "C" {
    pub fn usm_remove_usmUser(user: *mut usmUser) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_remove_usmUser_from_list(
        user: *mut usmUser,
        ppuserList: *mut *mut usmUser,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_create_usmUser_from_string(
        line: *mut ::std::os::raw::c_char,
        errorMsg: *mut *const ::std::os::raw::c_char,
    ) -> *mut usmUser;
}
extern "C" {
    pub fn usm_create_user_from_session(session: *mut netsnmp_session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_create_user_from_session_hook(
        slp: *mut ::std::os::raw::c_void,
        session: *mut netsnmp_session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usm_parse_create_usmUser(
        token: *const ::std::os::raw::c_char,
        line: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_default_authtype(arg1: *mut size_t) -> *const oid;
}
extern "C" {
    pub fn get_default_privtype(arg1: *mut size_t) -> *const oid;
}
extern "C" {
    pub fn snmpv3_authtype_conf(
        word: *const ::std::os::raw::c_char,
        cptr: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn snmpv3_privtype_conf(
        word: *const ::std::os::raw::c_char,
        cptr: *mut ::std::os::raw::c_char,
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
impl Default for __va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr_at {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr_ax25 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr_dl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr_eon {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr_inarp {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr_ipx {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr_iso {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr_ns {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr_x25 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct snmp_internal_session {
    pub _address: u8,
}
